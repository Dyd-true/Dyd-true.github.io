<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dyd&#39;s Blog</title>
  
  <subtitle>He who has a strong enough why can bear almost any how.</subtitle>
  <link href="https://dyd-true.github.io/atom.xml" rel="self"/>
  
  <link href="https://dyd-true.github.io/"/>
  <updated>2021-12-24T14:19:07.352Z</updated>
  <id>https://dyd-true.github.io/</id>
  
  <author>
    <name>Dyd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>后缀自动机</title>
    <link href="https://dyd-true.github.io/2021/12/23/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>https://dyd-true.github.io/2021/12/23/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/</id>
    <published>2021-12-23T10:53:28.000Z</published>
    <updated>2021-12-24T14:19:07.352Z</updated>
    
    <content type="html"><![CDATA[<p> 自动机/鸡/姬，到底那个好</p><span id="more"></span><h1 id="后缀自动机"><a href="#后缀自动机" class="headerlink" title="后缀自动机"></a>后缀自动机</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>后缀自动机</strong>（SAM）是一个<strong>状态机</strong>，他有<strong>一个起点</strong>，<strong>若干终点</strong>，原串的所有本质不同子串和从SAM起点开始的所有路径<strong>一一对应，不重不漏</strong>，所以终点就是包含后缀的点</p><p>简单来说就是用一个边上有字符的DAG存储下了一个字符串的所有子串（当然Trie也可以做到，但是Trie的点数和边数都是 $O(n^2)$ 而SAM的点数和边数都是 $O(n)$ 的）</p><h2 id="一些性质"><a href="#一些性质" class="headerlink" title="一些性质"></a>一些性质</h2><p>再继续讨论SAM前，我们必须先知道一些东西</p><h3 id="endpos"><a href="#endpos" class="headerlink" title="endpos"></a>endpos</h3><p>定义函数 $endpos(S)$ 表示<strong>子串 $S$ 在原串中出现的位置的尾字母下标集合</strong>，如对于字符串“abcbabc”，有 $endpos(ab) = \{2, 6\}$ </p><p>endpos有以下结论（<strong>较常用</strong>）：</p><ol><li><p>对于两个子串 $s_1, s_2$ ，有：<br>$$<br>\begin{aligned}<br>&amp; s_1是s_2的后缀 \Leftrightarrow endpos(s_2) \subseteq endpos(s_1) \\<br>&amp; s_1不是是s_2的后缀 \Leftrightarrow endpos(s_2) \wedge endpos(s_1) = \phi \\<br>\end{aligned}<br>$$<br>正确性可以感性理解一下</p></li><li><p>两个不同子串的endpos，要么有包含关系，要么没有交集，可以理解为，它们要么有后缀关系，要么没有</p></li></ol><p>对于endpos相同的子串，我们将它们归为一个<strong>endpos等价类</strong>，对于任意一个endpos等价类，将包含在其中的所有子串依长度从大到小排序，则每一个子串的长度均为上一个子串的长度减1，且为上一个子串的后缀（简单来说，一个endpos等价类内的串的长度连续）</p><p>定义  $longest(st), shortest(st)$ ，表示endpos等价类 $st$ 中最长，最短的子串，由以上定义可知：对于 $longest(st)$ 的任意后缀 $s$ ，如果 $| shortest(st) | \le | s | \le | longsest(st) |$ ，则 $s \in st$  </p><p>而我们还有一个结论：</p><p><strong>endpos等价类个数的级别为 $O(n)$</strong> </p><p>对于一个类（endpos等价类） $st$ ，在 $longest(st)$ 前添加任意一个字符（满足新形成的字符串为原串子串），得到的字符串必然不属于此类，因此会得到若干个新的类，得到新形成的字符串的endpos必然为 $endpos(longest(st))$ 的子集，并且分别添加两个不同的字符，所得到的两个字符串的endpos必然完全不相交，所以对于此操作（添加一个字符），我们可以认为是对一个原集合进行分割，分割得到几个新的集合，且保留原集合，新的集合还可以继续分割，但是总的分割的次数不会超过原集合的大小，所以最终形成的集合个数也不会超过 $2n$ </p><h3 id="parent-tree"><a href="#parent-tree" class="headerlink" title="parent tree"></a>parent tree</h3><p>考虑上面类的划分过程，将一个串前面添加字符，得到新的类，这种关系可以构成一棵<strong>树</strong>，如对于串“aababa”（图中红色串为每个类的最长串）：</p><p><img src="https://s2.loli.net/2021/12/23/ycUCONS1Aa2fvVd.png" alt="pt"></p><p>于是，类之间就有了父子关系，我们称这棵树为<strong>parent tree</strong>，记类 $a$ 的父节点为 $fa(a)$ </p><p>也有个结论：<br>$$<br>|longest(fa(a))| + 1 = |shortest(a)|<br>$$<br>正确性很显然，从建树的步骤中就可以看出，在一个类中的最长子串前再添加一个字符，形成的字符串就必然属于其儿子中的一类，且这个新形成的字符串肯定是它所属的类中最短的一个，所以我们只需储存 $|longest(a)|$ </p><p>那么定义那么多有什么用呢？其实，<strong>SAM的节点就是parent tree中的节点</strong>，只不过二者的边不同，其中空串所属的节点（parent tree的根）就是后缀自动机的源点，而最大子串（整个原串）所属于的节点，以及其在parent tree上的祖先就是终点，如图即是一个SAM，蓝色为SAM的边，橘色为终点：</p><p><img src="https://s2.loli.net/2021/12/23/3iyroqBa6Fw1MId.png" alt="SAM"></p><p>根据定义，SAM的边应该满足：<strong>从源点出发到达点 $i$ 的任意一条路径形成的字符串均属于节点  $i$ 所代表的类</strong></p><p>二者边的主要区别为，延parent tree的边往下走是在字符串<strong>前面</strong>添加字符，延自动机的边往下走是在字符串<strong>后面</strong>添加字符，故parent tree主要用来求节点（即各个字符串）的性质，而后缀自动机本身则主要用来直接跑字符串</p><h3 id="数量级"><a href="#数量级" class="headerlink" title="数量级"></a>数量级</h3><p>前面证过，<strong>SAM的点数为 $O(n)$</strong></p><p>下面证明：<strong>SAM的边数为 $O(n)$</strong> </p><p>先取<strong>后缀自动机的任意一棵生成树</strong>（不是parent tree），这棵树一定与点数同级，即 $O(n)$ ，那么我们考虑向这棵生成树中加边</p><p>对于每个终止节点，我们按一定顺序跑遍属于它的子串（跑的时候逆着边的方向），如果能顺利跑回源点，则跑下一个子串；否则，说明我们需要加边，每次连上本应该跑回的边，沿它跑回下一个节点（这里若干次加边后得到一条回源点的路可能不是对于的当前串，但没关系，因为它一定对于终点的某一个子串，我们下次跑那个子串的时候就不必加边了，之后重跑我们原本希望跑的子串，直到真正顺利跑完这个子串）</p><p>这样，当跑完所有终止节点时，在原本的生成树上增加的边不会超过后缀的个数，即 $n$ 个，故总的边数是 $O(n)$ 级的</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>那么如何构造SAM呢？</p><p>先看看构造好的长啥样（这个SAM比较特殊，只有一个终点）：</p><p><img src="https://s2.loli.net/2021/12/23/n1TRXCxIJgzH95q.jpg" alt="SAM2"></p><p>那整齐的一行节点表示的就是各个前缀所属的节点，显然，对于任意一个前缀，它在它所属的类中长度是最长的（不能再在其前面添加字符）</p><p>而相邻两个前缀所属点之间也肯定有连边，当然，不相邻的节点之间也会有一些边</p><p>上面那些零零散散的节点则是不包含任意一个前缀的节点</p><p>而蓝色的边就是SAM中正常的边，绿色的边是parent tree</p><p>SAM的构造是在线的，即我们通过不断添加单个字符的方式构建后缀自动机，时刻调整其状态</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//1为空节点</span></span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">1</span>, last = <span class="number">1</span>; <span class="comment">//last:未加入此字符前最长的前缀所属的节点的编号</span></span><br><span class="line"><span class="comment">//这里的节点只维护了最长的串,因为所有长度小于它但同结尾的串一定被它的祖先维护了</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> len, fa; <span class="comment">//最长长度,父节点</span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">26</span>]; <span class="comment">//类似于Trie</span></span><br><span class="line">&#125; nd[N &lt;&lt; <span class="number">1</span>]; <span class="comment">//开2倍</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last, np = last = ++tot;</span><br><span class="line">nd[np].len = nd[p].len + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; p &amp;&amp; !nd[p].ch[x]; p = nd[p].fa) <span class="comment">//遍历所有长度小于它但同结尾的串,加字符</span></span><br><span class="line">nd[p].ch[x] = np;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果最后形成的新字符串没有旧串里出现过,</span></span><br><span class="line"><span class="comment">说明x实际上是一个在旧串中没有出现过的字符</span></span><br><span class="line"><span class="comment">因此不可能存在除节点1以外的祖先</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line">nd[np].fa = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q = nd[p].ch[x];</span><br><span class="line"><span class="keyword">if</span> (nd[q].len == nd[p].len + <span class="number">1</span>) <span class="comment">//判断np是否为q的子节点</span></span><br><span class="line">nd[np].fa = q;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//不是就说明q含了不该含的子串,直接新建节点为np的父节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nq = ++tot;</span><br><span class="line">nd[nq] = nd[q], nd[nq].len = nd[p].len + <span class="number">1</span>; <span class="comment">//这里就相当于去掉不该含的串</span></span><br><span class="line">nd[q].fa = nd[np].fa = nq;</span><br><span class="line"><span class="keyword">for</span> (; p &amp;&amp; nd[p].ch[x] == q; p = nd[p].fa) <span class="comment">//同理跟新</span></span><br><span class="line">nd[p].ch[x] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; sam;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 自动机/鸡/姬，到底那个好&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="后缀自动机,SAM" scheme="https://dyd-true.github.io/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA-SAM/"/>
    
  </entry>
  
  <entry>
    <title>行列式和基尔霍夫矩阵</title>
    <link href="https://dyd-true.github.io/2021/12/22/%E8%A1%8C%E5%88%97%E5%BC%8F%E5%92%8C%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E7%9F%A9%E9%98%B5/"/>
    <id>https://dyd-true.github.io/2021/12/22/%E8%A1%8C%E5%88%97%E5%BC%8F%E5%92%8C%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E7%9F%A9%E9%98%B5/</id>
    <published>2021-12-22T12:39:40.000Z</published>
    <updated>2021-12-24T14:18:36.049Z</updated>
    
    <content type="html"><![CDATA[<p>  神仙数学，一起递归式学的，就写在一起吧</p><span id="more"></span><h1 id="行列式和基尔霍夫矩阵"><a href="#行列式和基尔霍夫矩阵" class="headerlink" title="行列式和基尔霍夫矩阵"></a>行列式和基尔霍夫矩阵</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>给定一个无向图 $G(V, E)$ </p><ul><li><p>度数矩阵 $D$ ：当 $i \ne j$ 时，  $D[i][j] = 0$ ，否则  $D[i][j] = 点 i(j) 的度数$ </p></li><li><p>邻接矩阵 $A$ ：当 $(u, v) \in E$ 时， $A[u][v] = 1$ ，否则 $A[u][v] = 0$ </p></li><li><p><strong>基尔霍夫矩阵</strong>(Kirchhoff)  $K$ ，也称<strong>拉普拉斯算子</strong>：定义为 $K = D - A$ ，如图：</p><p><img src="https://s2.loli.net/2021/12/22/VatPLREvlyDocXh.png" alt="K"></p></li><li><p><a href="https://baike.baidu.com/item/%E8%A1%8C%E5%88%97%E5%BC%8F/2010180"><strong>行列式</strong></a>：对于一个 $n \times n$ 的矩阵 $X$ ，其行列式定义为 $\det(X) = \mid X \mid = \sum_{p} (-1)^{\tau(p)} \prod_{i = 1}^n a_{i, p_i}$ ，其中 $p$ 取遍 $1 \sim n$ 的全排列， $\tau(p)$ 表示<strong>排列 $p$ 的逆序对个数</strong>，行列式可以理解为所有列向量所夹的几何体的有向体积，这样可以结合从几何直观出发理解为线性变换的伸缩因子（没有屁用）</p></li><li><p><strong>排列的奇偶性</strong>：定义排列 $p$ 的奇偶性为 $\tau(p)$ 的奇偶性</p></li><li><p><strong>对换</strong>：交换一个排列 $p$ 中的两个元素 $p_i, p_j (i \ne j)$ ，其它元素不变</p></li></ul><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><p>我们来看如何快速求出行列式</p><h3 id="关于排列的奇偶性"><a href="#关于排列的奇偶性" class="headerlink" title="关于排列的奇偶性"></a>关于排列的奇偶性</h3><p>关于排列的奇偶性，有两个性质：</p><ol><li><strong>对于 $n(n \ge 2)$ 阶排列的所有排列情况，奇排列和偶排列各占一半</strong></li><li><strong>一个排列可以通过若干次对换变成一个元素严格递增的自然排列，对换次数的奇偶性与原排列的奇偶性相同</strong></li></ol><h3 id="关于行列式的性质"><a href="#关于行列式的性质" class="headerlink" title="关于行列式的性质"></a>关于行列式的性质</h3><ol><li><p>交换对应矩阵的2行（列），行列式取反</p></li><li><p>交换对应矩阵的1行和1列（进行一次<strong>矩阵转置</strong>），行列式不变</p></li><li><p>行列式的行（列）所有元素等比例变化，则行列式也等比例变化，如图：</p><p><img src="https://s2.loli.net/2021/12/22/Mj3HBxZNmVEyDhz.png" alt="行列k"></p></li><li><p>如果行列式对应矩阵 $A$ 中有一行（列），是对应2个矩阵 $B, C$ 中分别的2行（列）所有元素之和，且 $B, C$ 中其它元素都等于 $A$ 中对于元素，则有  $\mid A \mid = \mid B \mid + \mid C \mid$ ，如图：</p><p><img src="https://s2.loli.net/2021/12/22/aGZFo8zKqbBiefm.png" alt="行列式1"></p></li><li><p>如果一个矩阵存在两行（列）成比例则 $\mid A \mid = 0$ ，如图：</p><p><img src="https://s2.loli.net/2021/12/22/SFQXY2w85KWeJtZ.png" alt="行列式2"></p></li><li><p>把一个矩阵的一行（列）的值全部乘一个常数加到另一行（列）上，行列式值不变，如图：</p><p><img src="https://s2.loli.net/2021/12/22/W31fApMycDaFo5B.png" alt="行列式3"></p></li></ol><h3 id="关于代数余子式"><a href="#关于代数余子式" class="headerlink" title="关于代数余子式"></a>关于代数余子式</h3><p>由于<strong>代数余子式</strong>的定义过于复杂，所以在这里定义：</p><p>在一个 $n$ 阶行列式 $D$ 中选定 $k$ 行 $k$ 列可以组成一个 **$k$ 阶子行列式 $A$**，而删除在 $k$ 行 $k$ 列后剩下的 $n−k$ 阶行列式称为 $A$ 对应的 <strong>$n−k$ 阶余子式 $M$</strong></p><p>设 $A$ 在 $D$ 中的下标集合为 $\{ \mathbb{I}, \mathbb{J} \}$ ，其中 $\mathbb{I} = \{i_k\}$ ， $\mathbb{J} = \{j_k\}$ ，则定义 $(-1)^{(\sum \mathbb{I})(\sum \mathbb{J})} \times \mid M \mid$ 为 $n$ 阶行列式 $D$ 的 $k$ 阶子式 $A$ 的<strong>代数余子式</strong></p><p>对于单一元素 $a_{i,j}$ 我们令其代数余子式为 $A_{i,j}$ ，余子式为 $M_{i,j}$ ，有 $A_{i,j}=(-1)^{i+j}M_{i,j}$ </p><p>那么有如下性质：</p><ol><li><p>$n$ 阶行列式 $D$ 等于其任意一行（列）所有元素与其对应代数余子式的乘积之和，即<br>$$<br>\begin{aligned}<br>D = \sum_{j = 1}^n a_{i, j} \times A_{i, j}, (i \in [1, n]) \\<br>D = \sum_{i = 1}^n a_{i, j} \times A_{i, j}, (j \in [1, n]) \\<br>\end{aligned}<br>$$</p></li><li><p>$n$ 阶行列式 $D$ 的任意一行（列）余另不同的一行（列）对应元素的代数余子式之和为0<br> $$<br> \begin{aligned}<br> \sum_{k = 1}^n a_{i, k} \times A_{j, k} = 0, (i, j \in [1, n] \wedge i \ne j) \\<br> \sum_{k = 1}^n a_{k, i} \times A_{k, j} = 0, (i, j \in [1, n] \wedge i \ne j) \\<br> \end{aligned}<br> $$</p></li></ol><p>以上所有麻烦的要死的性质都不用证明，太好了！</p><h3 id="消元"><a href="#消元" class="headerlink" title="消元"></a>消元</h3><p>我们考虑一个情况，当一个矩阵任意一个位置出现0，看公式中的 $\prod_{i = 1}^n a_{i, p_i}$ ，发现只有有一个0，整个排列就没有贡献了，所以我们的思路就是利用上面（<del>讨厌至极的</del>）性质，让矩阵中出现0</p><p>我们现在考虑将矩阵一行（列）消成只有最后一个元素非0该怎么做，即实现图中变化：</p><p><img src="https://s2.loli.net/2021/12/22/xQysulI6frHmAdc.png" alt="非0"></p><p>利用行列式的性质6，对于1到第 $n−1$ 列中的第 $i$ 列，我们只需要让第 $i$ 列整列加上第 $n$ 列的 $\frac{a_{n,i}}{a_{n,n}}$ 倍就可以在 $\mid A \mid$ 不变的情况下使得整行前 $n−1$ 个元素被消掉</p><p>将最后一行消成只有 $a_{n, n}$ 非0后，由代数余子式的性质1可知 $D = a_{n, n} \times A_{n, n}$ ，其中 $A_{n, n}$ 就是红色矩阵：</p><p><img src="https://s2.loli.net/2021/12/22/lMVqvp7KU6jrifg.png" alt="A"></p><p>然后我们对于这个红色矩阵 $A_{n, n}$ 又消元，有 $A_{n, n} = a_{n - 1, n - 1} \times A_{n - 1, n - 1}$ </p><p>如此一直消元下去，得到的就是一个下三角行列式：</p><p><img src="https://s2.loli.net/2021/12/22/CK8jT1EdYtX9f2g.png" alt="三角"> </p><p>我们就会发现这样一个矩阵的行列式是其对角线所有元素的乘积，也就是 $\prod_{i = 1}^n a_{i, i}$ </p><h3 id="其它细节"><a href="#其它细节" class="headerlink" title="其它细节"></a>其它细节</h3><ul><li>每次取新的余子式的时候需要注意奇偶性，及时变化正负，因为记得代数余子式是要乘上一个 $(-1)^{(\sum \mathbb{I})(\sum \mathbb{J})}$ </li><li>如果题目要求 $\mod p$ 情况下的行列式，有些数是不一定有逆元的，或者说消元的时候精度出问题，我们可以考虑对两行（列）做辗转相减消元</li></ul><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>消元是 $O(n^3)$ 的，辗转相除法是 $O(\log p)$ 的，因为辗转相除和消元每次必然使得数变小，势能只会减少，所以这个是均摊到 $O(n^2)$ 的（我也不懂为啥），总时间为 $O(n^2\log n + n^3) = O(n^3)$ </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.luogu.com.cn/problem/P7112">【模板】行列式求值</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">600</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> P;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">det</span><span class="params">(<span class="keyword">int</span> x[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>, w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (x[i][i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//对第i行和第j行做辗转相减</span></span><br><span class="line"><span class="keyword">int</span> div = x[j][i] / x[i][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= n; ++k)</span><br><span class="line">x[j][k] = (x[j][k] - (LL)div * x[i][k] % P + P) % P;</span><br><span class="line"><span class="built_in">swap</span>(x[i], x[j]);</span><br><span class="line">w = -w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(x[i], x[j]);</span><br><span class="line">w = -w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">res = (LL)x[i][i] * res % P;</span><br><span class="line">res *= w;</span><br><span class="line"><span class="keyword">return</span> (res + P) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">STC <span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;P);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">det</span>(a));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基尔霍夫矩阵"><a href="#基尔霍夫矩阵" class="headerlink" title="基尔霍夫矩阵"></a>基尔霍夫矩阵</h2><p>基尔霍夫矩阵 $K$ 有如下性质：</p><ol><li>基尔霍夫矩阵的每一行或每一列上的元素和都是0</li><li>基尔霍夫矩阵的行列式的值为0</li><li>基尔霍夫矩阵的任意一个代数余子式值都相同</li><li>如果图 $G$ 不连通，基尔霍夫矩阵 $K$ 的任意主子式行列式值为0</li><li>如果图 $G$ 是一棵树，基尔霍夫矩阵 $K$ 的任意一个 $n − 1$ 阶主子式的行列式为1</li></ol><h2 id="Matrix-Tree-定理"><a href="#Matrix-Tree-定理" class="headerlink" title="Matrix-Tree 定理"></a>Matrix-Tree 定理</h2><p><strong>对于已经得出的基尔霍夫矩阵，去掉其第 $k$ 行和第 $k$ 列得出的矩阵的行列式，其绝对值为生成树的个数</strong>，该定理被称为<strong>Matrix-Tree定理（矩阵树定理）</strong></p><p>因此，对于给定的图 $G$ ，若要求其生成树个数，可以先求其基尔霍夫矩阵，然后随意取其任意一个 $n − 1$ 阶行列式，然后求出行列式的值，其绝对值就是这个图中<strong>生成树的个数</strong></p><p>以上的定理适用于<strong>无向无权图无自环</strong>的图，下面是一些拓展</p><h3 id="加权"><a href="#加权" class="headerlink" title="加权"></a>加权</h3><p>如果图中边有边权，可以把<strong>度数矩阵 $D$ 变成边的权值和</strong>，直接用Matrix-Tree 定理，求得的就是<strong>所有生成树边权乘积的总和</strong></p><h3 id="有向"><a href="#有向" class="headerlink" title="有向"></a>有向</h3><p>首先要把邻接矩阵 $A$ 变成有向图的邻接矩阵，然后对于 $D$ ，如果它记录的是<strong>到该点入的边权总和</strong>，那么求得的就是<strong>外向树</strong> (从根向外)，即 $D[i][j] = \sum_{j = 1}^n A[j][i]$ ；类似的，如果它记录的是<strong>到该点出的边权总和</strong>，那么求得的就是<strong>内向树</strong> (从外向根)</p><p>关于如何保证根，巨佬们说：去掉第 $k$ 行 $k$ 列就是以 $k$ 为根</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.luogu.com.cn/problem/P6178">【模板】Matrix-Tree 定理</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300</span> + <span class="number">5</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">det</span><span class="params">(<span class="keyword">int</span> x[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>, w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">2</span>; i &lt;= n; ++i) <span class="comment">//以1为根,故删掉1行1列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (x[i][i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> div = x[j][i] / x[i][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= n; ++k)</span><br><span class="line">x[j][k] = (x[j][k] - (LL)div * x[i][k] % P + P) % P;</span><br><span class="line"><span class="built_in">swap</span>(x[i], x[j]);</span><br><span class="line">w = -w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(x[i], x[j]);</span><br><span class="line">w = -w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">res = (LL)x[i][i] * res % P;</span><br><span class="line">res *= w;</span><br><span class="line"><span class="keyword">return</span> (res + P) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">STC <span class="keyword">int</span> k[N][N];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;t);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line"><span class="keyword">if</span> (t)</span><br><span class="line">&#123;</span><br><span class="line">k[u][v] = (k[u][v] - w + P) % P;</span><br><span class="line">k[v][v] = (k[v][v] + w) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k[u][v] = (k[u][v] - w + P) % P;</span><br><span class="line">k[v][v] = (k[v][v] + w) % P;</span><br><span class="line">k[v][u] = (k[v][u] - w + P) % P;</span><br><span class="line">k[u][u] = (k[u][u] + w) % P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">det</span>(k));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;  神仙数学，一起递归式学的，就写在一起吧&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="图论" scheme="https://dyd-true.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="基尔霍夫矩阵" scheme="https://dyd-true.github.io/tags/%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E7%9F%A9%E9%98%B5/"/>
    
    <category term="矩阵" scheme="https://dyd-true.github.io/tags/%E7%9F%A9%E9%98%B5/"/>
    
    <category term="行列式" scheme="https://dyd-true.github.io/tags/%E8%A1%8C%E5%88%97%E5%BC%8F/"/>
    
    <category term="Matrix-Tree定理" scheme="https://dyd-true.github.io/tags/Matrix-Tree%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/21总结</title>
    <link href="https://dyd-true.github.io/2021/12/22/test2021-12-21%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/22/test2021-12-21%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-22T12:25:34.000Z</published>
    <updated>2021-12-24T14:16:17.431Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="87d7407f86e6de9e962175ddd0f634a1fa15e5b606050fd9b6f612ac84ff67a9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">D'y'd は、パスワードを入力するように求められます</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">爆0了</summary>
    
    
    
    <category term="test" scheme="https://dyd-true.github.io/categories/test/"/>
    
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="基环树" scheme="https://dyd-true.github.io/tags/%E5%9F%BA%E7%8E%AF%E6%A0%91/"/>
    
    <category term="基尔霍夫矩阵" scheme="https://dyd-true.github.io/tags/%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E7%9F%A9%E9%98%B5/"/>
    
    <category term="生成树" scheme="https://dyd-true.github.io/tags/%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>后缀数组</title>
    <link href="https://dyd-true.github.io/2021/12/20/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    <id>https://dyd-true.github.io/2021/12/20/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</id>
    <published>2021-12-20T10:46:41.000Z</published>
    <updated>2021-12-24T14:18:55.528Z</updated>
    
    <content type="html"><![CDATA[<p> 字符串总是让人头疼</p><span id="more"></span><h1 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h1><h2 id="前置知识：基数排序"><a href="#前置知识：基数排序" class="headerlink" title="前置知识：基数排序"></a>前置知识：基数排序</h2><p>首先保证值域为 $[0, n] \wedge \mathbb{Z}$ </p><p>然后统计每个数有多少个，记作 $cnt[i]$ ，然后将 $cnt$ 求出前缀和，此时 $cnt[i]$ 就是“小于等于 $i$ 的数的个数”，倒序扫描每一个数（倒序是为了<strong>使排序稳定</strong>），扫到 $i$ 就令 $i$ 的排名为 $cnt[i]$ ，并 $–cnt[i]$ ，由此就可以做到<strong>单关键字基数排序</strong>，时间为 $O(n)$ </p><p>对于双关键字，我们先对第二关键字进行排序，然后不管第二关键字，只对第一关键字进行基数排序，由于基数排序是稳定的，所以当第一关键字相同时，第二关键字仍然是有序的</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>后缀数组是一种针对字符串的数据结构，为了方便，我们统一令字符串的<strong>下标从1开始</strong></p><ul><li>字符串：由字符组成的序列，用大写字母表示，如 $T = ababbcbac$ ，记其长度为 $len(T)$ </li><li>子串：一个字符串的某一段，记作 $T[2, 5] = babb$ ，其中 $[2, 5]$ 是下标区间</li><li>后缀：一个长度为 $len$ 的字符串有  $len$ 个后缀子串，为 $\{S \mid S = T[i, len], i \in [1, n]\}$ ，为了方便，称从 $i$ 开头的后缀为“第 $i$ 个后缀”，记作 $suf(i)$ （suffix），即 $suf(i) = T[i, len]$ </li><li>前缀：我们将串 $T$ 长度为 $len$ 的前缀 $T[1, len]$ 记为 $T^{len}$  </li><li>后缀数组 $SA[i]$ ：排名第 $i$ 的后缀是 $suf(SA[i])$ ，注意<strong>区别“排名为 $i$ ”和“第 $i$ 个后缀”</strong></li><li>排名数组 $rk[i]$ ：第 $i$ 个后缀的排名是 $rk[i]$ </li><li>$hei[i]$ （height）： $suf(SA[i])$ 与 $suf(SA[i - 1])$ 的LCP（最长公共前缀），<strong>可指字符串，也可指长度</strong></li><li>$lcp(i, j)$ ： $suf(SA[i])$ 和 $suf(SA[j])$ 的LCP</li><li> $h(i)$ ：第 $i$ 个后缀与排名在其前面的第一个后缀的LCP，即 $h(i) = height[rk[i]]$ </li></ul><h2 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h2><h3 id="SA-rk"><a href="#SA-rk" class="headerlink" title="SA/rk"></a>SA/rk</h3><p>求后缀数组 $SA$ 一般用<strong>倍增算法</strong>求出（同时 $rk$ 也就求出来了），时间复杂度为 $O(n \log n)$ </p><p>首先我们想如何对 $\{suf(i)\}$ 排序，由整数排序的方法我们知道，至少要进行 $n \log n$ 次比较，但是，字符串比较的时间复杂度为 $O(n)$ ，故直接比较时间为 $O(n^2 \log n)$ </p><p>不难想到，如果能让字符串对应上数字（且大小关系对应）不就可以直接比较了吗？倍增算法就基于此，其流程如下：</p><ol><li>假设我们要比较 $\{S_i[l, r]\}$ ，取 $mid = \frac{l + r}{2}$ ，递归比较 $\{S_i[l, mid]\}$ 和 $\{S_i[mid + 1, r]\}$ ；递归的边界是当 $S_i[l, r]$ 只有一个字符，可以直接排序</li><li>假设递归完毕，则 $\{S_i[l, mid]\}$ 和 $\{S_i[mid + 1, r]\}$ 已经有序，扫一遍可以把他们离散化到整数，设 $S_i[p, q] \rightarrow A_i[p, q]$ ，现在 $S_i[l, r]$ 被变成了整数二元组 $(A_i[l, mid], A_i[mid + 1, r])$ ，直接排序即可</li></ol><p>以上会递归 $\log n$ 层，每次基数排序为 $O(n)$ ，总时间复杂度为 $O(n \log n)$ 具体实现时常用循环代替递归</p><p>ps：其实有 $O(n)$ 的DC3算法，但不常用（常数大+难打），有时间再写吧（挖坑）</p><h3 id="hei"><a href="#hei" class="headerlink" title="hei"></a>hei</h3><p>首先证明三个引理：</p><p><strong>引理1</strong>：<br>$$<br>lcp(i, j) = \min(lcp(i, k), lcp(k, j)),i \le k \le j<br>$$<br>即对于任意的 $i \le k \le j$ ，排名第 $i$ 的后缀和排名第 $j$ 的后缀的LCP就是排名第 $k$ 的后缀和它们分别的LCP中较小值</p><p><img src="https://s2.loli.net/2021/12/20/fOrihaHRVncWGz6.png" alt="引理1"></p><p>证明：</p><p>排名为 $i$ 的后缀为 $S_i$ ，设 $T = \min(lcp(i, k), lcp(k, j)), R = lcp(i, j)$ </p><p>首先若 $R &lt; T$ ，那么由于 $lcp(i, k) \ge T$ ，所以 $i$ 的一定有前缀 $T$ ，而 $j$ 也有前缀 $T$ ，则 $lcp(i, j) = T$ ，矛盾，故 $lcp(i, j) \ge T$ </p><p>然后若 $R &gt; T$ ，那么因为 $S_i[1, R] = S_j[1, R]$ ，又z因为排名， $S_i[1, R] \le S_k[1, R] \le S_j[1, R]$ ，则 $S_i[1, R] = S_k[1, R] = S_j[1, R]$ ，则 $T = R$ ，矛盾</p><p>综上，$T = R$ 引理得证</p><p><strong>引理2</strong>：<br>$$<br>lcp(i, j) = \min(lcp(i, i + 1), lcp(i + 1, i + 2), …, lcp(j - 1, j)), i \le j<br>$$<br>即对于任意的 $i \le j$ 排名第 $i$ 的后缀和排名第 $j$ 的后缀的LCP就是它们之间的后缀（包括它们）中相邻两个的LCP的最小值</p><p>证明：</p><p>由引理1，有 $\min(lcp(i, i + 1), lcp(i + 1, i + 2)) = lcp(i, i + 2)$ 不断以此类推，即得引理2</p><p>这个引理也可以表示为：<br>$$<br>lcp(i, j) = \min_{i &lt; k \le j} \{ hei[k]\}<br>$$<br>用这个引理可以<strong>将后缀的LCP转化为RMQ</strong>，ST表可以做到 $O(1)$ </p><p><strong>引理3</strong>：<br>$$<br>hi(i) \ge hi(i - 1) - 1<br>$$<br> $hi(i - 1) \le 1$ 时显然成立</p><p>当 $hi(i - 1) &gt; 1$ 时，不妨设 $k = SA[rk[i - 1] - 1]$ ，即排名在第 $i$ 个后缀（不是排名为 $i$ 的后缀）前面的第一个后缀是第 $k$ 个后缀，同理设 $r = SA[rk[i] - 1]$ </p><p>有 $hi(i - 1) = lcp(suf(i - 1), suf(k))$ ，将这两个字符串各自去掉第一个字符，因为它们的LCP大于1，所以这个字符一定相等，则有 $lcp(suf(k + 1), suf(i)) = hi(i - 1) - 1$ 且 $suf(k + 1)$ 排在 $suf(i)$ 前面，则由引理1有<br>$$<br>\begin{aligned}<br>hi(i - 1) - 1<br>&amp;= lcp(suf(k + 1), suf(i))\\<br>&amp;= \min(lcp(suf(k + 1), suf(r)), lcp(suf(r), suf(i)))\\<br>&amp;\le lcp(suf(r), suf(i))\\<br>&amp;= hi(i)<br>\end{aligned}<br>$$<br>故 $hi(i) \ge hi(i - 1) - 1$ </p><p>有了上面三个引理，我们来看如何求 $hei$ </p><p>我们枚举 $1 \le i \le n$ ，计算 $hei[rk[i]]$ </p><p>对于 $rk[i] = 1$ ，不必管，因为 $hei[1] = 0$ ，否则令 $k = hi(i - 1) - 1$ （特别的，若 $hi(i - 1) \le 1$ ，就让 $k = 0$ ），然后暴力求 $k$ 还能向后走多少，易知时间为 $O(n)$  </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.acwing.com/problem/content/2717/">模板</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> sa[N], rk[N], hei[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">(<span class="keyword">int</span> _num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">STC <span class="keyword">int</span> x[N], y[N], c[N]; <span class="comment">//排序用,第一关键字,第二关键字,cnt</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">++c[x[i] = s[i]]; <span class="comment">//第一次只有一个字符,不必离散化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= _num; ++i)</span><br><span class="line">c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">sa[c[x[i]]--] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>, num; k &lt;= n; k &lt;&lt;= <span class="number">1</span>) <span class="comment">//k枚举关键字长度,合并后长度应为2k</span></span><br><span class="line">&#123;</span><br><span class="line">num = <span class="number">0</span>; <span class="comment">//记录离散化后的值域</span></span><br><span class="line"><span class="comment">//先以第二关键字排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">1</span>; i &lt;= n; ++i)  <span class="comment">//没有第二关键字的牌最前</span></span><br><span class="line">y[++num] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (sa[i] &gt; k)</span><br><span class="line">y[++num] = sa[i] - k;</span><br><span class="line"><span class="comment">//以第一关键字排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _num; ++i)</span><br><span class="line">c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">++c[x[i]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= _num; ++i)</span><br><span class="line">c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">sa[c[x[y[i]]]--] = y[i], y[i] = <span class="number">0</span>;  <span class="comment">//这里清空y实际上是清空x,因为后面交换了</span></span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="comment">//将排好序的字符串离散化</span></span><br><span class="line">x[sa[<span class="number">1</span>]] = num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">x[sa[i]] = (y[sa[i]] == y[sa[i - <span class="number">1</span>]] &amp;&amp; y[sa[i] + k] == y[sa[i - <span class="number">1</span>] + k]) ? num : ++num;</span><br><span class="line"><span class="keyword">if</span> (num == n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">_num = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">rk[sa[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_hei</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rk[i] == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (k)</span><br><span class="line">--k;</span><br><span class="line"><span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (i + k &lt;= n &amp;&amp; j + k &lt;= n &amp;&amp; s[i + k] == s[j + k])</span><br><span class="line">++k;</span><br><span class="line">hei[rk[i]] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">get_sa</span>(<span class="string">&#x27;z&#x27;</span>);</span><br><span class="line"><span class="built_in">get_hei</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, hei[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>SA的应用主要是通过引理2来实现的</p><h3 id="多模式串的匹配"><a href="#多模式串的匹配" class="headerlink" title="多模式串的匹配"></a>多模式串的匹配</h3><p>考虑如下问题：给定模式串 $P$ 和长度为 $n$ 的文本串 $T$ 询问 $P$ 在 $T$ 中出现的情况</p><p>当 $P$ 只有一个时，就是kmp，当有多个 $P$ 时，也可以AC自动机，以上算法都是 $O(n)$ 的，那么后缀数组如何比较好的解决该问题</p><p>首先不难想到， $T$ 的任意一个子串都一定可以对应到唯一一个后缀的前缀，具体的， $T[l, r] \leftrightarrow suf(l)^r$ </p><p>那么考虑构造出 $T$ 的后缀数组，由于 $T$ 的后缀已经被排好了序，可以二分查找每个后缀是否有前缀 $P$ ，具体的，若我们二分到了区间 $[l, r]$ ：</p><ol><li>如果 $P$ 是 $suf(SA[mid])$ 的前缀，说明这就是 $P$ 在 $T$ 中的出现，所有 $lcp(mid, j) \ge len(P)$ 的 $j$ 也是 $P$ 的出现</li><li>如果 $P \le suf(SA(mid))$ ，进入区间 $[l, mid - 1]$ ，否则进入 $[mid + 1, r]$ </li></ol><p>以上算法的时间复杂度为 $O(len(P) \log n)$ ，时间主要消耗在第二步的比较上，可以用 $hei$ 数组优化</p><p>假设到当前为止，获得的最大前缀匹配长度为 $maxlen$ ，其对应的后缀位置为 $SA[pos]$ ，即 $P^{maxlen} = suf(SA[pos])^{maxlen}$ ，对于当前位置 $mid$ ，求出 $len = lcp(mid, pos)$  （这可以ST表 $O(1)$ 求出），分类讨论：</p><ol><li> $len &lt; maxlen$ ，由匹配的最大性可知 $suf(SA[mid])$ 的第 $len + 1$ 个字符一定不同于 $P$ 的第 $len + 1$ 个字符，直接比较这两个字符即可</li><li> $len \ge maxlen$ ，从 $maxlen + 1$ 开始比较 $P$ 和 $suf(SA[mid])$ ，完成后更新 $maxlen$ 和 $pos$ </li><li>当 $maxlen = len(P)$ 时，匹配完成</li></ol><p>以上过程中， $maxlen$ 是不下降的，加上一个二分，在不考虑预处理的情况下，时间复杂度为 $O(len(P) + \log n)$ （然而，就算是用DC3 $O(n)$ 求出后缀数组，ST表预处理还是 $O(n \log n)$ ）</p><p>代码如下：</p><p><a href="https://www.luogu.com.cn/problem/P3808">【模板】AC自动机（简单版）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e6</span> + <span class="number">5</span>, D = <span class="number">30</span>; <span class="comment">//开大点</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> T[N], P[N], s[N];</span><br><span class="line"><span class="keyword">int</span> sa[N], rk[N], hei[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> mn[N][D];</span><br><span class="line"><span class="keyword">int</span> log_2[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prev</span><span class="params">(<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">log_2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">log_2[i] = log_2[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">mn[i][<span class="number">0</span>] = x[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= log_2[n] + <span class="number">1</span>; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; ++i)</span><br><span class="line">mn[i][j] = <span class="built_in">min</span>(mn[i][j - <span class="number">1</span>], mn[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t = log_2[r - l + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(mn[l][t], mn[r - (<span class="number">1</span> &lt;&lt; t) + <span class="number">1</span>][t]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; st;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">(<span class="keyword">int</span> _num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">STC <span class="keyword">int</span> x[N], y[N], c[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">++c[x[i] = T[i]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= _num; ++i)</span><br><span class="line">c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">sa[c[x[i]]--] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>, num; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">y[++num] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (sa[i] &gt; k)</span><br><span class="line">y[++num] = sa[i] - k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _num; ++i)</span><br><span class="line">c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">++c[x[i]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= _num; ++i)</span><br><span class="line">c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">sa[c[x[y[i]]]--] = y[i], y[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line">x[sa[<span class="number">1</span>]] = num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">x[sa[i]] = (y[sa[i]] == y[sa[i - <span class="number">1</span>]] &amp;&amp; y[sa[i] + k] == y[sa[i - <span class="number">1</span>] + k]) ? num : ++num;</span><br><span class="line"><span class="keyword">if</span> (num == n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">_num = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">rk[sa[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_hei</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rk[i] == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (k)</span><br><span class="line">--k;</span><br><span class="line"><span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (i + k &lt;= n &amp;&amp; j + k &lt;= n &amp;&amp; T[i + k] == T[j + k])</span><br><span class="line">++k;</span><br><span class="line">hei[rk[i]] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == y)</span><br><span class="line"><span class="keyword">return</span> n - sa[x] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; y)</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="keyword">return</span> st.<span class="built_in">ask</span>(x + <span class="number">1</span>, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">suf</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> T + x - <span class="number">1</span>; <span class="comment">//减1是为了让下标从1开始</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">2</span>, r = n, m = <span class="built_in">strlen</span>(x + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">1</span>, mxl = <span class="number">0</span>; <span class="comment">//pos初值不能为0,否则ST表会RE</span></span><br><span class="line"><span class="keyword">char</span> *t = <span class="built_in">suf</span>(sa[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">while</span> (mxl &lt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sa[<span class="number">1</span>] + mxl &gt; n || t[mxl + <span class="number">1</span>] != x[mxl + <span class="number">1</span>]) <span class="comment">//为防止越界</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">++mxl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mxl == m)</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">lcp</span>(mid, pos);</span><br><span class="line">t = <span class="built_in">suf</span>(sa[mid]); <span class="comment">//这里一定是sa[mid]不是mid</span></span><br><span class="line"><span class="keyword">if</span> (len &gt;= mxl)</span><br><span class="line">&#123;</span><br><span class="line">len = mxl;</span><br><span class="line">pos = mid;</span><br><span class="line"><span class="keyword">while</span> (len &lt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sa[mid] + len &gt; n || t[len + <span class="number">1</span>] != x[len + <span class="number">1</span>]) <span class="comment">//为防止越界</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">++len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (len == m)</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sa[mid] + len &gt; n || x[len + <span class="number">1</span>] &gt; t[len + <span class="number">1</span>])</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q, ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, cs = <span class="number">0</span>; i &lt;= q; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch &lt; <span class="string">&#x27;a&#x27;</span> || ch &gt; <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">s[++cs] = ch, ch = <span class="built_in">getchar</span>();</span><br><span class="line">s[++cs] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, T + <span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">strlen</span>(T + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">get_sa</span>(<span class="string">&#x27;z&#x27;</span>);</span><br><span class="line"><span class="built_in">get_hei</span>();</span><br><span class="line">st.<span class="built_in">prev</span>(hei);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, cs = <span class="number">1</span>, j; i &lt;= q; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; s[cs] != <span class="string">&#x27;$&#x27;</span>; ++cs, ++j)</span><br><span class="line">P[j] = s[cs];</span><br><span class="line">++cs;</span><br><span class="line">P[j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(P) != <span class="number">-1</span>)</span><br><span class="line">++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 字符串总是让人头疼&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="分治" scheme="https://dyd-true.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="数据结构" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="后缀数组,SA" scheme="https://dyd-true.github.io/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-SA/"/>
    
    <category term="LCP" scheme="https://dyd-true.github.io/tags/LCP/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/20总结</title>
    <link href="https://dyd-true.github.io/2021/12/20/test2021-12-20%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/20/test2021-12-20%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-20T07:52:30.000Z</published>
    <updated>2021-12-24T14:15:53.923Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ed335c3bf68d2a0fa54d6c7c13beac672c0e6ce951cdfbc3e932463d28cf8385"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">D'y'd は、パスワードを入力するように求められます</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">死磕一道题是很危险的……</summary>
    
    
    
    <category term="test" scheme="https://dyd-true.github.io/categories/test/"/>
    
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="线段树" scheme="https://dyd-true.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="网络流" scheme="https://dyd-true.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="莫比乌斯反演" scheme="https://dyd-true.github.io/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
    <category term="二分" scheme="https://dyd-true.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="杜教筛" scheme="https://dyd-true.github.io/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
    <category term="优先队列" scheme="https://dyd-true.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>码风</title>
    <link href="https://dyd-true.github.io/2021/12/19/%E7%A0%81%E9%A3%8E/"/>
    <id>https://dyd-true.github.io/2021/12/19/%E7%A0%81%E9%A3%8E/</id>
    <published>2021-12-19T13:32:03.000Z</published>
    <updated>2021-12-24T14:20:04.598Z</updated>
    
    <content type="html"><![CDATA[<p> 记录一下自己的码风</p><span id="more"></span><h1 id="马蜂窝"><a href="#马蜂窝" class="headerlink" title="马蜂窝"></a>马蜂窝</h1><h2 id="远古时期"><a href="#远古时期" class="headerlink" title="远古时期"></a>远古时期</h2><p>初学OI</p><ul><li>热爱万能头</li><li>cin、cout</li><li>懒得打空格</li><li>不爱const</li><li>不会STL</li><li>不用define</li><li>括号不换行，不删能删的括号(后来又删了)</li><li>爱用char不用string</li><li>空函数也要打返回值</li></ul><p>没什么意义的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100000005</span>],c,d;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">char</span> e[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">100</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(x+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;a[<span class="number">2</span>]&gt;&gt;b[<span class="number">100</span>];</span><br><span class="line">cout&lt;&lt;c+d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[i<span class="number">-1</span>])&#123;</span><br><span class="line">b[j]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中世纪"><a href="#中世纪" class="headerlink" title="中世纪"></a>中世纪</h2><ul><li>有点爱压行</li><li>还是不空格</li><li>空函数还是要返回</li><li>会用一点点注释了</li><li>爱用const</li><li>爱用typedef</li><li>会用inline和read等了</li><li>不用万能头了（听说慢）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">2e5</span>+<span class="number">5</span>,N=<span class="number">5005</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fa[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="comment">//x-y权值为w </span></span><br><span class="line"><span class="keyword">int</span> x,y,w;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">&#x27;9&#x27;</span>||ch&lt;<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        a*=<span class="number">10</span>;</span><br><span class="line">        a+=ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>(); <span class="comment">//一定的压行情绪</span></span><br></pre></td></tr></table></figure><h2 id="近现代"><a href="#近现代" class="headerlink" title="近现代"></a>近现代</h2><ul><li>用VScode的自动格式化（懒得手打空格）</li><li>会一些define了</li><li>long long从 $ll$ 变成 $LL$ </li><li>会用STL了</li><li>有点爱打注释</li><li>偶尔万能头</li><li>代码之间喜欢用空格把不同功能的区别开（放弃压行了）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n, m, len;</span><br><span class="line"><span class="keyword">int</span> w[N], cnt[N];</span><br><span class="line">LL ans[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Question</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, l, r;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> id(k) q[k].id</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(k) q[k].l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(k) q[k].r</span></span><br><span class="line">&#125; q[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; nums; <span class="comment">//离散化用</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Question x, Question y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">get</span>(x.l), j = <span class="built_in">get</span>(y.l);</span><br><span class="line">    <span class="keyword">if</span> (i != j)</span><br><span class="line">        <span class="keyword">return</span> i &lt; j;</span><br><span class="line">    <span class="keyword">return</span> x.r &lt; y.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, LL &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[x]++;</span><br><span class="line">    res = <span class="built_in">max</span>(res, (LL)cnt[x] * nums[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    len = <span class="built_in">sqrt</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//离散化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        w[i] = <span class="built_in">read</span>(), nums.<span class="built_in">push_back</span>(w[i]);</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        w[i] = <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), w[i]) - nums.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="built_in">read</span>(), b = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">id</span>(i) = i, <span class="built_in">l</span>(i) = a, <span class="built_in">r</span>(i) = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q, q + m, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; m;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = x;</span><br><span class="line">        <span class="keyword">while</span> (y &lt; m &amp;&amp; <span class="built_in">get</span>(<span class="built_in">l</span>(y)) == <span class="built_in">get</span>(<span class="built_in">l</span>(x))) <span class="comment">//完成后x~y就是同块的</span></span><br><span class="line">            ++y;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="built_in">get</span>(<span class="built_in">l</span>(x)) * len + len - <span class="number">1</span>; <span class="comment">//本块右端点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//暴力求块内</span></span><br><span class="line">        <span class="keyword">while</span> (x &lt; y &amp;&amp; <span class="built_in">r</span>(x) &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            LL res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="built_in">l</span>(x); k &lt;= <span class="built_in">r</span>(x); ++k)</span><br><span class="line">                <span class="built_in">add</span>(w[k], res);</span><br><span class="line">            ans[<span class="built_in">id</span>(x)] = res;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="built_in">l</span>(x); k &lt;= <span class="built_in">r</span>(x); ++k) <span class="comment">//回复</span></span><br><span class="line">                cnt[w[k]]--;</span><br><span class="line"></span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求跨块</span></span><br><span class="line">        LL res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = right, i = right + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt; y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; <span class="built_in">r</span>(x)) <span class="comment">//右指针只增不删</span></span><br><span class="line">                <span class="built_in">add</span>(w[++j], res);</span><br><span class="line"></span><br><span class="line">            LL b_res = res; <span class="comment">//存档</span></span><br><span class="line">            <span class="keyword">while</span> (i &gt; <span class="built_in">l</span>(x))</span><br><span class="line">                <span class="built_in">add</span>(w[--i], res);</span><br><span class="line"></span><br><span class="line">            ans[<span class="built_in">id</span>(x)] = res;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//回复</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; right + <span class="number">1</span>)</span><br><span class="line">                cnt[w[i++]]--;</span><br><span class="line">            res = b_res;</span><br><span class="line"></span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt); <span class="comment">//换块,清空</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="现代"><a href="#现代" class="headerlink" title="现代"></a>现代</h2><ul><li>因为太麻烦，放弃格式化了（会到不打空格的时代）</li><li>超级爱define，不喜欢typedef</li><li>会去掉所有能去的回车和括号</li><li>奇妙的取名（有点爱用下划线）</li><li>喜欢结构体</li></ul><p>猪国杀为例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10</span>+<span class="number">5</span>,M=<span class="number">2000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,num_FP=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> deck[M];</span><br><span class="line"><span class="keyword">int</span> idx=<span class="number">1</span>; <span class="comment">//牌堆</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Player</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> job[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">char</span> card[M];</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    <span class="keyword">int</span> hp;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> Z;</span><br><span class="line">    <span class="keyword">char</span> think_job[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">bool</span> dead;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> job(i) pig[i].job </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> card(i,j) pig[i].card[j]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cnt(i) pig[i].cnt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> hp(i) pig[i].hp  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(i) pig[i].l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(i) pig[i].r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Z(i) pig[i].Z</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dead(i) pig[i].dead</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tjob(i) pig[i].think_job</span></span><br><span class="line">&#125;pig[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getcard</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> num)</span></span>&#123; <span class="comment">//x抽牌</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</span><br><span class="line">        <span class="built_in">cnt</span>(x)++;</span><br><span class="line">        <span class="built_in">card</span>(x,<span class="built_in">cnt</span>(x))=deck[idx];</span><br><span class="line">        idx++;</span><br><span class="line">        <span class="keyword">if</span>(idx&gt;m) idx=m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tiao</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">bool</span> f)</span></span>&#123; <span class="comment">//x対y表敌意(1)/献殷勤(0)</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(x),<span class="string">&quot;MP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(x),<span class="string">&quot;ZP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(x),<span class="string">&quot;FP&quot;</span>)) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(f)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">0</span>]=<span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;ZP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;MP&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">0</span>]=<span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">0</span>]=<span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;ZP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;MP&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">0</span>]=<span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dead</span>(i))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;DEAD&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="built_in">cnt</span>(i);j&gt;=<span class="number">1</span>;--j)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(i,j)!=<span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">                    k=j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;k;++j)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(i,j)!=<span class="string">&#x27;U&#x27;</span>) cout&lt;&lt;<span class="built_in">card</span>(i,j)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(k!=<span class="number">0</span>) cout&lt;&lt;<span class="built_in">card</span>(i,k);</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//有一个x使用的无懈是否被无懈</span></span><br><span class="line">    <span class="keyword">int</span> z=<span class="built_in">r</span>(x);</span><br><span class="line">    <span class="keyword">bool</span> can=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(z!=x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(x),<span class="string">&quot;MP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(z);++i)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(z,i)==<span class="string">&#x27;J&#x27;</span>&amp;&amp;!can)&#123;</span><br><span class="line">                    <span class="built_in">tiao</span>(z,x,<span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">card</span>(z,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">dfs</span>(z)) can=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(x),<span class="string">&quot;ZP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(z);++i)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(z,i)==<span class="string">&#x27;J&#x27;</span>&amp;&amp;!can)&#123;</span><br><span class="line">                    <span class="built_in">tiao</span>(z,x,<span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">card</span>(z,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">dfs</span>(z)) can=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(x),<span class="string">&quot;FP&quot;</span>)&amp;&amp;(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;MP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;ZP&quot;</span>)))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(z);++i)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(z,i)==<span class="string">&#x27;J&#x27;</span>&amp;&amp;!can)&#123;</span><br><span class="line">                    <span class="built_in">tiao</span>(z,x,<span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">card</span>(z,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">dfs</span>(z)) can=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(can) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        z=<span class="built_in">r</span>(z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">invincible</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//判定x対y的pai(F/J)是否被无懈</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;UP&quot;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> z=x;</span><br><span class="line">    <span class="keyword">bool</span> can=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> f=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(f||z!=x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;MP&quot;</span>)&amp;&amp;(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;ZP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;MP&quot;</span>)))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(z);++i)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(z,i)==<span class="string">&#x27;J&#x27;</span>&amp;&amp;!can)&#123;</span><br><span class="line">                    <span class="built_in">tiao</span>(z,y,<span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">card</span>(z,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">dfs</span>(z)) can=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;ZP&quot;</span>)&amp;&amp;(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;ZP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;MP&quot;</span>)))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(z);++i)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(z,i)==<span class="string">&#x27;J&#x27;</span>&amp;&amp;!can)&#123;</span><br><span class="line">                    <span class="built_in">tiao</span>(z,y,<span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">card</span>(z,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">dfs</span>(z)) can=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;FP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(z);++i)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(z,i)==<span class="string">&#x27;J&#x27;</span>&amp;&amp;!can)&#123;</span><br><span class="line">                    <span class="built_in">tiao</span>(z,y,<span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">card</span>(z,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">dfs</span>(z)) can=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(can) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(z==x) f=<span class="literal">false</span>;</span><br><span class="line">        z=<span class="built_in">r</span>(z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">die</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//判断x死亡,y杀的</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">hp</span>(x)&gt;<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(x);++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;P&#x27;</span>&amp;&amp;<span class="built_in">hp</span>(x)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">hp</span>(x)++;</span><br><span class="line">            <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">hp</span>(x)&gt;<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">r</span>(<span class="built_in">l</span>(x))=<span class="built_in">r</span>(x);</span><br><span class="line">    <span class="built_in">l</span>(<span class="built_in">r</span>(x))=<span class="built_in">l</span>(x);</span><br><span class="line">    <span class="built_in">dead</span>(x)=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">        num_FP--;</span><br><span class="line">        <span class="keyword">if</span>(num_FP&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;MP&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="built_in">end</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">getcard</span>(y,<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;ZP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(y),<span class="string">&quot;MP&quot;</span>))&#123;</span><br><span class="line">        <span class="built_in">Z</span>(y)=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cnt</span>(y)=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;MP&quot;</span>))&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;FP&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kill</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//x杀y</span></span><br><span class="line">    <span class="keyword">bool</span> d=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(y);++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(y,i)==<span class="string">&#x27;D&#x27;</span>&amp;&amp;!d)&#123;</span><br><span class="line">            d=<span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">card</span>(y,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(!d)&#123;</span><br><span class="line">        <span class="built_in">hp</span>(y)--;</span><br><span class="line">        <span class="built_in">die</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">tiao</span>(x,y,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">duel</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//x対y决斗</span></span><br><span class="line">    <span class="built_in">tiao</span>(x,y,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">invincible</span>(x,y)) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;MP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(y),<span class="string">&quot;ZP&quot;</span>))&#123;</span><br><span class="line">        <span class="built_in">hp</span>(y)--;</span><br><span class="line">        <span class="built_in">die</span>(y,x);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> xk=<span class="number">0</span>,yk=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(x);++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;K&#x27;</span>) xk++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(y);++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(y,i)==<span class="string">&#x27;K&#x27;</span>) yk++;</span><br><span class="line">    <span class="keyword">if</span>(xk&gt;=yk)&#123;</span><br><span class="line">        <span class="built_in">hp</span>(y)--;</span><br><span class="line">        xk=yk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(xk&lt;yk)&#123;</span><br><span class="line">        <span class="built_in">hp</span>(x)--;</span><br><span class="line">        yk=xk+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(x);++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;K&#x27;</span>&amp;&amp;xk)&#123;</span><br><span class="line">            xk--;</span><br><span class="line">            <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(y);++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(y,i)==<span class="string">&#x27;K&#x27;</span>&amp;&amp;yk)&#123;</span><br><span class="line">            yk--;</span><br><span class="line">            <span class="built_in">card</span>(y,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">die</span>(y,x);</span><br><span class="line">    <span class="built_in">die</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">barbarian</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=<span class="built_in">r</span>(x);</span><br><span class="line">    <span class="keyword">while</span>(y!=x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">invincible</span>(x,y))&#123;</span><br><span class="line">            y=<span class="built_in">r</span>(y);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> k=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(y);++i)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">card</span>(y,i)==<span class="string">&#x27;K&#x27;</span>&amp;&amp;!k)&#123;</span><br><span class="line">                k=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">card</span>(y,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(!k)&#123;</span><br><span class="line">            <span class="built_in">hp</span>(y)--;</span><br><span class="line">            <span class="built_in">die</span>(y,x);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(y),<span class="string">&quot;MP&quot;</span>)&amp;&amp;<span class="built_in">tjob</span>(x)[<span class="number">0</span>]==<span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">tjob</span>(x)[<span class="number">0</span>]=<span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                <span class="built_in">tjob</span>(x)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        y=<span class="built_in">r</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arrows</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=<span class="built_in">r</span>(x);</span><br><span class="line">    <span class="keyword">while</span>(y!=x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">invincible</span>(x,y))&#123;</span><br><span class="line">            y=<span class="built_in">r</span>(y);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> d=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(y);++i)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">card</span>(y,i)==<span class="string">&#x27;D&#x27;</span>&amp;&amp;!d)&#123;</span><br><span class="line">                d=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">card</span>(y,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(!d)&#123;</span><br><span class="line">            <span class="built_in">hp</span>(y)--;</span><br><span class="line">            <span class="built_in">die</span>(y,x);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(y),<span class="string">&quot;MP&quot;</span>)&amp;&amp;<span class="built_in">tjob</span>(x)[<span class="number">0</span>]==<span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">tjob</span>(x)[<span class="number">0</span>]=<span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                <span class="built_in">tjob</span>(x)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        y=<span class="built_in">r</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">round</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//x的回合</span></span><br><span class="line">    <span class="built_in">getcard</span>(x,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">bool</span> k=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(x);++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">Z</span>(x)) <span class="built_in">Z</span>(x)=i;</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;P&#x27;</span>&amp;&amp;<span class="built_in">hp</span>(x)&lt;<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">            <span class="built_in">hp</span>(x)++;</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;K&#x27;</span>&amp;&amp;(!k||<span class="built_in">Z</span>(x)))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;MP&quot;</span>)&amp;&amp;(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(<span class="built_in">r</span>(x)),<span class="string">&quot;LP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(<span class="built_in">r</span>(x)),<span class="string">&quot;FP&quot;</span>)))&#123;</span><br><span class="line">                <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                <span class="built_in">kill</span>(x,<span class="built_in">r</span>(x));</span><br><span class="line">                k=<span class="literal">true</span>;</span><br><span class="line">                i=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;ZP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(<span class="built_in">r</span>(x)),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">                <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                <span class="built_in">kill</span>(x,<span class="built_in">r</span>(x));</span><br><span class="line">                k=<span class="literal">true</span>;</span><br><span class="line">                i=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;FP&quot;</span>)&amp;&amp;(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(<span class="built_in">r</span>(x)),<span class="string">&quot;MP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(<span class="built_in">r</span>(x)),<span class="string">&quot;ZP&quot;</span>)))&#123;</span><br><span class="line">                <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                <span class="built_in">kill</span>(x,<span class="built_in">r</span>(x));</span><br><span class="line">                k=<span class="literal">true</span>;</span><br><span class="line">                i=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;F&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=<span class="built_in">r</span>(x);</span><br><span class="line">            <span class="keyword">while</span>(y!=x)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;MP&quot;</span>)&amp;&amp;(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;LP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;FP&quot;</span>))) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;ZP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;FP&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;FP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;MP&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                y=<span class="built_in">r</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                <span class="built_in">duel</span>(x,y);</span><br><span class="line">                i=<span class="number">0</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;N&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">            <span class="built_in">barbarian</span>(x);</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">            <span class="built_in">arrows</span>(x);</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dead</span>(x)) <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;pig.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;myans.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        cin&gt;&gt;<span class="built_in">job</span>(i);</span><br><span class="line">        <span class="built_in">tjob</span>(i)[<span class="number">0</span>]=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">        <span class="built_in">tjob</span>(i)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;++j)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch;</span><br><span class="line">            cin&gt;&gt;ch;</span><br><span class="line">            <span class="built_in">card</span>(i,j)=ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cnt</span>(i)=<span class="number">4</span>;</span><br><span class="line">        <span class="built_in">hp</span>(i)=<span class="number">4</span>;</span><br><span class="line">        <span class="built_in">l</span>(i)=i<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">r</span>(i)=i+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Z</span>(i)=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dead</span>(i)=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(i),<span class="string">&quot;FP&quot;</span>)) num_FP++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">l</span>(<span class="number">1</span>)=n;</span><br><span class="line">    <span class="built_in">r</span>(n)=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">tjob</span>(<span class="number">1</span>)[<span class="number">0</span>]=<span class="string">&#x27;M&#x27;</span>;</span><br><span class="line">    <span class="built_in">tjob</span>(<span class="number">1</span>)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        cin&gt;&gt;deck[i];</span><br><span class="line">    <span class="keyword">int</span> now_play=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">233</span>)&#123;</span><br><span class="line">        <span class="built_in">round</span>(now_play);</span><br><span class="line">        now_play=<span class="built_in">r</span>(now_play);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2021-12-19"><a href="#2021-12-19" class="headerlink" title="2021/12/19"></a>2021/12/19</h2><ul><li>改成标准码风了（还是决定加空格）</li><li>超爱define偷懒</li><li>if、for后必回车，else也会回车另起一行</li><li>偶尔会用namespace</li><li>大概的取名思路是变量、函数一般小写，但常量一般首字母大写；结构体每个单词首字母大写；define的关键字取首字母大写缩写，但define的函数仍然小写</li><li>爱用++x，不用x++（除非无可奈何）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="comment">//用什么STL就再加什么头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DB double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI vector<span class="meta-string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VIT vector<span class="meta-string">&lt;int&gt;</span>::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PDI pair<span class="meta-string">&lt;double, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRG default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID uniform_int_distribution</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back((x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> si(x) a[(x)].size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(x, y, z) for (int (x) = (y), __END__ = (z); (x) &lt;= __END__; ++(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x, y, z) for (int (x) = (y), __END__ = (z); (x) &gt;= __END__; --(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> peri(x, y, z, ch) for (int (x) = (y), __END__ = (z); (x) &lt;= __END__; (ch))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> par(x, y) param(UID<span class="meta-string">&lt;int&gt;</span>::param_type&#123;(x), (y)&#125;);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">VI num;</span><br><span class="line"><span class="function">DRG <span class="title">e</span><span class="params">(<span class="number">114514</span>)</span></span>;</span><br><span class="line">UID u;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">gh</span>(), t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        t |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">        x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">all</span>(num));</span><br><span class="line">    u.<span class="built_in">par</span>(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">per</span> (i, <span class="number">1</span>, <span class="number">10</span>) <span class="comment">//这里还是会在per后加空格</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">u</span>(e)); <span class="comment">//一般用scanf和printf,有时候打read和write</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>upd：2021/12/22，for还是不define了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 记录一下自己的码风&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://dyd-true.github.io/categories/others/"/>
    
    
    <category term="其它" scheme="https://dyd-true.github.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>左偏树</title>
    <link href="https://dyd-true.github.io/2021/12/19/%E5%B7%A6%E5%81%8F%E6%A0%91/"/>
    <id>https://dyd-true.github.io/2021/12/19/%E5%B7%A6%E5%81%8F%E6%A0%91/</id>
    <published>2021-12-19T06:20:48.000Z</published>
    <updated>2021-12-24T14:25:51.294Z</updated>
    
    <content type="html"><![CDATA[<p> 考完学波数据结构</p><span id="more"></span><h1 id="左偏树"><a href="#左偏树" class="headerlink" title="左偏树"></a>左偏树</h1><p>左偏树是<strong>可并堆</strong>的一种，可以在  $O(\log n)$ 的时间内实现堆的合并，它是通过额外维护一个<strong>距离</strong>并保证<strong>性质</strong>来实现的（有点类似于点分治找重心）</p><h2 id="定义和性质"><a href="#定义和性质" class="headerlink" title="定义和性质"></a>定义和性质</h2><ul><li>距离：一个点的距离定义为一个点<strong>到离它最近的空节点的距离</strong></li><li>性质：每个点的<strong>左儿子的距离一定大于等于其右儿子的距离</strong></li></ul><p>以上就是左偏树额外维护以保证时间复杂度的信息，不难发现，这棵二叉树（堆）的<strong>每个节点的距离一定于右儿子的距离加1</strong></p><p><strong>定理</strong>：根节点的距离 $dis_{root} \le \log (n + 1)$ ，证明如下：</p><p>设 $f(k)$ 表示 $dis_{root} = k$ 的子树至少包含多少点，易得， $f(1) = 1 \le 2^1 - 1$ ，若 $f(k - 1) \le 2^{k - 1} - 1$ ，则对于 $dis_{root} = k$ 的子树，右儿子的距离为 $k - 1$ ，即右子树最少有 $f(k - 1)$ 个点，而左儿子的距离一定大于等于其右儿子的距离，故左子树最少也有 $f(k - 1)$ 个点，则 $f(k) = f(k - 1) + f(k - 1) + 1$ ，即 $f(k) \le 2^k - 1$ ，由数学归纳法原理， $f(k) \le 2^k - 1$ ，则 $f(\log (n + 1)) \le 2^{\log (n + 1)} - 1 = n$ ，可得 $dis_{root} \le \log (n + 1)$ </p><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>有了以上定义和性质，我们来看看如何合并左偏树，假设我们合并的两个左偏树的根分别为 $a, b$ ，进行如下操作（假设是小根堆）：</p><ol><li>若 $b &lt; a$ ， $swap(a, b)$ </li><li>将 $a$ 作为合并后的根节点，并将 $a$ 的左子树作为合并后的左子树</li><li>递归合并 $a$ 的右子树和 $b$ ，将合并后的树作为右子树</li><li>若右子树的距离大于左子树，交换两个子树</li></ol><p>可以发现，每一次递归，两个根节点必有一个会变成自己的右子树，即它的距离会减1，当根的距离为1时它就没有右子树了，故时间复杂度为  $O(dis_a - 1 + dis_b - 1) = O(\log (n + 1)) = O(\log n)$ </p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LeftHeap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r, v, dis;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(x) lh[(x)].l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(x) lh[(x)].r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> v(x) lh[(x)].v</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dis(x) lh[(x)].dis</span></span><br><span class="line">&#125; lh[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y)</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">v</span>(x) &gt; <span class="built_in">v</span>(y))</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="built_in">r</span>(x) = <span class="built_in">merge</span>(<span class="built_in">r</span>(x), y);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dis</span>(<span class="built_in">r</span>(x)) &gt; <span class="built_in">dis</span>(<span class="built_in">l</span>(x)))</span><br><span class="line"><span class="built_in">swap</span>(<span class="built_in">r</span>(x), <span class="built_in">l</span>(x));</span><br><span class="line"><span class="built_in">dis</span>(x) = <span class="built_in">dis</span>(<span class="built_in">r</span>(x)) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>左偏树的难点主要在于应用</p><p><a href="https://www.luogu.com.cn/problem/P4331">数字序列</a></p><h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><p>先做一个变化：令 $a’_i = a_i - i, b’_i = b_i - i$ ，这样，最小值不会改变，且任意一组解都有唯一的  $\{b’<em>i\}$ 与之对应，而变化的目的是 $b_i &lt; b</em>{i + 1},即b’<em>i + i &lt; b’</em>{i + 1} + i + 1$ ，故 $b’<em>i \le b’</em>{i + 1}$ ，我们把 $&lt;$ 变成了 $\le$ ，为了方便，以下不会再用到原数组，所有的 $\{b_i\}$ 都指的是 $\{b’_i\}$ </p><h3 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h3><p>考虑一个子问题：若有 $n$ 个数 $\{a_i\}$ ，求一个数 $b$ ，使得 $\sum_{i = 1}^n \mid a_i - x \mid$ 最小，即在保证 $b_1 = b_2 = … = b_n = x$ 的情况下求解原问题，明显，取 $\{a_i\}$ 的<strong>中位数</strong>时最小</p><p>那么再考虑，如果有 $n$ 个数 $\{a_i\}$ ，其中对于 $\sum_{i = 1}^m \mid a_i - b_i \mid$ ，其取最小值时 $b_{1 \sim m} = u$ ，对于 $\sum_{i = m + 1}^n \mid a_i - b_i \mid$ ，其取最小值时 $b_{m + 1 \sim n} = v$ ，那么该如何合并 $a_{1 \sim m}$ 和 $a_{m + 1 \sim n}$ 呢？分两类讨论：</p><ol><li>若 $u \le v$ ，即满足 $\{b_i\}$ 的单调性，则两段分别保留自己的 $b$ </li><li>若 $u &gt; v$ ，即不满足单调性，则使 $b_{1 \sim n}$ 为 $a_{1 \sim n}$ 的中位数 </li></ol><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><p>第一类正确性很好理解，下面证明第二类做法的正确性（即取中位数后 $\sum_{i = 1}^n \mid a_i - b_i \mid$ 最小）：</p><p>设对于 $a_{1 \sim n}$ 的一组最优解为 $\{b_i\} = \{x_i\}$ </p><p>若 $x_m &gt; u$ ，则由单调性可得 $x_{m + 1 \sim n} &gt; u$ ，由于 $b_{1 \sim m} = u$ 是对于 $a_{1 \sim m}$ 的最优解，所以用 $u$ 替换 $x_{1 \sim m}$ 仍然<strong>满足单调性且不会使答案变差</strong>，故只需讨论 $x_m \le u$ 的情况，同理，也只需讨论 $x_{m + 1} \ge v$ 的情况，因此只需考虑 $x_m \le u$ 且 $x_{m + 1} \ge v$ 的情况</p><h3 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h3><p>下面证明一个<strong>引理</strong>：</p><p><strong>若对于 $a_{1 \sim n}$ 的最优解为 $\{b_i\} = k$ ，则对于任意一组解（不一定最优） $\{b_i\} = \{x_i\}$ 满足 $x_1 &gt; k$ （因为单调性，其实就是 $\forall i \in [1, n], x_i &gt; k$ ），将其改为 $\{b_i\} = t(k \le t \le x_1)$ 一定不会比 $\{b_i\} = \{x_i\}$ 差</strong></p><p><img src="https://s2.loli.net/2021/12/19/Pf8RZYa1NjA6lGq.png" alt="引理1"></p><p>如图，将解 $\{b_i\} = \{x_i\}$ 替换成 $\{b_i\} = t$ 答案不会变差</p><p>先证明：<strong>将解变为 $\{b_i\} = x_1$  答案不会变差</strong></p><p>考虑将第二段及以后的 $x$ 整体下移 $\Delta$ 个单位使得第二段平移到于第一段水平的位置，如图：</p><p><img src="https://s2.loli.net/2021/12/24/wC8FrZh2pBdnf6a.png" alt="平移"></p><p>考虑被平移部分的 $a$ 的中位数，设其为 $k’$ ，若 $k’ &gt; k$ 那么对于被平移部分，取 $k’$ 显然比取 $k$ 更优，则与 $k$ 的“最优”性质矛盾，所以必有 $k’ \le k$ （此时因为单调性不能让 $k$ 等于 $k’$ ），因此被平移部分至少有一半的 $a$ 是小于等于 $k$ 的，我们将对应的 $x$ 下移，会使这些所有数的答案分别变优 $\Delta$ ，而另外 $a$ 大于 $k$ 的部分答案会变差 $\Delta$ 但变优的比变差的多，所以总的答案不会变差；以此类推，将每一段都下移，解不会变差</p><p>然后我们来看原命题，就变得很简单了，由 $k$ 的最优性， $\{b_i\} = k$ 一定比 $\{b_i\} = x_1$ 优，而 $x_1$ 越靠近 $k$ 就越优（准确的说是不会变差），所以取在 $x_1, k$ 间的任意值 $t$ 替代 $x_1$ 答案不会变差</p><p>需要注意的是，当 $k$ 比 $\{x_i\}$ 都大时，结论任成立，即上图的情况反过来也行</p><h3 id="正确性2"><a href="#正确性2" class="headerlink" title="正确性2"></a>正确性2</h3><p>回到刚从证明正确性</p><p>刚才已经说过，只需考虑 $x_m \le u$ 且 $x_{m + 1} \ge v$ 的情况，即如图：</p><p><img src="https://s2.loli.net/2021/12/24/ECdGHrbvgMaSPTw.png" alt="2"></p><p> $u, v$ 以 $m$ 为界，分别时前一半的最优解和后一半的最优解，红色部分是一组整体的最优解，由刚才的引理，红色部分可以替换为绿色部分，解不会变差，也就是说：<strong>存在一组全段都相等的最优解</strong>，明显，此时应该是<strong>整段的中位数</strong></p><p>于是转化的做法的正确性成立</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>下面考虑如何用左偏树实现该过程</p><p>类似动态维护中位数的思想，我们用左偏树<strong>维护较小一半数，其最大值就是中位数</strong></p><p>设当前段中位数为 $u$ ，新段中位数为 $v$ ，合并完后中位数为 $w$ </p><p>每次需要合并的情况一定是<strong>新段的中位数小于当前中位数，即 $v &lt; u$ 时</strong>，则易证合并完毕后<strong>新的中位数一定在原来两个中位数之间，即 $v \le w \le u$ <strong>，此时如果新的中位数是新段中的某个数，由于新段的左偏树只维护了小于 $v$ 的数，所以我们就找不到 $w$ 了，换句话说，</strong>在没有限制的情况下，直接用左偏树维护中位数是不行的</strong></p><p>但是，这道题还有一个特殊性质：<strong>每次新加的一段只有一个数</strong>（当然这个数就是中位数），换句话说，如果 $w$ 是在新加入的一段中，那么 $w$ 只可能等于 $v$ ，应为新段没有别的数了</p><p>但是又有一个问题：如果<strong>在某次插入完后，中位数变小了，导致不满足单调性</strong>（换句话说，变得比前一段小了），我们必须<strong>合并这个刚完成插入的段和前一段</strong>，此时这个段不是只有一个数啊</p><p>同上设原中位数为 $u$ ，新中位数为 $w$ ，而这一段的前一段中位数为 $k$ ，显然有 $w &lt; k &lt; u$ </p><p>我们考虑到，这一段插入了一个新的点，<strong>中位数只会变化一个位置</strong>，换句话说，<strong>在这一段上 $w$ 和 $u$ 之间是没有数的</strong>（ $k$ 在前一段上），而 $k &lt; u$ ，故在这一段上， $w, k$ 之间也是没有数的，所以这一段和前一段合并后的中位数要么是 $w$ ，要么在前一段上，不会出现在这一段上且大于 $w$ 的情况</p><p>于是可以用左偏树维护较小一半数来合并（注意维护较大的一半是不行的，因为合并后中位数会变小）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LeftHeap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r, v, dis;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(x) lh[(x)].l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(x) lh[(x)].r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> v(x) lh[(x)].v</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dis(x) lh[(x)].dis</span></span><br><span class="line">&#125; lh[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//终点,根,大小</span></span><br><span class="line"><span class="keyword">int</span> ed, rt, si;</span><br><span class="line">&#125; stk[N];</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x || !y)</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">v</span>(x) &lt; <span class="built_in">v</span>(y))</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="built_in">r</span>(x) = <span class="built_in">merge</span>(<span class="built_in">r</span>(x), y);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dis</span>(<span class="built_in">r</span>(x)) &gt; <span class="built_in">dis</span>(<span class="built_in">l</span>(x)))</span><br><span class="line"><span class="built_in">swap</span>(<span class="built_in">r</span>(x), <span class="built_in">l</span>(x));</span><br><span class="line"><span class="built_in">dis</span>(x) = <span class="built_in">dis</span>(<span class="built_in">r</span>(x)) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;<span class="built_in">v</span>(i));</span><br><span class="line"><span class="built_in">v</span>(i) -= i; <span class="comment">//转化为非严格</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">Line t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">t = (Line)&#123;i, i, <span class="number">1</span>&#125;; <span class="comment">//只有一个的当前点</span></span><br><span class="line"><span class="built_in">dis</span>(i) = <span class="number">1</span>; <span class="comment">//当前点构成一棵左偏树</span></span><br><span class="line"><span class="keyword">while</span> (top &amp;&amp; <span class="built_in">v</span>(t.rt) &lt; <span class="built_in">v</span>(stk[top].rt)) <span class="comment">//小于的情况</span></span><br><span class="line">&#123;</span><br><span class="line">t.rt = <span class="built_in">merge</span>(t.rt, stk[top].rt);</span><br><span class="line"><span class="keyword">if</span> (t.si &amp; stk[top].si &amp; <span class="number">1</span>) <span class="comment">//如果两个区间都是奇数,合并后要弹出一个数</span></span><br><span class="line">t.rt = <span class="built_in">merge</span>(<span class="built_in">l</span>(t.rt), <span class="built_in">r</span>(t.rt));</span><br><span class="line">t.si += stk[top].si;</span><br><span class="line">--top;</span><br><span class="line">&#125;</span><br><span class="line">stk[++top] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= top; ++i)</span><br><span class="line"><span class="keyword">while</span> (j &lt; stk[i].ed)</span><br><span class="line">ans[++j] = <span class="built_in">v</span>(stk[i].rt);</span><br><span class="line">LL as = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">as += <span class="built_in">abs</span>(<span class="built_in">v</span>(i) - ans[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, as);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i] + i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 考完学波数据结构&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数据结构" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="堆" scheme="https://dyd-true.github.io/tags/%E5%A0%86/"/>
    
    <category term="左偏树" scheme="https://dyd-true.github.io/tags/%E5%B7%A6%E5%81%8F%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/19总结</title>
    <link href="https://dyd-true.github.io/2021/12/19/test2021-12-19%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/19/test2021-12-19%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-19T06:08:57.000Z</published>
    <updated>2021-12-24T14:14:37.883Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ca7303d601583827fbe37db72b05acac9cd6684eeb7d7663a85d99a869647563"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">D'y'd は、パスワードを入力するように求められます</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">感觉我最近好躺啊，主要是whk月考完了（一语双关）</summary>
    
    
    
    <category term="test" scheme="https://dyd-true.github.io/categories/test/"/>
    
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="随机数" scheme="https://dyd-true.github.io/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
    <category term="贪心" scheme="https://dyd-true.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="记忆化搜索" scheme="https://dyd-true.github.io/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Dancing Links</title>
    <link href="https://dyd-true.github.io/2021/12/16/Dancing-Links/"/>
    <id>https://dyd-true.github.io/2021/12/16/Dancing-Links/</id>
    <published>2021-12-16T10:51:33.000Z</published>
    <updated>2021-12-24T13:59:22.875Z</updated>
    
    <content type="html"><![CDATA[<p> 跳舞表、舞蹈链（<del>神一般的翻译</del>）</p><span id="more"></span><h1 id="Dancing-Links"><a href="#Dancing-Links" class="headerlink" title="Dancing Links"></a>Dancing Links</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Dancing Links（DLX）一般被用来解决一类<strong>“精确覆盖问题”</strong>：</p><p>给定一个  $n * m$ 的01矩阵，求最少要选出多少行，使得每一列<strong>恰好</strong>有一个1，如图，最少选两行（红色）：</p><p><img src="https://s2.loli.net/2021/12/16/s8Ka6MjmNoflAdY.png" alt="精确覆盖"></p><p>这是一个NPC问题，也就意味着我们<strong>只能暴力</strong>，但如何更聪明的暴力呢？</p><h2 id="X算法"><a href="#X算法" class="headerlink" title="X算法"></a>X算法</h2><p>解决以上问题的暴力算法中，比较优秀的是<strong>二进制压缩</strong>和<strong>X算法</strong>，这里主要介绍X算法：</p><p>看到如下01矩阵：</p><p><img src="https://s2.loli.net/2021/12/16/E3AVZIfUHBYMinz.png" alt="1"></p><p>我们先找到<strong>还未满足的、且包含1最少的一列（有多个就随便取一个）</strong>，这样可以减少枚举（这个贪心的正确性显然），如图中红色的5列都满足条件，不妨取第一列</p><p>然后我们取第一列的两个1中任意一个所在行（蓝色），由于要求<strong>恰好</strong>有一个1，所以橘色行一定不可取，而绿色的列已经被满足了</p><p><img src="https://s2.loli.net/2021/12/16/SMG7CzQPv62heTb.png" alt="2"></p><p>显然被标记（蓝、橘、绿）部分已经没有意义了，我们删去它们，得到更小的矩阵</p><p><img src="https://s2.loli.net/2021/12/16/A3YHMKmGJOtq9h1.png" alt="4"></p><p>然后再选，这次假设我们选了现在的第一行，第二行也会被删掉，得到一个<strong>空矩阵</strong>，而得到空矩阵的这一步操作所删去的行<strong>并非全部为1</strong>，所以这不是一种合法的方案（如选则现在的第一行，现在的第一列就没有1，不符合要求）</p><p>怎么办？<strong>回溯</strong>啊，将我们删除的行、列加回来，再尝试另外一种删法</p><p>以上就是X算法，它看起来十分暴力，但可优化性极好，因为它含有很多的“加行、列，删行、列”操作，这提示我们<strong>用链表优化</strong></p><h2 id="DLX"><a href="#DLX" class="headerlink" title="DLX"></a>DLX</h2><p>DLX的使用必须满足一个条件：<strong>图是稀疏的</strong>，换句话说，图中的1的个数不多（<del>但“不多”的定义到底是多少呢，我也不知道</del>）</p><p>DLX是用了一个<strong>十字链表</strong>结构来优化的，具体的，<strong>一个为1点将与其上、下、左、右四个方向上的第一个1链接（如果走到边界就循环）</strong>，如图：</p><p><img src="https://s2.loli.net/2021/12/16/yqZnMdzvfl63erE.png" alt="十字链"></p><p>明显，这个链表是<strong>双向的</strong></p><p>同时我们还需要记录下每一个1的行号、列号，以及每一列有多少个1（方便求1最少的一列）</p><p>我们要先建出一个空行来做表头，然后类似于链式前向星的插入，注意我们是每插入完一行就要换行</p><p>然后进行dfs搜索即可（dance操作）</p><h2 id="代码和时间分析"><a href="#代码和时间分析" class="headerlink" title="代码和时间分析"></a>代码和时间分析</h2><p><a href="https://www.luogu.com.cn/problem/P4929">精确覆盖问题</a></p><p>由于l、r、u等变量名很容易重名，所以用了个结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5500</span> + <span class="number">5</span>; <span class="comment">//要多开m个表头</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l[N], r[N], u[N], d[N]; <span class="comment">//左、右、上、下</span></span><br><span class="line"><span class="keyword">int</span> si[N], row[N], col[N]; <span class="comment">//row:行号,col:列号</span></span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//建出表头</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x; ++i)</span><br><span class="line">&#123;</span><br><span class="line">l[i] = i - <span class="number">1</span>, r[i] = i + <span class="number">1</span>;</span><br><span class="line">col[i] = u[i] = d[i] = i;</span><br><span class="line">    si[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">l[<span class="number">0</span>] = x, r[x] = <span class="number">0</span>; <span class="comment">//循环</span></span><br><span class="line">idx = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;hh, <span class="keyword">int</span> &amp;tt, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//在hh和tt间插入点(x, y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">row[idx] = x, col[idx] = y, ++si[y];</span><br><span class="line">u[idx] = y, d[idx] = d[y], u[d[y]] = idx, d[y] = idx; <span class="comment">//这里y是表头</span></span><br><span class="line">r[hh] = l[tt] = idx, r[idx] = tt, l[idx] = hh;</span><br><span class="line">tt = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> p)</span> <span class="comment">//删掉p所在列和该列有1的行</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r[l[p]] = r[p], l[r[p]] = l[p];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[p]; i != p; i = d[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j])</span><br><span class="line">&#123;</span><br><span class="line">--si[col[j]];</span><br><span class="line">u[d[j]] = u[j], d[u[j]] = d[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> p)</span> <span class="comment">//添加p所在列和该列有1的行,注意和删除倒着来</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = u[p]; i != p; i = u[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j])</span><br><span class="line">&#123;</span><br><span class="line">u[d[j]] = j, d[u[j]] = j;</span><br><span class="line">++si[col[j]];</span><br><span class="line">&#125;</span><br><span class="line">r[l[p]] = p, l[r[p]] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!r[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> p = r[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r[<span class="number">0</span>]; i; i = r[i])</span><br><span class="line"><span class="keyword">if</span> (si[i] &lt; si[p])</span><br><span class="line">p = i;</span><br><span class="line"><span class="built_in">remove</span>(p);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[p]; i != p; i = d[i]) <span class="comment">//尝试选p列中每一个有1的行</span></span><br><span class="line">&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(row[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j])</span><br><span class="line"><span class="built_in">remove</span>(col[j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dance</span>())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//回溯,注意反着来</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j])</span><br><span class="line"><span class="built_in">resume</span>(col[j]);</span><br><span class="line">ans.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">resume</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; dlx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">dlx.<span class="built_in">init</span>(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, hh, tt, x; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">hh = tt = dlx.idx; <span class="comment">//换行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span> (x)</span><br><span class="line">dlx.<span class="built_in">insert</span>(hh, tt, i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dlx.<span class="built_in">dance</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : dlx.ans)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No Solution!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DLX递归及回溯的次数只与矩阵中1的个数有关，它的实际复杂度为 $O(c^n)$ ，其中 $c$ 是一个很接近于1的常数，而 $n$ 是矩阵中1的个数</p><p>与Dinic、匈牙利类似，DLX的实际运行情况良好</p><h2 id="应用——数独"><a href="#应用——数独" class="headerlink" title="应用——数独"></a>应用——数独</h2><p>DLX有很多应用，最经典的是<strong>数独</strong>问题，DLX 的难点，不全在于链表的建立，而在于建模，即如何转化为精确覆盖问题，一般来说，我们会赋予行列意义，<strong>行表示决策，对应选或不选</strong>，<strong>列表示限制，对应题目条件</strong></p><p>那么看看数独问题：<a href="https://www.luogu.com.cn/problem/P1784">数独</a></p><p>每一次填数可以用一个三元组  $(x, y, z)$ 表示，意为“在第 $x$ 行第 $y$ 列填入数字 $z$ ”，而题目的限制有四个：每个格子只能填一个数，行、列、九宫格要满足不重复</p><p>那么考虑如何定义DLX的行和列：</p><p>行对应决策，很好定义，因为三元组 $(x, y, z)$ 中 $x, y, z \in [1, 9]$ 故一共有  $9^3 = 729$ 种决策，我们就让DLX中有729行</p><p>而列对应限制，先考虑每个格子只能填一个数，我们需要81列来保证这个性质；然后，对于数独中的每一行，我们需要一列保证该行有且仅有一个1，又一列保证该行有且仅有一个2，……，最终对于数独中的每一行，我们要9列，一共9行，则为了保证数独的行不重复，我们要 $9 \times 9 = 81$ 行；对于数独的列、九宫同理，一共要用 $81 \times 4 = 324$ 列</p><p>而DLX的729行中每一行对应一个决策，即填入一个数字，这只会影响四个限制各一个，故有 $729 \times 4 = 2916$ 个1</p><p>综上，我们的DLX有729行，324列，2916个1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l[N], r[N], u[N], d[N];</span><br><span class="line"><span class="keyword">int</span> si[N], row[N], col[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x; ++i)</span><br><span class="line">&#123;</span><br><span class="line">l[i] = i - <span class="number">1</span>, r[i] = i + <span class="number">1</span>;</span><br><span class="line">col[i] = u[i] = d[i] = i;</span><br><span class="line">    si[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">l[<span class="number">0</span>] = x, r[x] = <span class="number">0</span>;</span><br><span class="line">idx = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;hh, <span class="keyword">int</span> &amp;tt, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">row[idx] = x, col[idx] = y, ++si[y];</span><br><span class="line">u[idx] = y, d[idx] = d[y], u[d[y]] = idx, d[y] = idx;</span><br><span class="line">r[hh] = l[tt] = idx, r[idx] = tt, l[idx] = hh;</span><br><span class="line">tt = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r[l[p]] = r[p], l[r[p]] = l[p];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[p]; i != p; i = d[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j])</span><br><span class="line">&#123;</span><br><span class="line">--si[col[j]];</span><br><span class="line">u[d[j]] = u[j], d[u[j]] = d[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = u[p]; i != p; i = u[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j])</span><br><span class="line">&#123;</span><br><span class="line">u[d[j]] = j, d[u[j]] = j;</span><br><span class="line">++si[col[j]];</span><br><span class="line">&#125;</span><br><span class="line">r[l[p]] = p, l[r[p]] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!r[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> p = r[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r[<span class="number">0</span>]; i; i = r[i])</span><br><span class="line"><span class="keyword">if</span> (si[i] &lt; si[p])</span><br><span class="line">p = i;</span><br><span class="line"><span class="built_in">remove</span>(p);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[p]; i != p; i = d[i])</span><br><span class="line">&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(row[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j])</span><br><span class="line"><span class="built_in">remove</span>(col[j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dance</span>())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j])</span><br><span class="line"><span class="built_in">resume</span>(col[j]);</span><br><span class="line">ans.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">resume</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; dlx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x - <span class="number">1</span>) * <span class="number">9</span> * <span class="number">9</span> + (y - <span class="number">1</span>) * <span class="number">9</span> + num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> dx = (x - <span class="number">1</span>) / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> dy = (y - <span class="number">1</span>) / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> room = (dx - <span class="number">1</span>) * <span class="number">3</span> + dy, id = <span class="built_in">get_id</span>(x, y, num);</span><br><span class="line"><span class="keyword">int</span> hh = dlx.idx, tt = dlx.idx;</span><br><span class="line">dlx.<span class="built_in">insert</span>(hh, tt, id, <span class="number">81</span> * <span class="number">0</span> + (x - <span class="number">1</span>) * <span class="number">9</span> + y);</span><br><span class="line">dlx.<span class="built_in">insert</span>(hh, tt, id, <span class="number">81</span> * <span class="number">1</span> + (x - <span class="number">1</span>) * <span class="number">9</span> + num);</span><br><span class="line">dlx.<span class="built_in">insert</span>(hh, tt, id, <span class="number">81</span> * <span class="number">2</span> + (y - <span class="number">1</span>) * <span class="number">9</span> + num);</span><br><span class="line">dlx.<span class="built_in">insert</span>(hh, tt, id, <span class="number">81</span> * <span class="number">3</span> + (room - <span class="number">1</span>) * <span class="number">9</span> + num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ans</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : dlx.ans)</span><br><span class="line">&#123;</span><br><span class="line">x = (i - <span class="number">1</span>) / <span class="number">9</span> / <span class="number">9</span> + <span class="number">1</span>;</span><br><span class="line">y = (i - <span class="number">1</span>) / <span class="number">9</span> % <span class="number">9</span> + <span class="number">1</span>;</span><br><span class="line">z = (i - <span class="number">1</span>) % <span class="number">9</span> + <span class="number">1</span>;</span><br><span class="line">a[x][y] = z;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dlx.<span class="built_in">init</span>(<span class="number">324</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line"><span class="keyword">if</span> (a[i][j])</span><br><span class="line"><span class="built_in">insert</span>(i, j, a[i][j]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">9</span>; ++k)</span><br><span class="line"><span class="built_in">insert</span>(i, j, k);</span><br><span class="line">&#125;</span><br><span class="line">dlx.<span class="built_in">dance</span>();</span><br><span class="line"><span class="built_in">get_ans</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; ++j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i][j]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展应用——重复覆盖问题"><a href="#拓展应用——重复覆盖问题" class="headerlink" title="拓展应用——重复覆盖问题"></a>拓展应用——重复覆盖问题</h2><p>在精确覆盖问题中，考虑将条件“每一列<strong>恰好</strong>有一个1”改为“每一列<strong>至少</strong>有一个1”，这个问题就是<strong>重复覆盖问题</strong></p><p>解决重复覆盖问题和精确覆盖问题一样，主要还是DLX，即十字双向链表优化dfs，不同的地方是，每次删除的时候只删掉所选行的所有1所在列，并不像精确覆盖一样删掉和1同列的所有1的所在行（这是因为可以重复覆盖），这样，dfs的深度将变得无法预测，于是我们使用<strong>IDA</strong>*</p><p>此时就不需要保证矩阵中1的个数不多了，反而，我们需要保证<strong>答案选的行数不多</strong>，另外重复覆盖问题很暴力，所以容易TLE</p><p><a href="https://www.acwing.com/problem/content/2715/">重复覆盖问题</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10000</span> + <span class="number">5</span>, NN = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l[N], r[N], u[N], d[N];</span><br><span class="line"><span class="keyword">int</span> si[N], row[N], col[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">bool</span> vis[NN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x; ++i)</span><br><span class="line">&#123;</span><br><span class="line">l[i] = i - <span class="number">1</span>, r[i] = i + <span class="number">1</span>;</span><br><span class="line">col[i] = u[i] = d[i] = i;</span><br><span class="line">si[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">l[<span class="number">0</span>] = x, r[x] = <span class="number">0</span>;</span><br><span class="line">idx = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;hh, <span class="keyword">int</span> &amp;tt, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">row[idx] = x, col[idx] = y, ++si[y];</span><br><span class="line">u[idx] = y, d[idx] = d[y], u[d[y]] = idx, d[y] = idx;</span><br><span class="line">r[hh] = l[tt] = idx, r[idx] = tt, l[idx] = hh;</span><br><span class="line">tt = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> p)</span> <span class="comment">//删除p列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[p]; i != p; i = d[i])</span><br><span class="line">&#123;</span><br><span class="line">r[l[i]] = r[i];</span><br><span class="line">l[r[i]] = l[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = u[p]; i != p; i = u[i])</span><br><span class="line">&#123;</span><br><span class="line">r[l[i]] = i;</span><br><span class="line">l[r[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">vis[i] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r[<span class="number">0</span>]; i; i = r[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[col[i]])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">++res;</span><br><span class="line">vis[col[i]] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = d[i]; j != i; j = d[j])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = r[j]; k != j; k = r[k])</span><br><span class="line">vis[col[k]] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dance</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (o + <span class="built_in">h</span>() &gt; depth)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!r[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> p = r[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r[<span class="number">0</span>]; i; i = r[i])</span><br><span class="line"><span class="keyword">if</span> (si[i] &lt; si[p])</span><br><span class="line">p = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[p]; i != p; i = d[i])</span><br><span class="line">&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(row[i]);</span><br><span class="line"><span class="built_in">remove</span>(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j])</span><br><span class="line"><span class="built_in">remove</span>(j);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dance</span>(o + <span class="number">1</span>, depth))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j])</span><br><span class="line"><span class="built_in">resume</span>(j);</span><br><span class="line"><span class="built_in">resume</span>(i);</span><br><span class="line">ans.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; dlx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">dlx.<span class="built_in">init</span>(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, hh, tt, x; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">hh = tt = dlx.idx; <span class="comment">//换行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span> (x)</span><br><span class="line">dlx.<span class="built_in">insert</span>(hh, tt, i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!dlx.<span class="built_in">dance</span>(<span class="number">0</span>, depth))</span><br><span class="line">++depth;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, depth);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : dlx.ans)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 跳舞表、舞蹈链（&lt;del&gt;神一般的翻译&lt;/del&gt;）&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="Dancing Links,DLX" scheme="https://dyd-true.github.io/tags/Dancing-Links-DLX/"/>
    
    <category term="搜索" scheme="https://dyd-true.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
    <category term="链表" scheme="https://dyd-true.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/13总结</title>
    <link href="https://dyd-true.github.io/2021/12/13/test2021-12-13%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/13/test2021-12-13%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-13T11:26:31.000Z</published>
    <updated>2021-12-24T14:13:18.791Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2a983c21cd42e7203306db9e1541db64b5d7a17427c1b321d330cdde824a2ab4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">D'y'd は、パスワードを入力するように求められます</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">连着考，我太难了……</summary>
    
    
    
    <category term="test" scheme="https://dyd-true.github.io/categories/test/"/>
    
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="斜率优化" scheme="https://dyd-true.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
    <category term="树状数组" scheme="https://dyd-true.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="状态压缩" scheme="https://dyd-true.github.io/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
    <category term="STL" scheme="https://dyd-true.github.io/tags/STL/"/>
    
    <category term="贪心" scheme="https://dyd-true.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="LIS" scheme="https://dyd-true.github.io/tags/LIS/"/>
    
    <category term="博弈论" scheme="https://dyd-true.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/12总结</title>
    <link href="https://dyd-true.github.io/2021/12/13/test2021-12-12%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/13/test2021-12-12%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-13T11:26:06.000Z</published>
    <updated>2021-12-24T14:11:37.003Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4aceccdc1b355770e7dfe5cf2ddd4b7f41ba444da9af8da97cadd25b10000008"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">D'y'd は、パスワードを入力するように求められます</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">给巨佬们陪考</summary>
    
    
    
    <category term="test" scheme="https://dyd-true.github.io/categories/test/"/>
    
    
    <category term="分治" scheme="https://dyd-true.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="Tarjan" scheme="https://dyd-true.github.io/tags/Tarjan/"/>
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="优化" scheme="https://dyd-true.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
    <category term="单调队列" scheme="https://dyd-true.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>LCT</title>
    <link href="https://dyd-true.github.io/2021/12/12/LCT/"/>
    <id>https://dyd-true.github.io/2021/12/12/LCT/</id>
    <published>2021-12-12T06:27:44.000Z</published>
    <updated>2021-12-24T14:00:39.752Z</updated>
    
    <content type="html"><![CDATA[<p> 背模板吧</p><span id="more"></span><h1 id="LCT"><a href="#LCT" class="headerlink" title="LCT"></a>LCT</h1><p><strong>LCT</strong>，<strong>Link Cut Tree</strong>，中文叫做<strong>动态树</strong>，顾名思义，是一种维护动态的树的数据结构，可以维护一个森林，支持加边、删边操作（但必须保证是<strong>树</strong>），时间都是 $O(\log n)$ ，常数有点大</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其实主要思路是<strong>将一棵树拆成很多个splay</strong></p><h3 id="虚实边"><a href="#虚实边" class="headerlink" title="虚实边"></a>虚实边</h3><p>和树剖类似，动态树将边分为<strong>虚边</strong>和<strong>实边</strong>，每一个点到其儿子节点的所有边中，<strong>最多有一条实边（可以没有）</strong>，而于树剖不同的是，我们用<strong>平衡树</strong>维护实边构成的路径，具体地，每一条<strong>只由实边构成的、极大的路径</strong>（特别的，<strong>如果一个点没有实边与其相连，我们认为这个点对应一个只包含自己的实边路径</strong>）都对应一个splay，splay的<strong>中序遍历</strong>，就是要维护的路径（从上到下），而splay的<strong>后继和前驱</strong>就对应树上的<strong>父子关系</strong>，而对于虚边，我们用splay的<strong>根节点维护</strong>（具体的，根节点的父亲对于虚边上的父亲）， 如图，实线对于实边，虚线对于虚边，红色部分对于一棵splay，不难发现，在这样的定义下，所有点都对应位于的实边路径：</p><p><img src="https://s2.loli.net/2021/12/12/aHpuSNOeUBWkoqM.png" alt="实虚边"></p><p>为了维护虚实边，我们有以下操作</p><h3 id="accecss"><a href="#accecss" class="headerlink" title="accecss"></a>accecss</h3><p> $access(x)$ 可以将树上从根节点到点 $x$ 之间的所有边变成实边（明显它们也就在同一个实边路径上了），并且 $x$ 下方再无该实边路径上的点（换句话说， $x$ 就是该实边路径的终点），这是LCT最基本的操作，执行完毕后 $x$  就是所在splay的根，具体如图：</p><p><img src="https://s2.loli.net/2021/12/12/GA6aSNO9JPIkzRQ.png" alt="acess"></p><p>如果要把 $x$ 和 $y$ 所在实边相连，可以把 $y$ 转到它所在splay的根，此时 $y$ 的左子树就对应 $y$ 所在实边中 $y$ 上方的部分，右子树就对应 $y$ 所在实边中 $y$ 下方的部分，然后直接让 $y$ 的右儿子指向 $x$ （我们从下往上进行，所以这时的 $x$ 是处理完毕的，并且一定是其所在实边对应slpay的根，这相当于将 $x$ 所在的splay拿来代替 $y$ 的右子树），这样， $y$ 所在实边中 $y$ 下方的部分就变成 $x$ 所在的那条实边了，特别的，第一次操作时让 $x$ 的右子树为空（保证 $x$ 就是该实边路径的终点）</p><p>要完成access，只需从 $x$ 开始向上操作，直到根节点即可</p><h3 id="is-root"><a href="#is-root" class="headerlink" title="is root"></a>is root</h3><p> $is\_rt(x)$ 可以判断 $x$ 是否是<strong>所在slpay</strong>的根节点，注意判断的不是原树的根节点，只需看 $x$ 的父亲是否有 $x$ 这个儿子即可（slpay根节点的父亲维护的时虚边）</p><h3 id="make-root"><a href="#make-root" class="headerlink" title="make root"></a>make root</h3><p> $make\_rt(x)$ 可以将 $x$ 变成所在树的根节点（因为树是无根树），只需先 $access(x)$ ，此时 $x$ 和根必定是同一实边路径的终点和起点，翻转即可</p><h3 id="find-root"><a href="#find-root" class="headerlink" title="find root"></a>find root</h3><p> $find\_rt(x)$ 可以找到 $x$ 所在树的根节点，并将其转到splay的根节点上，只需先 $access(x)$ ，然后一直向 $x$ 的左子树走即可，走时注意push down</p><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p> $split(x, y)$ 可以将 $x$ 到 $y$ 的路径变成实边路径，只要先 $make\_rt(x)$ ，然后 $access(y)$ 即可</p><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><p> $link(x, y)$ 判断 $x, y$ 是否联通，如果不连通就加边 $(x, y)$ ，只要 $make\_rt(x)$ 然后判断 $find\_rt(y)$ 是否等于 $x$ 不等则令 $fa(x) = y$ （因为make root后 $x$ 一定是splay的根节点）</p><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><p> $cut(x, y)$ 判断  $x, y$ 之间是否有边，如果有，就删除边 $(x, y)$ ，只要 $make\_rt(x)$ 然后判断 $find\_rt(y) = x \wedge fa(y) = x \wedge y\text{没有左儿子}$  ，成立就断开 $x, y$ 之间的边（双向断），然后push up</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.luogu.com.cn/problem/P3690">【模板】动态树</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Slpay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">2</span>], fa, v;</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"><span class="keyword">bool</span> rev;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ch(x, y) tr[(x)].ch[(y)]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fa(x) tr[(x)].fa</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> v(x) tr[(x)].v</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sum(x) tr[(x)].sum</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rev(x) tr[(x)].rev</span></span><br><span class="line">&#125; tr[N];</span><br><span class="line"><span class="keyword">int</span> stk[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tag_rev</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>),<span class="built_in">ch</span>(x, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">rev</span>(x) ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sum</span>(x) = <span class="built_in">sum</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)) ^ <span class="built_in">sum</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>)) ^ <span class="built_in">v</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">rev</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">tag_rev</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)), <span class="built_in">tag_rev</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">rev</span>(x) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_rt</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ch</span>(<span class="built_in">fa</span>(x), <span class="number">0</span>) != x &amp;&amp; <span class="built_in">ch</span>(<span class="built_in">fa</span>(x), <span class="number">1</span>) != x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">ch</span>(y, <span class="number">1</span>) == x;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">is_rt</span>(y))</span><br><span class="line"><span class="built_in">ch</span>(z, <span class="built_in">ch</span>(z, <span class="number">1</span>) == y) = x;</span><br><span class="line"><span class="built_in">fa</span>(x) = z;</span><br><span class="line"><span class="built_in">ch</span>(y, k) = <span class="built_in">ch</span>(x, k ^ <span class="number">1</span>), <span class="built_in">fa</span>(<span class="built_in">ch</span>(x, k ^ <span class="number">1</span>)) = y;</span><br><span class="line"><span class="built_in">ch</span>(x, k ^ <span class="number">1</span>) = y, <span class="built_in">fa</span>(y) = x;</span><br><span class="line"><span class="built_in">push_up</span>(y), <span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>, t = x;</span><br><span class="line">stk[++top] = t;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">is_rt</span>(t))</span><br><span class="line">stk[++top] = t = <span class="built_in">fa</span>(t);</span><br><span class="line"><span class="keyword">while</span> (top)</span><br><span class="line"><span class="built_in">push_down</span>(stk[top--]);</span><br><span class="line"><span class="keyword">int</span> y, z;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">is_rt</span>(x))</span><br><span class="line">&#123;</span><br><span class="line">y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">is_rt</span>(y))</span><br><span class="line">(<span class="built_in">ch</span>(y, <span class="number">1</span>) == x) ^ (<span class="built_in">ch</span>(z, <span class="number">1</span>) == y) ? <span class="built_in">rotate</span>(x) : <span class="built_in">rotate</span>(y);</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> z = x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; x; y = x, x = <span class="built_in">fa</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line"><span class="built_in">ch</span>(x, <span class="number">1</span>) = y;</span><br><span class="line"><span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">splay</span>(z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_rt</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x);</span><br><span class="line"><span class="built_in">tag_rev</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_rt</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">ch</span>(x, <span class="number">0</span>))</span><br><span class="line"><span class="built_in">push_down</span>(x), x = <span class="built_in">ch</span>(x, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_rt</span>(x);</span><br><span class="line"><span class="built_in">access</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_rt</span>(x);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find_rt</span>(y) != x)</span><br><span class="line"><span class="built_in">fa</span>(x) = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_rt</span>(x);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find_rt</span>(y) == x &amp;&amp; <span class="built_in">fa</span>(y) == x &amp;&amp; !<span class="built_in">ch</span>(y, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ch</span>(x, <span class="number">1</span>) = <span class="built_in">fa</span>(y) = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;<span class="built_in">v</span>(i));</span><br><span class="line"><span class="keyword">int</span> op, x, y;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">split</span>(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sum</span>(y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">link</span>(x, y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line"><span class="built_in">cut</span>(x, y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line"><span class="built_in">v</span>(x) = y;</span><br><span class="line"><span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 背模板吧&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="平衡树" scheme="https://dyd-true.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    <category term="数据结构" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="LCT" scheme="https://dyd-true.github.io/tags/LCT/"/>
    
    <category term="slpay" scheme="https://dyd-true.github.io/tags/slpay/"/>
    
  </entry>
  
  <entry>
    <title>luoguP4883 mzf的考验</title>
    <link href="https://dyd-true.github.io/2021/12/12/luoguP4883-mzf%E7%9A%84%E8%80%83%E9%AA%8C/"/>
    <id>https://dyd-true.github.io/2021/12/12/luoguP4883-mzf%E7%9A%84%E8%80%83%E9%AA%8C/</id>
    <published>2021-12-12T05:51:13.000Z</published>
    <updated>2021-12-24T14:03:46.035Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>“我的splay常数小”</strong></p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4883">mzf的考验</a></p><p>一开始要写<strong>平衡树</strong>我是拒绝的，但是没有办法，最讨厌的是它要求区间旋转，这就意味着只有FHQ和slpay可以搞（其它的我都搞不出区间旋转操作），最后，决定打splay（主要是FHQ不会），然后看到讨论区说这道题<strong>卡常的一笔</strong>，我留下了历史性的flag——<strong>“没事，我的splay常数小”</strong></p><p>太久没写slpay，写的有点困难</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>, D = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> p[D];</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; D; ++i, d &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">x[i] = d &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Splay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> root = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> as[D];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">2</span>], fa, v, size, cnt[D], txor;</span><br><span class="line">LL sum;</span><br><span class="line"><span class="keyword">bool</span> rev;</span><br><span class="line">&#125; tr[N];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ch(x, y) tr[(x)].ch[(y)]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sum(x) tr[(x)].sum</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> si(x) tr[(x)].size</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rev(x) tr[(x)].rev</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> txor(x) tr[(x)].txor</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cnt(x, y) tr[(x)].cnt[(y)]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fa(x) tr[(x)].fa</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> v(x) tr[(x)].v</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">si</span>(x) = <span class="built_in">si</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>)) + <span class="built_in">si</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)) + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">sum</span>(x) = <span class="built_in">sum</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>)) + <span class="built_in">sum</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)) + <span class="built_in">v</span>(x);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; D; ++i)</span><br><span class="line"><span class="built_in">cnt</span>(x, i) = <span class="built_in">cnt</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>), i) + <span class="built_in">cnt</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>), i) + ((<span class="built_in">v</span>(x) &gt;&gt; i) &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">ch</span>(y, <span class="number">1</span>) == x;</span><br><span class="line"><span class="built_in">ch</span>(z, <span class="built_in">ch</span>(z, <span class="number">1</span>) == y) = x, <span class="built_in">fa</span>(x) = z;</span><br><span class="line"><span class="built_in">ch</span>(y, k) = <span class="built_in">ch</span>(x, k ^ <span class="number">1</span>), <span class="built_in">fa</span>(<span class="built_in">ch</span>(x, k ^ <span class="number">1</span>)) = y;</span><br><span class="line"><span class="built_in">ch</span>(x, k ^ <span class="number">1</span>) = y, <span class="built_in">fa</span>(y) = x;</span><br><span class="line"><span class="built_in">push_up</span>(y), <span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == k)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> y, z;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fa</span>(x) != k)</span><br><span class="line">&#123;</span><br><span class="line">y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line"><span class="keyword">if</span> (z != k)</span><br><span class="line">(<span class="built_in">ch</span>(y, <span class="number">1</span>) == x) ^ (<span class="built_in">ch</span>(z, <span class="number">1</span>) == y) ? <span class="built_in">rotate</span>(x) : <span class="built_in">rotate</span>(y);</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!k)</span><br><span class="line">root = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tag_rev</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">swap</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>), <span class="built_in">ch</span>(x, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">rev</span>(x) ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tag_xor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">update</span>(as, d);</span><br><span class="line">LL res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; D; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (as[i])</span><br><span class="line"><span class="built_in">cnt</span>(x, i) = <span class="built_in">si</span>(x) - <span class="built_in">cnt</span>(x, i);</span><br><span class="line">res += (LL)<span class="built_in">cnt</span>(x, i) * p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sum</span>(x) = res;</span><br><span class="line"><span class="built_in">v</span>(x) ^= d, <span class="built_in">txor</span>(x) ^= d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_donw</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">rev</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">tag_rev</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)), <span class="built_in">tag_rev</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">rev</span>(x) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">txor</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">tag_xor</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>), <span class="built_in">txor</span>(x)), <span class="built_in">tag_xor</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>), <span class="built_in">txor</span>(x));</span><br><span class="line"><span class="built_in">txor</span>(x) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_k</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">push_donw</span>(x);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">si</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)) + <span class="number">1</span> == k)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">if</span> (k &lt;= <span class="built_in">si</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_k</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>), k);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_k</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>), k - <span class="built_in">si</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ll = <span class="built_in">get_k</span>(root, l), rr = <span class="built_in">get_k</span>(root, r + <span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(ll, <span class="number">0</span>), <span class="built_in">splay</span>(rr, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fa</span>(ll) != root)</span><br><span class="line"><span class="built_in">rotate</span>(ll);</span><br><span class="line"><span class="built_in">tag_rev</span>(<span class="built_in">ch</span>(ll, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cxor</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ll = <span class="built_in">get_k</span>(root, l), rr = <span class="built_in">get_k</span>(root, r + <span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(ll, <span class="number">0</span>), <span class="built_in">splay</span>(rr, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fa</span>(ll) != root)</span><br><span class="line"><span class="built_in">rotate</span>(ll);</span><br><span class="line"><span class="built_in">tag_xor</span>(<span class="built_in">ch</span>(ll, <span class="number">1</span>), d);</span><br><span class="line"><span class="built_in">push_up</span>(ll), <span class="built_in">push_up</span>(rr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ll = <span class="built_in">get_k</span>(root, l), rr = <span class="built_in">get_k</span>(root, r + <span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(ll, <span class="number">0</span>), <span class="built_in">splay</span>(rr, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fa</span>(ll) != root)</span><br><span class="line"><span class="built_in">rotate</span>(ll);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">ch</span>(ll, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> ff, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> &amp;x)</span> <span class="comment">//类似于线段树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &gt; r)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">x = ++num;</span><br><span class="line"><span class="built_in">fa</span>(x) = ff, <span class="built_in">v</span>(x) = a[mid];</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">si</span>(x) = <span class="number">1</span>, <span class="built_in">sum</span>(x) = <span class="built_in">v</span>(x);</span><br><span class="line"><span class="built_in">update</span>(tr[x].cnt, <span class="built_in">v</span>(x));</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(x, l, mid - <span class="number">1</span>, <span class="built_in">ch</span>(x, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">build</span>(x, mid + <span class="number">1</span>, r, <span class="built_in">ch</span>(x, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">num = <span class="number">2</span>, root = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">ch</span>(<span class="number">1</span>, <span class="number">1</span>) = <span class="built_in">si</span>(<span class="number">1</span>) = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">fa</span>(<span class="number">2</span>) = <span class="built_in">si</span>(<span class="number">2</span>) = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">2</span>, <span class="number">1</span>, n, <span class="built_in">ch</span>(<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">push_up</span>(<span class="number">2</span>), <span class="built_in">push_up</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; tr;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prev</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; D; ++i)</span><br><span class="line">p[i] = p[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">prev</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">tr.<span class="built_in">init</span>(n);</span><br><span class="line"><span class="keyword">int</span> op, l, r, x;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;l, &amp;r);</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">tr.<span class="built_in">reve</span>(l, r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), tr.<span class="built_in">cxor</span>(l, r, x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, tr.<span class="built_in">ask</span>(l, r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>断断续续打了有2d，交的时候过去的话语犹在耳畔—— <strong>“我的splay常数小”</strong>，然后一交——TLE40分，wdf</p><p>果断无耻吸氧，含泪AC，完毕后不忘说一句： <strong>“我的splay开了O2常数小”</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; &lt;strong&gt;“我的splay常数小”&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="平衡树" scheme="https://dyd-true.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="splay" scheme="https://dyd-true.github.io/tags/splay/"/>
    
  </entry>
  
  <entry>
    <title>luoguP1512 伊甸园日历游戏</title>
    <link href="https://dyd-true.github.io/2021/12/12/luoguP1512-%E4%BC%8A%E7%94%B8%E5%9B%AD%E6%97%A5%E5%8E%86%E6%B8%B8%E6%88%8F/"/>
    <id>https://dyd-true.github.io/2021/12/12/luoguP1512-%E4%BC%8A%E7%94%B8%E5%9B%AD%E6%97%A5%E5%8E%86%E6%B8%B8%E6%88%8F/</id>
    <published>2021-12-12T02:35:55.000Z</published>
    <updated>2021-12-24T14:00:54.784Z</updated>
    
    <content type="html"><![CDATA[<p> 良多大水题</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P1512">伊甸园日历游戏</a></p><p>找规律：</p><ol><li> $m = 9, d = 30$ 胜</li><li> $m = 11, d = 30$ 胜</li><li> $(m + d) \mod 2 = 0$ 胜</li></ol><p>完</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n, m, d;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;d);</span><br><span class="line"><span class="keyword">if</span> ((m == <span class="number">9</span> &amp;&amp; d == <span class="number">30</span>) || (m == <span class="number">11</span> &amp;&amp; d == <span class="number">30</span>) || (((m + d) &amp; <span class="number">1</span>) == <span class="number">0</span>))</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 良多大水题&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="找规律" scheme="https://dyd-true.github.io/tags/%E6%89%BE%E8%A7%84%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>luoguP2747 [USACO5.4]周游加拿大Canada Tour</title>
    <link href="https://dyd-true.github.io/2021/12/12/luoguP2747-USACO5-4-%E5%91%A8%E6%B8%B8%E5%8A%A0%E6%8B%BF%E5%A4%A7Canada-Tour/"/>
    <id>https://dyd-true.github.io/2021/12/12/luoguP2747-USACO5-4-%E5%91%A8%E6%B8%B8%E5%8A%A0%E6%8B%BF%E5%A4%A7Canada-Tour/</id>
    <published>2021-12-12T02:22:10.000Z</published>
    <updated>2021-12-24T14:02:02.881Z</updated>
    
    <content type="html"><![CDATA[<p> 被STL卡半天</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P2747">周游加拿大</a></p><p>1993IOI的题（感觉当年的题好水啊，现在越来越<strong>卷</strong>了），疑似是<strong>dp的起源</strong></p><p>dp比较简单没什么好说的，重点在处理字符串，注意一下问题：</p><ol><li>map中不能直接拿char*作为key</li><li>string不能用scanf输入</li><li>别搞妖魔鬼怪，就用cin+string+map挺好的</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>  N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">map&lt;string, <span class="keyword">int</span>&gt; ha;</span><br><span class="line"><span class="keyword">int</span> mp[N][N], f[N][N], ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">string u, v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">cin &gt;&gt; u, ha[u] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v, mp[ha[u]][ha[v]] = mp[ha[v]][ha[u]] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; j; ++k)</span><br><span class="line"><span class="keyword">if</span> (mp[j][k] &amp;&amp; f[i][k])</span><br><span class="line">f[i][j] = f[j][i] = <span class="built_in">max</span>(f[i][j], f[i][k] + <span class="number">1</span>);</span><br><span class="line">ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (mp[i][n])</span><br><span class="line">ans = <span class="built_in">max</span>(f[i][n], ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 被STL卡半天&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="USACO" scheme="https://dyd-true.github.io/tags/USACO/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="STL" scheme="https://dyd-true.github.io/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>luoguP3896 [湖南集训]Clever Rabbit</title>
    <link href="https://dyd-true.github.io/2021/12/08/luoguP3896-%E6%B9%96%E5%8D%97%E9%9B%86%E8%AE%AD-Clever-Rabbit/"/>
    <id>https://dyd-true.github.io/2021/12/08/luoguP3896-%E6%B9%96%E5%8D%97%E9%9B%86%E8%AE%AD-Clever-Rabbit/</id>
    <published>2021-12-08T12:50:21.000Z</published>
    <updated>2021-12-24T14:02:40.285Z</updated>
    
    <content type="html"><![CDATA[<p>  一道很暴力的题</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P3896">Clever Rabbit</a></p><p>一看 $n \le 30$ ，时限4s，第一反应打表能过，仔细回味，发现 $10^{30}$ 铁挂，而且20分的 $n \le 10$ 都会挂，这……</p><p>但不能浪费我辛苦打出来的表（由于 $x = 0$ 对答案无贡献，故保证 $x &gt; 0$ ）：</p><table><thead><tr><th align="center">n</th><th align="center">x</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">-</td></tr><tr><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">3</td><td align="center">495</td></tr><tr><td align="center">4</td><td align="center">6174</td></tr><tr><td align="center">5</td><td align="center">-</td></tr><tr><td align="center">6</td><td align="center">549945<br/>631764</td></tr><tr><td align="center">7</td><td align="center">-</td></tr><tr><td align="center">8</td><td align="center">63317664<br/>97508421</td></tr><tr><td align="center">9</td><td align="center">554999445<br/>864197532</td></tr></tbody></table><p>9的数据都跑了进3min……</p><p>然后又是全凭rp的找规律时间，浪费时间ing</p><p>发现一个小规律，看图：</p><p><img src="https://s2.loli.net/2021/12/12/repxRFMSVkOgN7f.png" alt="竖式"></p><p>我们发现 $b$ 数是对称且单调下降的（下降不严格），证明也很好证（自己列个竖式就知道了），那么我们可以枚举 $b$ 的一半，计算另一半，然后得到 $b’$ 排序后得到 $c, d$ ，计算检验即可，然鹅， $10^{\frac{n}{2}} = 10^{15}$ 次方也是挂了</p><p>突然发现只需枚举 $0 \sim 9$ 每个数出现了多少次，计算 $max,min,max - min$ 判断即可，考虑时间复杂度，看似是 $n^{10} * n$ （跑不满），但实际上用隔板法可知为 $O(\binom{n + 10 - 1}{9}n)$ ， 注意解决一下高精减法，可以得60分（开了O2可以70分）</p><p>再考虑我们打表发现的性质，还是生成 $b$ ，但和上面一样，只枚举 $b$ 的前 $\frac{n}{2}$ 个数中 $0 \sim 9$ 各出现了多少次，由于 $b$ 单调，故只有一种合法排列，生成  $b’$ 后暴力检验 ，特殊处理一下  $n$ 为奇数时中间的数（一定是0）</p><p>不开O2最慢的点1.89s（时限4s，能过），开了O2快得飞起，最慢的点412ms</p><p>考虑优化（毕竟1.89s太讨厌了），那个排序可以开个桶，把 $\log n$ 优化了（然鹅 $n \le 30$ 所以 $\log n$ 几乎就是常数），再就是其实可以先不求出 $b’$ 用 $b$ 的一半即可判断是否合法，合法再求（常数优化），然后卡卡常，时间复杂度为 $O(\binom{\frac{n}{2} + 10 -1}{9}n)$ ，不开O2最慢的点322ms，开了O2最慢的点205ms，好像除了打表的大佬（竟然真的可以打表，蒟蒻想都不敢想）我混了个最快？估计马上就会被大佬们超过</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>  N = <span class="number">30</span> + <span class="number">5</span>, A = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> n, p, m, o;</span><br><span class="line"><span class="keyword">int</span> t, cnt;</span><br><span class="line"><span class="keyword">int</span> a[A], b[N], c[N], d[N];</span><br><span class="line"><span class="keyword">int</span> B[A]; <span class="comment">//桶</span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= B[i]; ++j)</span><br><span class="line">c[++t] = i, d[n - t + <span class="number">1</span>] = i;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">d[i] = d[i] - c[i];</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line"><span class="keyword">if</span> (d[i] != b[i])</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">b[n + <span class="number">1</span> - i] = -b[i];</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line"><span class="keyword">if</span> (b[i] &lt; <span class="number">0</span>)</span><br><span class="line">b[i] += <span class="number">10</span>, --b[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">t = ((LL)t * <span class="number">10</span> + b[i]) % p;</span><br><span class="line">ans = (((LL)t * t % p) + ans) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> <span class="comment">//生成b&#x27;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">B[i] = <span class="number">0</span>;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= a[i]; ++j)</span><br><span class="line">b[++cnt] = i;</span><br><span class="line"><span class="keyword">if</span> (o)</span><br><span class="line">b[cnt + <span class="number">1</span>] = <span class="number">0</span>, ++B[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = cnt, f = <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">1</span>)</span><br><span class="line">++B[<span class="number">9</span> - b[i]];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">++B[<span class="number">10</span> - b[i]];</span><br><span class="line"><span class="keyword">if</span> (b[i] == <span class="number">0</span> &amp;&amp; f)</span><br><span class="line">++B[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (f)</span><br><span class="line">++B[b[i] - <span class="number">1</span>], f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">++B[b[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[x] = r;</span><br><span class="line"><span class="built_in">work</span>();</span><br><span class="line"><span class="built_in">check</span>();</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= r; ++i)</span><br><span class="line">&#123;</span><br><span class="line">a[x] = i;</span><br><span class="line"><span class="built_in">dfs</span>(x + <span class="number">1</span>, r - i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;p);</span><br><span class="line">o = n &amp; <span class="number">1</span>;</span><br><span class="line">m = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans % p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;  一道很暴力的题&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="找规律" scheme="https://dyd-true.github.io/tags/%E6%89%BE%E8%A7%84%E5%BE%8B/"/>
    
    <category term="高精" scheme="https://dyd-true.github.io/tags/%E9%AB%98%E7%B2%BE/"/>
    
  </entry>
  
  <entry>
    <title>luoguP4892 GodFly的寻宝之旅</title>
    <link href="https://dyd-true.github.io/2021/12/06/luoguP4892-GodFly%E7%9A%84%E5%AF%BB%E5%AE%9D%E4%B9%8B%E6%97%85/"/>
    <id>https://dyd-true.github.io/2021/12/06/luoguP4892-GodFly%E7%9A%84%E5%AF%BB%E5%AE%9D%E4%B9%8B%E6%97%85/</id>
    <published>2021-12-06T14:00:40.000Z</published>
    <updated>2021-12-24T14:03:58.695Z</updated>
    
    <content type="html"><![CDATA[<p> 随机跳题都给我跳些神马玩意</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4892">GodFly的寻宝之旅</a></p><p>看了数据范围，感觉 $m$ （边数）应该只是做权值的，时间应和 $n$ 关系大些（毕竟  $n \le 18, m \le 10^5$ ），先考虑了暴力，暴搜走法，以边数为权值，时间复杂度为  $O(n!)$ 期望30分（我也没打所以正确性没保证） </p><p>然后继续以  $m$ 为权值的思路，考虑状压dp，设 $f[i][j][w]$ 表示“走到点 $i$ ，当前点集合为 $j$ 且当前代价为 $w$ 的方案数”，转移很显然，下面以 $w = 0$ 的转移为例：<br>$$<br>\begin{align}<br>&amp;\text{设当前地图为}j \text{（不存在}v \text{），和为}sum(j) \text{且存在边}u \rightarrow v \text{数为}mp[u][v] \text{，} j + v \text{指将点}v \text{压入状态}\\<br>&amp;f[v][j + v][0] += mp[u][v] *<br>\begin{cases}<br>f[u][j][0] &amp; if(v \mod 2 = 0)\\<br>f[u][j][0] &amp; if(v \mod 2 = 1 \wedge sum(j) \mod 2 = 0)\\<br>f[u][j][1] &amp; if(v \mod 2 = 1 \wedge sum(j) \mod 2 = 1)<br>\end{cases}<br>\end{align}<br>$$<br>打的很快，注意了取模，结果一交——WA</p><p>想对着样例调一下，于是翻出了2018的比赛（这是那次比赛的第三题），正打算下载样例，结果……谁家出题组样例用百度网盘发呀！下一个百度网盘太麻烦，于是放弃，只好对着死调</p><p>就在我万念俱灰之时，突然感觉 $f[i][j][w]$ 的顺序怪怪的，因为dp的无后效性是用第二维（当前点集只增不减）来保证的，那么是不是应该先枚举 $j$ 再枚举 $i$ 呢？怀着如果还不过就只有手造样例心态，把第二层循环调到了最外层，结果，柳暗花明又一村，AC了！</p><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>, P = <span class="number">19260817</span>, D = (<span class="number">1</span> &lt;&lt; <span class="number">18</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> mp[N][N];</span><br><span class="line"><span class="keyword">int</span> f[N][D][<span class="number">2</span>]; <span class="comment">//f[i][j][w]:走到i,当前点集为j,价值为w的方案数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">have</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((x &gt;&gt; (y - <span class="number">1</span>)) &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x | (<span class="number">1</span> &lt;&lt; (y - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_s</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">have</span>(x, i))</span><br><span class="line">res += i;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//debug</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; <span class="string">&quot; have&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">have</span>(x, i))</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c, d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">d = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">++mp[u][v], ++mp[v][u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="comment">//每个点只走一次,故没有自环</span></span><br><span class="line">mp[i][i] = <span class="number">0</span>;</span><br><span class="line">f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, sum; j &lt;= d; ++j) <span class="comment">//将第二层循环移到最外</span></span><br><span class="line">&#123;</span><br><span class="line">sum = <span class="built_in">get_s</span>(j);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="comment">//到n就停止,故不可能从n走到其它点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">have</span>(j, i))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">have</span>(j, k))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!mp[i][k])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sum &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>] = ((LL)f[i][j][<span class="number">0</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>]) % P;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>] = ((LL)f[i][j][<span class="number">1</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>]) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>] = ((LL)f[i][j][<span class="number">1</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>]) % P;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>] = ((LL)f[i][j][<span class="number">0</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>]) % P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>] = ((LL)f[i][j][<span class="number">1</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>]) % P;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>] = ((LL)f[i][j][<span class="number">0</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>]) % P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; ++i)</span><br><span class="line">ans = (ans + f[n][i][c]) % P;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉这个状压比较简单，毕竟连我这种<strong>奆弱</strong>都可以做</p><p>说句题外话，找样例的时候虽然样例没找到，但发现GodFly是“牛虻”的意思</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 随机跳题都给我跳些神马玩意&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="状态压缩" scheme="https://dyd-true.github.io/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>luoguP2441 角色属性树</title>
    <link href="https://dyd-true.github.io/2021/12/06/luoguP2441-%E8%A7%92%E8%89%B2%E5%B1%9E%E6%80%A7%E6%A0%91/"/>
    <id>https://dyd-true.github.io/2021/12/06/luoguP2441-%E8%A7%92%E8%89%B2%E5%B1%9E%E6%80%A7%E6%A0%91/</id>
    <published>2021-12-06T13:35:36.000Z</published>
    <updated>2021-12-24T14:01:27.688Z</updated>
    
    <content type="html"><![CDATA[<p> 暴力出奇迹</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P2441">角色属性树</a></p><ol><li>第一眼看过去想的是分解质因数后建图处理，一看 $a \le 2^{31} - 1$ 完蛋</li></ol><p>再仔细端详了一下数据， $n \le 2 \times 10^5$ ，估计是 $O(n \log n)$ 的算法，  $\text{修改次数} \le 50$ 似乎在提示我们暴力修改，估计是个树上倍增的算法，但具体实现还没想好，就被说明/提示的最后一行吸引：<strong>本题测试数据随机，可能是假题</strong>，随机生成，也就是说……暴力的<strong>期望</strong>复杂度也是 $O(n \log n)$ ，<del>本着能偷懒就偷懒的心态</del>，含泪AC了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> w[N], fa[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> y == <span class="number">0</span> ? x : <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">gcd</span>(w[x], a) != <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ask</span>(fa[x], a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k, op, u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt; n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), fa[y] = x;</span><br><span class="line"><span class="keyword">while</span> (k--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;op, &amp;u);</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ask</span>(fa[u], w[u]));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来看题解，也有树上倍增lca的做法，但是那样要维护区间乘积了，需要打高精，直接放弃</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 暴力出奇迹&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="lca" scheme="https://dyd-true.github.io/tags/lca/"/>
    
    <category term="倍增" scheme="https://dyd-true.github.io/tags/%E5%80%8D%E5%A2%9E/"/>
    
    <category term="素数" scheme="https://dyd-true.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
    <category term="最大公约数" scheme="https://dyd-true.github.io/tags/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>最小表示法</title>
    <link href="https://dyd-true.github.io/2021/12/06/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
    <id>https://dyd-true.github.io/2021/12/06/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/</id>
    <published>2021-12-06T10:57:09.000Z</published>
    <updated>2021-12-24T14:25:35.538Z</updated>
    
    <content type="html"><![CDATA[<p> 简单的缓和一下</p><span id="more"></span><h1 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>给定一个字符串 $S$ ，通过将 $S$ 循环移动可以得到至多 $n$ 个不同的串，其中 $n = |S|$ ，例如： $S = bcacd$ ，它循环移动一位可以得到 $S’ = cacdb$ （即把最后第一位放到最后）</p><p>对于得到的所有不同的字符串，字典序最小的串就叫原串的<strong>最小表示法</strong>，在上面的例子中， $S$ 的最小表示法为 $acdbc$ </p><h2 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h2><p>最小表示法的求法比较简单，把字符串复制一倍接在原串后面（破环成链），然后用一个双指针 $i, j$ 指向两个不同串的开头，初始时 $i = 1, j = 2$ （假设字符串从1开始）</p><p>然后暴力找到一个最小的非负整数 $k$ 满足 $S_{i + k} \ne S_{j + k}$ ：</p><ol><li>若 $S_{i + k} &lt; S_{j + k}$ ，则说明 $j \sim j + k$ 之间的所有位置开头的字符串都不是最小表示，因为它们都可以找到 $i \sim i + k$ 之间对应的开头的字符串，两个字符串到 $j + k$ （ $i + k$ ）前都相同，而 $S_{i + k} &lt; S_{j + k}$ ，故直接令 $j = j + k + 1$ </li><li>若 $S_{i + k} &gt; S_{j + k}$ ，同理令 $i = i + k + 1$ </li></ol><p>有几个特判：</p><ol><li> $i = j$ 时，让 $i = i + 1$ （加 $j$ 也行）</li><li>  $k &gt; n$ 时，说明两个开头的串一样，画图不难发现此时 $i \sim j$ 一定时一个循环节，而 $i \sim j$ 我们一定遍历过，所以直接结束</li></ol><p>完成后 $\min(i, j)$ 即为最小表示法的开头</p><p>时间复杂度为 $O(n)$ </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_min</span><span class="params">(<span class="keyword">char</span> *s)</span> <span class="comment">//求串s的最小表示,完成后答案存在s[k...k + len - 1]中</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">s[len + i] = s[i];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">2</span>, k;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= len &amp;&amp; j &lt;= len)</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (k &lt;= len &amp;&amp; s[i + k] == s[j + k])</span><br><span class="line">++k;</span><br><span class="line"><span class="keyword">if</span> (k &gt; len)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (s[i + k] &gt; s[j + k])</span><br><span class="line">i += k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">j += k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i == j)</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">k = <span class="built_in">min</span>(i, j);</span><br><span class="line">s[k + len] = <span class="number">0</span>; <span class="comment">//加上结束符</span></span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数中：</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">get_min</span>(a);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 简单的缓和一下&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="最小表示法" scheme="https://dyd-true.github.io/tags/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/06总结</title>
    <link href="https://dyd-true.github.io/2021/12/06/test2021-12-06%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/06/test2021-12-06%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-06T10:08:03.000Z</published>
    <updated>2021-12-24T14:10:19.590Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="da24df42867f600101197918d2fd144fc62fb9e6296df5c9f16af933be6f08e7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">D'y'd は、パスワードを入力するように求められます</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">你以为的不是你以为的，而是你以为的</summary>
    
    
    
    <category term="test" scheme="https://dyd-true.github.io/categories/test/"/>
    
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="点分治" scheme="https://dyd-true.github.io/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
    <category term="启发式合并" scheme="https://dyd-true.github.io/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
    <category term="二分图" scheme="https://dyd-true.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
</feed>
