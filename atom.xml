<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dyd&#39;s Blog</title>
  
  <subtitle>He who has a strong enough why can bear almost any how.</subtitle>
  <link href="https://dyd-true.github.io/atom.xml" rel="self"/>
  
  <link href="https://dyd-true.github.io/"/>
  <updated>2021-12-20T14:17:51.566Z</updated>
  <id>https://dyd-true.github.io/</id>
  
  <author>
    <name>Dyd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>后缀数组</title>
    <link href="https://dyd-true.github.io/2021/12/20/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    <id>https://dyd-true.github.io/2021/12/20/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</id>
    <published>2021-12-20T10:46:41.000Z</published>
    <updated>2021-12-20T14:17:51.566Z</updated>
    
    <content type="html"><![CDATA[<p> 字符串总是让人头疼</p><span id="more"></span><h1 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h1><h2 id="前置知识：基数排序"><a href="#前置知识：基数排序" class="headerlink" title="前置知识：基数排序"></a>前置知识：基数排序</h2><p>首先保证值域为 $[0, n] \wedge \mathbb{Z}$ </p><p>然后统计每个数有多少个，记作 $cnt[i]$ ，然后将 $cnt$ 求出前缀和，此时 $cnt[i]$ 就是“小于等于 $i$ 的数的个数”，倒序扫描每一个数（倒序是为了<strong>使排序稳定</strong>），扫到 $i$ 就令 $i$ 的排名为 $cnt[i]$ ，并 $–cnt[i]$ ，由此就可以做到<strong>单关键字基数排序</strong>，时间为 $O(n)$ </p><p>对于双关键字，我们先对第二关键字进行排序，然后不管第二关键字，只对第一关键字进行基数排序，由于基数排序是稳定的，所以当第一关键字相同时，第二关键字仍然是有序的</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>后缀数组是一种针对字符串的数据结构，为了方便，我们统一令字符串的<strong>下标从1开始</strong></p><ul><li>字符串：由字符组成的序列，用大写字母表示，如 $T = ababbcbac$ ，同时记其长度为 $len$ </li><li>子串：一个字符串的某一段，记作 $T[2, 5] = babb$ ，其中 $[2, 5]$ 是下标区间</li><li>后缀：一个长度为 $len$ 的字符串有  $len$ 个后缀子串，为 $\{S \mid S = T[i, len], i \in [1, n]\}$ ，为了方便，称从 $i$ 开头的后缀为“第 $i$ 个后缀”，记作 $suf(i)$ （suffix），即 $suf(i) = T[i, len]$ </li><li>后缀数组 $SA[i]$ ：排名第 $i$ 的后缀是 $suf(SA[i])$ ，注意<strong>区别“排名为 $i$ ”和“第 $i$ 个后缀”</strong></li><li>排名数组 $rk[i]$ ：第 $i$ 个后缀的排名是 $rk[i]$ </li><li> $hei[i]$ （height）： $suf(SA[i])$ 与 $suf(SA[i - 1])$ 的LCP（最长公共前缀），<strong>可指字符串，也可指长度</strong></li><li> $lcp(i, j)$ ： $suf(SA[i])$ 和 $suf(SA[j])$ 的LCP</li><li> $h(i)$ ：第 $i$ 个后缀与排名在其前面的第一个后缀的LCP，即 $h(i) = height[rk[i]]$ </li></ul><h2 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h2><h3 id="SA-rk"><a href="#SA-rk" class="headerlink" title="SA/rk"></a>SA/rk</h3><p>求后缀数组 $SA$ 一般用<strong>倍增算法</strong>求出（同时 $rk$ 也就求出来了），时间复杂度为 $O(n \log n)$ </p><p>首先我们想如何对 $\{suf(i)\}$ 排序，由整数排序的方法我们知道，至少要进行 $n \log n$ 次比较，但是，字符串比较的时间复杂度为 $O(n)$ ，故直接比较时间为 $O(n^2 \log n)$ </p><p>不难想到，如果能让字符串对应上数字（且大小关系对应）不就可以直接比较了吗？倍增算法就基于此，其流程如下：</p><ol><li>假设我们要比较 $\{S_i[l, r]\}$ ，取 $mid = \frac{l + r}{2}$ ，递归比较 $\{S_i[l, mid]\}$ 和 $\{S_i[mid + 1, r]\}$ ；递归的边界是当 $S_i[l, r]$ 只有一个字符，可以直接排序</li><li>假设递归完毕，则 $\{S_i[l, mid]\}$ 和 $\{S_i[mid + 1, r]\}$ 已经有序，扫一遍可以把他们离散化到整数，设 $S_i[p, q] \rightarrow A_i[p, q]$ ，现在 $S_i[l, r]$ 被变成了整数二元组 $(A_i[l, mid], A_i[mid + 1, r])$ ，直接排序即可</li></ol><p>以上会递归 $\log n$ 层，每次基数排序为 $O(n)$ ，总时间复杂度为 $O(n \log n)$ </p><p>具体实现时和FFT一样常用循环代替递归</p><h3 id="hei"><a href="#hei" class="headerlink" title="hei"></a>hei</h3><p>首先证明三个引理：</p><p><strong>引理1</strong>：<br>$$<br>lcp(i, j) = \min(lcp(i, k), lcp(k, j)),i \le k \le j<br>$$<br>即对于任意的 $i \le k \le j$ ，排名第 $i$ 的后缀和排名第 $j$ 的后缀的LCP就是排名第 $k$ 的后缀和它们分别的LCP中较小值</p><p><img src="https://s2.loli.net/2021/12/20/fOrihaHRVncWGz6.png" alt="引理1"></p><p>证明：</p><p>排名为 $i$ 的后缀为 $S_i$ ，设 $T = \min(lcp(i, k), lcp(k, j)), R = lcp(i, j)$ </p><p>首先若 $R &lt; T$ ，那么由于 $lcp(i, k) \ge T$ ，所以 $i$ 的一定有前缀 $T$ ，而 $j$ 也有前缀 $T$ ，则 $lcp(i, j) = T$ ，矛盾，故 $lcp(i, j) \ge T$ </p><p>然后若 $R &gt; T$ ，那么因为 $S_i[1, R] = S_j[1, R]$ ，又z因为排名， $S_i[1, R] \le S_k[1, R] \le S_j[1, R]$ ，则 $S_i[1, R] = S_k[1, R] = S_j[1, R]$ ，则 $T = R$ ，矛盾</p><p>综上，$T = R$ 引理得证</p><p><strong>引理2</strong>：<br>$$<br>lcp(i, j) = \min(lcp(i, i + 1), lcp(i + 1, i + 2), …, lcp(j - 1, j)), i \le j<br>$$<br>即对于任意的 $i \le j$ 排名第 $i$ 的后缀和排名第 $j$ 的后缀的LCP就是它们之间的后缀（包括它们）中相邻两个的LCP的最小值</p><p>证明：</p><p>由引理1，有 $\min(lcp(i, i + 1), lcp(i + 1, i + 2)) = lcp(i, i + 2)$ 不断以此类推，即得引理2</p><p>这个引理也可以表示为：<br>$$<br>lcp(i, j) = \min_{i &lt; k \le j} \{ hei[k]\}<br>$$<br>用这个引理可以<strong>将后缀的LCP转化为RMQ</strong>，ST表可以做到 $O(1)$ </p><p><strong>引理3</strong>：<br>$$<br>hi(i) \ge hi(i - 1) - 1<br>$$<br> $hi(i - 1) \le 1$ 时显然成立</p><p>当 $hi(i - 1) &gt; 1$ 时，不妨设 $k = SA[rk[i - 1] - 1]$ ，即排名在第 $i$ 个后缀（不是排名为 $i$ 的后缀）前面的第一个后缀是第 $k$ 个后缀，同理设 $r = SA[rk[i] - 1]$ </p><p>有 $hi(i - 1) = lcp(suf(i - 1), suf(k))$ ，将这两个字符串各自去掉第一个字符，因为它们的LCP大于1，所以这个字符一定相等，则有 $lcp(suf(k + 1), suf(i)) = hi(i - 1) - 1$ 且 $suf(k + 1)$ 排在 $suf(i)$ 前面，则由引理1有<br>$$<br>\begin{aligned}<br>hi(i - 1) - 1<br>&amp;= lcp(suf(k + 1), suf(i))\\<br>&amp;= \min(lcp(suf(k + 1), suf(r)), lcp(suf(r), suf(i)))\\<br>&amp;\le lcp(suf(r), suf(i))\\<br>&amp;= hi(i)<br>\end{aligned}<br>$$<br>故 $hi(i) \ge hi(i - 1) - 1$ </p><p>有了上面三个引理，我们来看如何求 $hei$ </p><p>我们枚举 $1 \le i \le n$ ，计算 $hei[rk[i]]$ </p><p>对于 $rk[i] = 1$ ，不必管，因为 $hei[1] = 0$ ，否则令 $k = hi(i - 1) - 1$ （特别的，若 $hi(i - 1) \le 1$ ，就让 $k = 0$ ），然后暴力求 $k$ 还能向后走多少，易知时间为 $O(n)$  </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.acwing.com/problem/content/2717/">模板</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(x, y, z) for (int (x) = (y), __END__ = (z); (x) &lt;= __END__; ++(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x, y, z) for (int (x) = (y), __END__ = (z); (x) &gt;= __END__; --(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> peri(x, y, z, ch) for (int (x) = (y), __END__ = (z); (x) &lt;= __END__; (ch))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> sa[N], rk[N], hei[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">STC <span class="keyword">int</span> x[N], y[N], c[N]; <span class="comment">//排序用,第一关键字,第二关键字,cnt</span></span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, n)</span><br><span class="line">++c[x[i] = s[i]]; <span class="comment">//第一次只有一个字符,不必离散化</span></span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">2</span>, m)</span><br><span class="line">c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="built_in">rep</span> (i, n, <span class="number">1</span>)</span><br><span class="line">sa[c[x[i]]--] = i;</span><br><span class="line"><span class="built_in">peri</span> (k, <span class="number">1</span>, n, k &lt;&lt;= <span class="number">1</span>) <span class="comment">//k枚举关键字长度,合并后长度应为2k</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>; <span class="comment">//记录离散化后的值域</span></span><br><span class="line"><span class="comment">//先以第二关键字排序</span></span><br><span class="line"><span class="built_in">per</span> (i, n - k + <span class="number">1</span>, n) <span class="comment">//没有第二关键字的牌最前</span></span><br><span class="line">y[++num] = i;</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, n)</span><br><span class="line"><span class="keyword">if</span> (sa[i] &gt; k)</span><br><span class="line">y[++num] = sa[i] - k;</span><br><span class="line"><span class="comment">//以第一关键字排序</span></span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, m)</span><br><span class="line">c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, n)</span><br><span class="line">++c[x[i]];</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">2</span>, m)</span><br><span class="line">c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="built_in">rep</span> (i, n, <span class="number">1</span>)</span><br><span class="line">sa[c[x[y[i]]]--] = y[i], y[i] = <span class="number">0</span>; <span class="comment">//这里清空y实际上是清空x,应为后面交换了</span></span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="comment">//将排好序的字符串离散化</span></span><br><span class="line">x[sa[<span class="number">1</span>]] = <span class="number">1</span>, num = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">2</span>, n)</span><br><span class="line">x[sa[i]] = (y[sa[i]] == y[sa[i - <span class="number">1</span>]] &amp;&amp; y[sa[i] + k] == y[sa[i - <span class="number">1</span>] + k]) ? num : ++num;</span><br><span class="line"><span class="keyword">if</span> (num == n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">m = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, n)</span><br><span class="line">rk[sa[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_hei</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rk[i] == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (k)</span><br><span class="line">--k;</span><br><span class="line"><span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (i + k &lt;= n &amp;&amp; j + k &lt;= n &amp;&amp; s[i + k] == s[j + k])</span><br><span class="line">++k;</span><br><span class="line">hei[rk[i]] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">strlen</span>(s + <span class="number">1</span>), m = <span class="number">122</span>;</span><br><span class="line"><span class="built_in">get_sa</span>();</span><br><span class="line"><span class="built_in">get_hei</span>();</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, n)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, n)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, hei[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>SA的应用主要是通过引理2来实现的</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 字符串总是让人头疼&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="分治" scheme="https://dyd-true.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="数据结构" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="后缀数组,SA" scheme="https://dyd-true.github.io/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-SA/"/>
    
    <category term="LCP" scheme="https://dyd-true.github.io/tags/LCP/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/20总结</title>
    <link href="https://dyd-true.github.io/2021/12/20/test2021-12-20%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/20/test2021-12-20%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-20T07:52:30.000Z</published>
    <updated>2021-12-20T13:12:25.943Z</updated>
    
    <content type="html"><![CDATA[<p> 死磕一道题是很危险的……</p><span id="more"></span><h1 id="test2021-12-20总结"><a href="#test2021-12-20总结" class="headerlink" title="test2021/12/20总结"></a>test2021/12/20总结</h1><p>又是连着考……</p><h2 id="题目、成绩和题解"><a href="#题目、成绩和题解" class="headerlink" title="题目、成绩和题解"></a>题目、成绩和题解</h2><p><a href="./day4.pdf">题目</a></p><p><a href="./res.pdf">成绩</a></p><p><a href="./solution.pdf">题解</a></p><h2 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>吸取昨天考试的教训，认真看T1</p><p>第一遍又<strong>没读懂题</strong>，但这次没有直接去看T2，而是自己手打了spj，大概读懂了题（主要是要先求和，再加绝对值），但是没思路，看数据范围也想不出来</p><p>没去看后两题，觉得至少这题要有个不错的暴力，感觉<strong>答案具有单调性</strong>，就想二分判定，具体思路是先<strong>统计每行、列的和</strong>，然后二分， $check(x)$ 就尝试暴搜，一算时间 $O((R-L)^{n^2}\log S)$ （ $S$ 是二分的域的大小）， $n \le 200, 0 \le L \le R \le 1000$ ，这不死挂吗？在看数据，有20% $n \le 20$ ，“另有”20% $R \le 1$ ，我diao，要是两个在一起就好了，但是不在一起，所有<strong>一分没有</strong>，此时时间已经过去快1h了，简直离了大谱</p><p>纠结了一下还是磕T1，没去看后面的题</p><p>换思路，想着给了 $a_{i, j} \le 1000$ 应该有用，但就是不知道怎么用</p><p>觉得两个矩阵+值域太麻烦了，想着能不能先让 $\{a_{i, j}\}$ 每个数都减 $L$ ，然后再让 $\{b_{i, j}\}$ 一点点加，<strong>感觉这样比较好处理 $b_{i, j} \in [L, R]$ 的条件</strong></p><p>行、列和的想法还是保留下来了，最后就是要让行、列和的绝对值的最大值最小（读起来有点绕），发现每一次让 $b_{i, j}$ 增加（其实就是让 $a_{i, j}$ 减少）<strong>只会修改 $n + m$ 个行列和中的两个</strong>，于是不难想到每次取出和最大的行 $x$ 、和最大的列 $y$ ，让 $b_{x, y}$ 增加，使得两个和都减少，这里我贪了手心，让 $b_{x, y}$ 增加 $\min(sum(x), sum(y))$ </p><p>但负数的情况不是很好处理，因为我们要的是绝对值最小，负数太小了也不行，我当时的想法是对于正数 $u$ 和负数 $v$ （注意这里取出负数了就说明其它数都是负数，因为 $v$ 要满足“最大”），找到 $k$ 使得 $u - k = k - v$ ，即 $k = \frac{u + v}{2}$ （注意特判 $k$ 要大于0），然后让对于的 $b$ 加 $k$ </p><p>想到这个思路的时候都已经是10：36了，很快打完了代码，<strong>用单调队列分别维护行、列、每次都取出最大值</strong>，理论上来讲，每个取出两个正数至少会有一个变成0，取出的负数改一次就不会再入队了，故时间是 $O(n^2\log n^2)$ ，结果——大样例WA了</p><p>心中一万头***奔过，想到有爆0的危险，决定先把后两题暴力打了（如果是重要的考试估计我心态就炸了） </p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>一眼就感觉是dp，但看了一下gcd不好处理，暴力也不好打，跳</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>第一反应线段树，仔细一想因为操作2只能一个一个改，线段树暴力是 $n^2\log n$ 还不如 $n^2$ 模拟，于是果断打模拟</p><h3 id="T1-1"><a href="#T1-1" class="headerlink" title="T1"></a>T1</h3><p>又会到T1，静下心来好好调</p><p>首先很快发现思路的一个漏洞——设取出的最大的行是 $x$ 、最大的列是 $y$ ，若 $b_{x, y} = R$ ，那么是不能再让 $b_{x, y}$ 增加了的，我的做法是直接从队列中删掉了 $x$ 和 $y$ ，但这样就没有了其它行（非 $x$ 的行）来跟新 $y$ 和其它列来跟新 $x$ 的情况</p><p>于是果断换，把原来的两个优先队列改成一个，存储坐标  $(x, y)$ ，重载小于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">IL <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> sumi[x] == sumi[t.x] ? sumj[y] &lt; sumj[t.y] : sumi[x] &lt; sumi[t.x];</span><br><span class="line">&#125;</span><br><span class="line">&#125; ;</span><br></pre></td></tr></table></figure><p>改完还是不对，换了个错法，于是发现问题在于每次<strong>取出后 $sumi,sumj$ 都是会变的</strong>，而队列中的元素是按之前的 $sumi,sumj$ 排的序，这显然不对</p><p>暴力的解决办法是不用优先队列，改用数组，每次暴力扫描最大值取，时间复杂度为 $O(n^3)$ ，考场上因为玄学原因，大样例TLE了</p><p>于是我又只能改回原来两个优先队列的方法，至于处理漏洞，想到的是先**用一个栈存着  $y$ **，然后从队列中删掉了 $y$ ，取下一个最大，如此循环，有两种情况：</p><ol><li> 取出了某个 $y$ 使 $b_{x, y} &lt; R$ ，那么直接取操作即可</li><li>取空了队列都没有满足条件的 $y$ ，说明 $x$ 不可能再跟新了，把栈中的数放回队列，并从 $x$ 所在队列中删掉 $x$ </li></ol><p>后来调错是发现：应该是取 $x, y$ 中最大不动，栈存小的那个</p><p>时间没认真分析，但大样例跑得飞快，而且表面上对了，可是用我打的spj一跑——又WA了，问题出在负数那里，我让负数变的过于小了！</p><p>还有问题！我当时万念俱灰，心态真的爆炸了</p><p>又是冷静了一下，抱着必死的决心再调，终于发现了问题：我在找到最大值时总是让其中一个为0（先别管负数），但其实有可能<strong>最大值减1了就不是最大值了</strong>，所以，每次只能减一</p><p>至此 $a_{i, j} \le 1000$ 终于有点用了，打完已经是只有5、6min了</p><p>加了点注释的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(x, y, z) for (int (x) = (y), __END__ = (z); (x) &lt;= __END__; ++(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x, y, z) for (int (x) = (y), __END__ = (z); (x) &gt;= __END__; --(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _abs(x) ((x) &gt;= 0 ? (x) : -(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _max(x, y) ((x) &gt;= (y) ? (x) : (y))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200</span> + <span class="number">5</span>, A = <span class="number">1000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, L, R;</span><br><span class="line"><span class="keyword">int</span> a[N][N], b[N][N];</span><br><span class="line"><span class="keyword">int</span> sumi[N], sumj[N]; <span class="comment">//行、列和</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> id, sum;</span><br><span class="line">IL <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> sum &lt; t.sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125; qt[N * N]; <span class="comment">//栈用于临时存放</span></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">priority_queue&lt;Node&gt; qi, qj;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="function">IL <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//检查加了1后答案是否更优</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _max(_abs(x - <span class="number">1</span>), _abs(y - <span class="number">1</span>)) &gt;= _max(_abs(x), _abs(y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;mat.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;mat.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, n)</span><br><span class="line"><span class="built_in">per</span>(j, <span class="number">1</span>, m)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;L, &amp;R);</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, n)</span><br><span class="line"><span class="built_in">per</span>(j, <span class="number">1</span>, m)</span><br><span class="line">&#123;</span><br><span class="line">a[i][j] -= L;</span><br><span class="line">b[i][j] = L;</span><br><span class="line">sumi[i] += a[i][j];</span><br><span class="line">sumj[j] += a[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, n)</span><br><span class="line">qi.<span class="built_in">push</span>((Node)&#123;i, sumi[i]&#125;);</span><br><span class="line"><span class="built_in">per</span> (j, <span class="number">1</span>, m)</span><br><span class="line">qj.<span class="built_in">push</span>((Node)&#123;j, sumj[j]&#125;);</span><br><span class="line">Node x, y;</span><br><span class="line"><span class="keyword">while</span> (!qi.<span class="built_in">empty</span>() &amp;&amp; !qj.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">x = qi.<span class="built_in">top</span>(), qi.<span class="built_in">pop</span>();</span><br><span class="line">y = qj.<span class="built_in">top</span>(), qj.<span class="built_in">pop</span>();</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x.sum &gt; y.sum) <span class="comment">//保留最大</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!qj.<span class="built_in">empty</span>() &amp;&amp; (b[x.id][y.id] &gt;= R || <span class="built_in">check</span>(x.sum, y.sum)))</span><br><span class="line">&#123;</span><br><span class="line">qt[++cnt] = y;</span><br><span class="line">y = qj.<span class="built_in">top</span>(), qj.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (cnt) <span class="comment">//找到满足的y后就把其它的y放回</span></span><br><span class="line">qj.<span class="built_in">push</span>(qt[cnt--]);</span><br><span class="line"><span class="keyword">if</span> (b[x.id][y.id] &gt;= R || <span class="built_in">check</span>(x.sum, y.sum))</span><br><span class="line"><span class="keyword">continue</span>; <span class="comment">//不放回x</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!qi.<span class="built_in">empty</span>() &amp;&amp; (b[x.id][y.id] &gt;= R || <span class="built_in">check</span>(x.sum, y.sum)))</span><br><span class="line">&#123;</span><br><span class="line">qt[++cnt] = x;</span><br><span class="line">x = qi.<span class="built_in">top</span>(), qi.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (cnt)</span><br><span class="line">qi.<span class="built_in">push</span>(qt[cnt--]);</span><br><span class="line"><span class="keyword">if</span> (b[x.id][y.id] &gt;= R || <span class="built_in">check</span>(x.sum, y.sum))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每次只减1</span></span><br><span class="line">--sumi[x.id], --sumj[y.id];</span><br><span class="line">--x.sum, --y.sum;</span><br><span class="line">++b[x.id][y.id];</span><br><span class="line">qi.<span class="built_in">push</span>(x), qj.<span class="built_in">push</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, n)</span><br><span class="line">ans = _max(ans, _abs(sumi[i]));</span><br><span class="line"><span class="built_in">per</span> (j, <span class="number">1</span>, m)</span><br><span class="line">ans = _max(ans, _abs(sumj[j]));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, n)&#123;</span><br><span class="line"><span class="built_in">per</span>(j, <span class="number">1</span>, m)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i][j]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考后分析了一下时间，大概是 $O(n^2a\log n^2 \times \xi)$  ，这个 $\xi$ 是 $60 \sim 83$ 行处理漏洞的时间，表面上看它扫了一遍队列这是很耗时间的，但实际上，它每扫到一个点，就意味着有一个 $b_{i, j}$ 已经完成，它扫的越多，反而意味着时间更优了（因为完成的点就不必再管了），而且还有 $continue$ 相当于一次性完成了 $n$ 个点，所以说，<strong>这个 $\xi$ 不仅不会耗时，反而还是优化</strong></p><h2 id="成绩"><a href="#成绩" class="headerlink" title="成绩"></a>成绩</h2><p>考完当场跑的时候T1没开spj，爆0，心态爆炸（<del>第三次了，今天真倒霉</del>）</p><p>后来开了spj，总分100 + 0 + 40 = 140</p><h2 id="改题"><a href="#改题" class="headerlink" title="改题"></a>改题</h2><h3 id="T1-2"><a href="#T1-2" class="headerlink" title="T1"></a>T1</h3><p>看了题解，二分+网络流，发现自己网络流（尤其是上下界可行流）遗忘严重，不管反正我乱搞过去了（而且跑得飞快，他们网络流好像是当前弧优化的三种不同打法对时间影响很大，网络流比较玄学嘛）</p><h3 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a>T3</h3><p>难点在操作2，题解讲的很清楚了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DB double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(x, y, z) for (int (x) = (y), __END__ = (z); (x) &lt;= __END__; ++(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x, y, z) for (int (x) = (y), __END__ = (z); (x) &gt;= __END__; --(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LineTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line">LL mx, mn, sum, add;</span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(x) tr[(x)].l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(x) tr[(x)].r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mx(x) tr[(x)].mx</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mn(x) tr[(x)].mn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sum(x) tr[(x)].sum</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(x) tr[x].add</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mid (tr[u].l + tr[u].r &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (u &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc (u &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">mx</span>(u) = <span class="built_in">max</span>(<span class="built_in">mx</span>(lc), <span class="built_in">mx</span>(rc));</span><br><span class="line"><span class="built_in">mn</span>(u) = <span class="built_in">min</span>(<span class="built_in">mn</span>(lc), <span class="built_in">mn</span>(rc));</span><br><span class="line"><span class="built_in">sum</span>(u) = <span class="built_in">sum</span>(lc) + <span class="built_in">sum</span>(rc);</span><br><span class="line">&#125;</span><br><span class="line">IL <span class="keyword">void</span> _add(<span class="keyword">int</span> u, LL d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(u) += d;</span><br><span class="line"><span class="built_in">mx</span>(u) += d;</span><br><span class="line"><span class="built_in">mn</span>(u) += d;</span><br><span class="line"><span class="built_in">sum</span>(u) += d * (<span class="built_in">r</span>(u) - <span class="built_in">l</span>(u) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">add</span>(u) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">_add(lc, <span class="built_in">add</span>(u));</span><br><span class="line">_add(rc, <span class="built_in">add</span>(u));</span><br><span class="line"><span class="built_in">add</span>(u) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">tr[u] = (Node)&#123;l, r, a[l], a[l], a[l], <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">tr[u] = (Node)&#123;l, r, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> mid = Mid;</span><br><span class="line"><span class="built_in">build</span>(lc, l, mid), <span class="built_in">build</span>(rc, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">mdf_add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, LL d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">l</span>(u) &gt;= l &amp;&amp; <span class="built_in">r</span>(u) &lt;= r)</span><br><span class="line"><span class="keyword">return</span> _add(u, d);</span><br><span class="line"><span class="built_in">down</span>(u);</span><br><span class="line"><span class="keyword">int</span> mid = Mid;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line"><span class="built_in">mdf_add</span>(lc, l, r, d);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid)</span><br><span class="line"><span class="built_in">mdf_add</span>(rc, l, r, d);</span><br><span class="line"><span class="built_in">up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> u, LL d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">mn</span>(u) - <span class="built_in">floor</span>((DB)<span class="built_in">mn</span>(u) / d) == <span class="built_in">mx</span>(u) - <span class="built_in">floor</span>((DB)<span class="built_in">mx</span>(u) / d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">cu</span><span class="params">(<span class="keyword">int</span> u, LL d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">mn</span>(u) = <span class="built_in">mx</span>(u) = <span class="built_in">sum</span>(u) = <span class="built_in">floor</span>((DB)<span class="built_in">mn</span>(u) / d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">mdf_cu</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, LL d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">l</span>(u) &gt;= l &amp;&amp; <span class="built_in">r</span>(u) &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mx</span>(u) &gt; <span class="number">0</span> || <span class="built_in">mn</span>(u) &lt; <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">l</span>(u) == <span class="built_in">r</span>(u))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cu</span>(u, d);</span><br><span class="line"><span class="built_in">down</span>(u);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(u, d))</span><br><span class="line"><span class="keyword">return</span> _add(u, <span class="built_in">floor</span>((DB)<span class="built_in">mn</span>(u) / d) - <span class="built_in">mn</span>(u));</span><br><span class="line"><span class="keyword">int</span> mid = Mid;</span><br><span class="line"><span class="built_in">mdf_cu</span>(lc, l, r, d);</span><br><span class="line"><span class="built_in">mdf_cu</span>(rc, l, r, d);</span><br><span class="line"><span class="built_in">up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">down</span>(u);</span><br><span class="line"><span class="keyword">int</span> mid = Mid;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line"><span class="built_in">mdf_cu</span>(lc, l, r, d);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid)</span><br><span class="line"><span class="built_in">mdf_cu</span>(rc, l, r, d);</span><br><span class="line"><span class="built_in">up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL LL <span class="title">work</span><span class="params">(LL x, LL y, <span class="keyword">int</span> ty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ty == <span class="number">1</span> ? <span class="built_in">min</span>(x, y) : (x + y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL LL <span class="title">ask</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">l</span>(u) &gt;= l &amp;&amp; <span class="built_in">r</span>(u) &lt;= r)</span><br><span class="line"><span class="keyword">return</span> ty == <span class="number">1</span> ? <span class="built_in">mn</span>(u) : <span class="built_in">sum</span>(u);</span><br><span class="line"><span class="built_in">down</span>(u);</span><br><span class="line"><span class="keyword">int</span> mid = Mid;</span><br><span class="line">LL res = (ty == <span class="number">1</span> ? INF : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">res = <span class="built_in">work</span>(res, <span class="built_in">ask</span>(lc, l, r, ty), ty);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid)</span><br><span class="line">res = <span class="built_in">work</span>(res, <span class="built_in">ask</span>(rc, l, r, ty), ty);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125; lt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;market.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;market.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, n)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">lt.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">while</span> (q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> op, l, r;</span><br><span class="line">LL x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;l, &amp;r);</span><br><span class="line">++l, ++r;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">lt.<span class="built_in">mdf_add</span>(<span class="number">1</span>, l, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">lt.<span class="built_in">mdf_cu</span>(<span class="number">1</span>, l, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, lt.<span class="built_in">ask</span>(<span class="number">1</span>, l, r, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, lt.<span class="built_in">ask</span>(<span class="number">1</span>, l, r, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h3><p>杜教筛不会，鸽了鸽了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 死磕一道题是很危险的……&lt;/p&gt;</summary>
    
    
    
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="线段树" scheme="https://dyd-true.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="网络流" scheme="https://dyd-true.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="莫比乌斯反演" scheme="https://dyd-true.github.io/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
    <category term="二分" scheme="https://dyd-true.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="杜教筛" scheme="https://dyd-true.github.io/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
    <category term="优先队列" scheme="https://dyd-true.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>码风</title>
    <link href="https://dyd-true.github.io/2021/12/19/%E7%A0%81%E9%A3%8E/"/>
    <id>https://dyd-true.github.io/2021/12/19/%E7%A0%81%E9%A3%8E/</id>
    <published>2021-12-19T13:32:03.000Z</published>
    <updated>2021-12-20T14:01:51.531Z</updated>
    
    <content type="html"><![CDATA[<p> 记录一下自己的码风</p><span id="more"></span><h1 id="马蜂窝"><a href="#马蜂窝" class="headerlink" title="马蜂窝"></a>马蜂窝</h1><h2 id="远古时期"><a href="#远古时期" class="headerlink" title="远古时期"></a>远古时期</h2><p>初学OI</p><ul><li>热爱万能头</li><li>cin、cout</li><li>懒得打空格</li><li>不爱const</li><li>不会STL</li><li>不用define</li><li>括号不换行，不删能删的括号(后来又删了)</li><li>爱用char不用string</li><li>空函数也要打返回值</li></ul><p>没什么意义的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100000005</span>],c,d;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">char</span> e[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">100</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(x+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;a[<span class="number">2</span>]&gt;&gt;b[<span class="number">100</span>];</span><br><span class="line">cout&lt;&lt;c+d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[i<span class="number">-1</span>])&#123;</span><br><span class="line">b[j]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中世纪"><a href="#中世纪" class="headerlink" title="中世纪"></a>中世纪</h2><ul><li>有点爱压行</li><li>还是不空格</li><li>空函数还是要返回</li><li>会用一点点注释了</li><li>爱用const</li><li>爱用typedef</li><li>会用inline和read等了</li><li>不用万能头了（听说慢）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">2e5</span>+<span class="number">5</span>,N=<span class="number">5005</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fa[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="comment">//x-y权值为w </span></span><br><span class="line"><span class="keyword">int</span> x,y,w;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">&#x27;9&#x27;</span>||ch&lt;<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        a*=<span class="number">10</span>;</span><br><span class="line">        a+=ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>(); <span class="comment">//一定的压行情绪</span></span><br></pre></td></tr></table></figure><h2 id="近现代"><a href="#近现代" class="headerlink" title="近现代"></a>近现代</h2><ul><li>用VScode的自动格式化（懒得手打空格）</li><li>会一些define了</li><li>long long从 $ll$ 变成 $LL$ </li><li>会用STL了</li><li>有点爱打注释</li><li>偶尔万能头</li><li>代码之间喜欢用空格把不同功能的区别开（放弃压行了）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n, m, len;</span><br><span class="line"><span class="keyword">int</span> w[N], cnt[N];</span><br><span class="line">LL ans[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Question</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, l, r;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> id(k) q[k].id</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(k) q[k].l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(k) q[k].r</span></span><br><span class="line">&#125; q[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; nums; <span class="comment">//离散化用</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Question x, Question y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">get</span>(x.l), j = <span class="built_in">get</span>(y.l);</span><br><span class="line">    <span class="keyword">if</span> (i != j)</span><br><span class="line">        <span class="keyword">return</span> i &lt; j;</span><br><span class="line">    <span class="keyword">return</span> x.r &lt; y.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, LL &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[x]++;</span><br><span class="line">    res = <span class="built_in">max</span>(res, (LL)cnt[x] * nums[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    len = <span class="built_in">sqrt</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//离散化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        w[i] = <span class="built_in">read</span>(), nums.<span class="built_in">push_back</span>(w[i]);</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        w[i] = <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), w[i]) - nums.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="built_in">read</span>(), b = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">id</span>(i) = i, <span class="built_in">l</span>(i) = a, <span class="built_in">r</span>(i) = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q, q + m, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; m;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = x;</span><br><span class="line">        <span class="keyword">while</span> (y &lt; m &amp;&amp; <span class="built_in">get</span>(<span class="built_in">l</span>(y)) == <span class="built_in">get</span>(<span class="built_in">l</span>(x))) <span class="comment">//完成后x~y就是同块的</span></span><br><span class="line">            ++y;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="built_in">get</span>(<span class="built_in">l</span>(x)) * len + len - <span class="number">1</span>; <span class="comment">//本块右端点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//暴力求块内</span></span><br><span class="line">        <span class="keyword">while</span> (x &lt; y &amp;&amp; <span class="built_in">r</span>(x) &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            LL res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="built_in">l</span>(x); k &lt;= <span class="built_in">r</span>(x); ++k)</span><br><span class="line">                <span class="built_in">add</span>(w[k], res);</span><br><span class="line">            ans[<span class="built_in">id</span>(x)] = res;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="built_in">l</span>(x); k &lt;= <span class="built_in">r</span>(x); ++k) <span class="comment">//回复</span></span><br><span class="line">                cnt[w[k]]--;</span><br><span class="line"></span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求跨块</span></span><br><span class="line">        LL res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = right, i = right + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt; y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; <span class="built_in">r</span>(x)) <span class="comment">//右指针只增不删</span></span><br><span class="line">                <span class="built_in">add</span>(w[++j], res);</span><br><span class="line"></span><br><span class="line">            LL b_res = res; <span class="comment">//存档</span></span><br><span class="line">            <span class="keyword">while</span> (i &gt; <span class="built_in">l</span>(x))</span><br><span class="line">                <span class="built_in">add</span>(w[--i], res);</span><br><span class="line"></span><br><span class="line">            ans[<span class="built_in">id</span>(x)] = res;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//回复</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; right + <span class="number">1</span>)</span><br><span class="line">                cnt[w[i++]]--;</span><br><span class="line">            res = b_res;</span><br><span class="line"></span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt); <span class="comment">//换块,清空</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="现代"><a href="#现代" class="headerlink" title="现代"></a>现代</h2><ul><li>因为太麻烦，放弃格式化了（会到不打空格的时代）</li><li>超级爱define，不喜欢typedef</li><li>会去掉所有能去的回车和括号</li><li>奇妙的取名（有点爱用下划线）</li><li>喜欢结构体</li></ul><p>猪国杀为例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10</span>+<span class="number">5</span>,M=<span class="number">2000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,num_FP=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> deck[M];</span><br><span class="line"><span class="keyword">int</span> idx=<span class="number">1</span>; <span class="comment">//牌堆</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Player</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> job[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">char</span> card[M];</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    <span class="keyword">int</span> hp;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> Z;</span><br><span class="line">    <span class="keyword">char</span> think_job[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">bool</span> dead;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> job(i) pig[i].job </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> card(i,j) pig[i].card[j]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cnt(i) pig[i].cnt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> hp(i) pig[i].hp  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(i) pig[i].l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(i) pig[i].r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Z(i) pig[i].Z</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dead(i) pig[i].dead</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tjob(i) pig[i].think_job</span></span><br><span class="line">&#125;pig[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getcard</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> num)</span></span>&#123; <span class="comment">//x抽牌</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</span><br><span class="line">        <span class="built_in">cnt</span>(x)++;</span><br><span class="line">        <span class="built_in">card</span>(x,<span class="built_in">cnt</span>(x))=deck[idx];</span><br><span class="line">        idx++;</span><br><span class="line">        <span class="keyword">if</span>(idx&gt;m) idx=m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tiao</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">bool</span> f)</span></span>&#123; <span class="comment">//x対y表敌意(1)/献殷勤(0)</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(x),<span class="string">&quot;MP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(x),<span class="string">&quot;ZP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(x),<span class="string">&quot;FP&quot;</span>)) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(f)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">0</span>]=<span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;ZP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;MP&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">0</span>]=<span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">0</span>]=<span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;ZP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;MP&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">0</span>]=<span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">            <span class="built_in">tjob</span>(x)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dead</span>(i))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;DEAD&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="built_in">cnt</span>(i);j&gt;=<span class="number">1</span>;--j)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(i,j)!=<span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">                    k=j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;k;++j)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(i,j)!=<span class="string">&#x27;U&#x27;</span>) cout&lt;&lt;<span class="built_in">card</span>(i,j)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(k!=<span class="number">0</span>) cout&lt;&lt;<span class="built_in">card</span>(i,k);</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//有一个x使用的无懈是否被无懈</span></span><br><span class="line">    <span class="keyword">int</span> z=<span class="built_in">r</span>(x);</span><br><span class="line">    <span class="keyword">bool</span> can=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(z!=x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(x),<span class="string">&quot;MP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(z);++i)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(z,i)==<span class="string">&#x27;J&#x27;</span>&amp;&amp;!can)&#123;</span><br><span class="line">                    <span class="built_in">tiao</span>(z,x,<span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">card</span>(z,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">dfs</span>(z)) can=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(x),<span class="string">&quot;ZP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(z);++i)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(z,i)==<span class="string">&#x27;J&#x27;</span>&amp;&amp;!can)&#123;</span><br><span class="line">                    <span class="built_in">tiao</span>(z,x,<span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">card</span>(z,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">dfs</span>(z)) can=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(x),<span class="string">&quot;FP&quot;</span>)&amp;&amp;(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;MP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;ZP&quot;</span>)))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(z);++i)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(z,i)==<span class="string">&#x27;J&#x27;</span>&amp;&amp;!can)&#123;</span><br><span class="line">                    <span class="built_in">tiao</span>(z,x,<span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">card</span>(z,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">dfs</span>(z)) can=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(can) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        z=<span class="built_in">r</span>(z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">invincible</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//判定x対y的pai(F/J)是否被无懈</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;UP&quot;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> z=x;</span><br><span class="line">    <span class="keyword">bool</span> can=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> f=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(f||z!=x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;MP&quot;</span>)&amp;&amp;(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;ZP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;MP&quot;</span>)))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(z);++i)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(z,i)==<span class="string">&#x27;J&#x27;</span>&amp;&amp;!can)&#123;</span><br><span class="line">                    <span class="built_in">tiao</span>(z,y,<span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">card</span>(z,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">dfs</span>(z)) can=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;ZP&quot;</span>)&amp;&amp;(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;ZP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;MP&quot;</span>)))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(z);++i)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(z,i)==<span class="string">&#x27;J&#x27;</span>&amp;&amp;!can)&#123;</span><br><span class="line">                    <span class="built_in">tiao</span>(z,y,<span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">card</span>(z,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">dfs</span>(z)) can=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(z),<span class="string">&quot;FP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(z);++i)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">card</span>(z,i)==<span class="string">&#x27;J&#x27;</span>&amp;&amp;!can)&#123;</span><br><span class="line">                    <span class="built_in">tiao</span>(z,y,<span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">card</span>(z,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">dfs</span>(z)) can=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(can) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(z==x) f=<span class="literal">false</span>;</span><br><span class="line">        z=<span class="built_in">r</span>(z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">die</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//判断x死亡,y杀的</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">hp</span>(x)&gt;<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(x);++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;P&#x27;</span>&amp;&amp;<span class="built_in">hp</span>(x)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">hp</span>(x)++;</span><br><span class="line">            <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">hp</span>(x)&gt;<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">r</span>(<span class="built_in">l</span>(x))=<span class="built_in">r</span>(x);</span><br><span class="line">    <span class="built_in">l</span>(<span class="built_in">r</span>(x))=<span class="built_in">l</span>(x);</span><br><span class="line">    <span class="built_in">dead</span>(x)=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">        num_FP--;</span><br><span class="line">        <span class="keyword">if</span>(num_FP&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;MP&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="built_in">end</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">getcard</span>(y,<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;ZP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(y),<span class="string">&quot;MP&quot;</span>))&#123;</span><br><span class="line">        <span class="built_in">Z</span>(y)=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cnt</span>(y)=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;MP&quot;</span>))&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;FP&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kill</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//x杀y</span></span><br><span class="line">    <span class="keyword">bool</span> d=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(y);++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(y,i)==<span class="string">&#x27;D&#x27;</span>&amp;&amp;!d)&#123;</span><br><span class="line">            d=<span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">card</span>(y,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(!d)&#123;</span><br><span class="line">        <span class="built_in">hp</span>(y)--;</span><br><span class="line">        <span class="built_in">die</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">tiao</span>(x,y,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">duel</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//x対y决斗</span></span><br><span class="line">    <span class="built_in">tiao</span>(x,y,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">invincible</span>(x,y)) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;MP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(y),<span class="string">&quot;ZP&quot;</span>))&#123;</span><br><span class="line">        <span class="built_in">hp</span>(y)--;</span><br><span class="line">        <span class="built_in">die</span>(y,x);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> xk=<span class="number">0</span>,yk=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(x);++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;K&#x27;</span>) xk++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(y);++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(y,i)==<span class="string">&#x27;K&#x27;</span>) yk++;</span><br><span class="line">    <span class="keyword">if</span>(xk&gt;=yk)&#123;</span><br><span class="line">        <span class="built_in">hp</span>(y)--;</span><br><span class="line">        xk=yk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(xk&lt;yk)&#123;</span><br><span class="line">        <span class="built_in">hp</span>(x)--;</span><br><span class="line">        yk=xk+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(x);++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;K&#x27;</span>&amp;&amp;xk)&#123;</span><br><span class="line">            xk--;</span><br><span class="line">            <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(y);++i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(y,i)==<span class="string">&#x27;K&#x27;</span>&amp;&amp;yk)&#123;</span><br><span class="line">            yk--;</span><br><span class="line">            <span class="built_in">card</span>(y,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">die</span>(y,x);</span><br><span class="line">    <span class="built_in">die</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">barbarian</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=<span class="built_in">r</span>(x);</span><br><span class="line">    <span class="keyword">while</span>(y!=x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">invincible</span>(x,y))&#123;</span><br><span class="line">            y=<span class="built_in">r</span>(y);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> k=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(y);++i)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">card</span>(y,i)==<span class="string">&#x27;K&#x27;</span>&amp;&amp;!k)&#123;</span><br><span class="line">                k=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">card</span>(y,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(!k)&#123;</span><br><span class="line">            <span class="built_in">hp</span>(y)--;</span><br><span class="line">            <span class="built_in">die</span>(y,x);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(y),<span class="string">&quot;MP&quot;</span>)&amp;&amp;<span class="built_in">tjob</span>(x)[<span class="number">0</span>]==<span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">tjob</span>(x)[<span class="number">0</span>]=<span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                <span class="built_in">tjob</span>(x)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        y=<span class="built_in">r</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arrows</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=<span class="built_in">r</span>(x);</span><br><span class="line">    <span class="keyword">while</span>(y!=x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">invincible</span>(x,y))&#123;</span><br><span class="line">            y=<span class="built_in">r</span>(y);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> d=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(y);++i)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">card</span>(y,i)==<span class="string">&#x27;D&#x27;</span>&amp;&amp;!d)&#123;</span><br><span class="line">                d=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">card</span>(y,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(!d)&#123;</span><br><span class="line">            <span class="built_in">hp</span>(y)--;</span><br><span class="line">            <span class="built_in">die</span>(y,x);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(y),<span class="string">&quot;MP&quot;</span>)&amp;&amp;<span class="built_in">tjob</span>(x)[<span class="number">0</span>]==<span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">tjob</span>(x)[<span class="number">0</span>]=<span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">                <span class="built_in">tjob</span>(x)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        y=<span class="built_in">r</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">round</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//x的回合</span></span><br><span class="line">    <span class="built_in">getcard</span>(x,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">bool</span> k=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">cnt</span>(x);++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">Z</span>(x)) <span class="built_in">Z</span>(x)=i;</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;P&#x27;</span>&amp;&amp;<span class="built_in">hp</span>(x)&lt;<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">            <span class="built_in">hp</span>(x)++;</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;K&#x27;</span>&amp;&amp;(!k||<span class="built_in">Z</span>(x)))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;MP&quot;</span>)&amp;&amp;(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(<span class="built_in">r</span>(x)),<span class="string">&quot;LP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(<span class="built_in">r</span>(x)),<span class="string">&quot;FP&quot;</span>)))&#123;</span><br><span class="line">                <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                <span class="built_in">kill</span>(x,<span class="built_in">r</span>(x));</span><br><span class="line">                k=<span class="literal">true</span>;</span><br><span class="line">                i=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;ZP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(<span class="built_in">r</span>(x)),<span class="string">&quot;FP&quot;</span>))&#123;</span><br><span class="line">                <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                <span class="built_in">kill</span>(x,<span class="built_in">r</span>(x));</span><br><span class="line">                k=<span class="literal">true</span>;</span><br><span class="line">                i=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;FP&quot;</span>)&amp;&amp;(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(<span class="built_in">r</span>(x)),<span class="string">&quot;MP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(<span class="built_in">r</span>(x)),<span class="string">&quot;ZP&quot;</span>)))&#123;</span><br><span class="line">                <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                <span class="built_in">kill</span>(x,<span class="built_in">r</span>(x));</span><br><span class="line">                k=<span class="literal">true</span>;</span><br><span class="line">                i=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;F&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=<span class="built_in">r</span>(x);</span><br><span class="line">            <span class="keyword">while</span>(y!=x)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;MP&quot;</span>)&amp;&amp;(!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;LP&quot;</span>)||!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;FP&quot;</span>))) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;ZP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;FP&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(x),<span class="string">&quot;FP&quot;</span>)&amp;&amp;!<span class="built_in">strcmp</span>(<span class="built_in">tjob</span>(y),<span class="string">&quot;MP&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                y=<span class="built_in">r</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">                <span class="built_in">duel</span>(x,y);</span><br><span class="line">                i=<span class="number">0</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;N&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">            <span class="built_in">barbarian</span>(x);</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">card</span>(x,i)==<span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">card</span>(x,i)=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">            <span class="built_in">arrows</span>(x);</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dead</span>(x)) <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;pig.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;myans.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        cin&gt;&gt;<span class="built_in">job</span>(i);</span><br><span class="line">        <span class="built_in">tjob</span>(i)[<span class="number">0</span>]=<span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">        <span class="built_in">tjob</span>(i)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;++j)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch;</span><br><span class="line">            cin&gt;&gt;ch;</span><br><span class="line">            <span class="built_in">card</span>(i,j)=ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cnt</span>(i)=<span class="number">4</span>;</span><br><span class="line">        <span class="built_in">hp</span>(i)=<span class="number">4</span>;</span><br><span class="line">        <span class="built_in">l</span>(i)=i<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">r</span>(i)=i+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Z</span>(i)=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dead</span>(i)=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="built_in">job</span>(i),<span class="string">&quot;FP&quot;</span>)) num_FP++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">l</span>(<span class="number">1</span>)=n;</span><br><span class="line">    <span class="built_in">r</span>(n)=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">tjob</span>(<span class="number">1</span>)[<span class="number">0</span>]=<span class="string">&#x27;M&#x27;</span>;</span><br><span class="line">    <span class="built_in">tjob</span>(<span class="number">1</span>)[<span class="number">1</span>]=<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        cin&gt;&gt;deck[i];</span><br><span class="line">    <span class="keyword">int</span> now_play=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">233</span>)&#123;</span><br><span class="line">        <span class="built_in">round</span>(now_play);</span><br><span class="line">        now_play=<span class="built_in">r</span>(now_play);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2021-12-19"><a href="#2021-12-19" class="headerlink" title="2021/12/19"></a>2021/12/19</h2><ul><li>改成标准码风了（还是决定加空格）</li><li>超爱define偷懒</li><li>if、for后必回车，else也会回车另起一行</li><li>偶尔会用namespace</li><li>大概的取名思路是变量、函数一般小写，但常量一般首字母大写；结构体每个单词首字母大写；define的关键字取首字母大写缩写，但define的函数仍然小写</li><li>爱用++x，不用x++（除非无可奈何）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="comment">//用什么STL就再加什么头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DB double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI vector<span class="meta-string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VIT vector<span class="meta-string">&lt;int&gt;</span>::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PDI pair<span class="meta-string">&lt;double, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRG default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID uniform_int_distribution</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back((x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> si(x) a[(x)].size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(x, y, z) for (int (x) = (y), __END__ = (z); (x) &lt;= __END__; ++(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x, y, z) for (int (x) = (y), __END__ = (z); (x) &gt;= __END__; --(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> peri(x, y, z, ch) for (int (x) = (y), __END__ = (z); (x) &lt;= __END__; (ch))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> par(x, y) param(UID<span class="meta-string">&lt;int&gt;</span>::param_type&#123;(x), (y)&#125;);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">VI num;</span><br><span class="line"><span class="function">DRG <span class="title">e</span><span class="params">(<span class="number">114514</span>)</span></span>;</span><br><span class="line">UID u;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">gh</span>(), t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        t |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">        x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">all</span>(num));</span><br><span class="line">    u.<span class="built_in">par</span>(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">per</span> (i, <span class="number">1</span>, <span class="number">10</span>) <span class="comment">//这里还是会在per后加空格</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">u</span>(e)); <span class="comment">//一般用scanf和printf,有时候打read和write</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 记录一下自己的码风&lt;/p&gt;</summary>
    
    
    
    
    <category term="其它" scheme="https://dyd-true.github.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>左偏树</title>
    <link href="https://dyd-true.github.io/2021/12/19/%E5%B7%A6%E5%81%8F%E6%A0%91/"/>
    <id>https://dyd-true.github.io/2021/12/19/%E5%B7%A6%E5%81%8F%E6%A0%91/</id>
    <published>2021-12-19T06:20:48.000Z</published>
    <updated>2021-12-20T13:14:21.393Z</updated>
    
    <content type="html"><![CDATA[<p> 考完学波数据结构</p><span id="more"></span><h1 id="左偏树"><a href="#左偏树" class="headerlink" title="左偏树"></a>左偏树</h1><p>左偏树是<strong>可并堆</strong>的一种，可以在  $O(\log n)$ 的时间内实现堆的合并，它是通过额外维护一个<strong>距离</strong>并保证<strong>性质</strong>来实现的（有点类似于点分治找重心）</p><h2 id="定义和性质"><a href="#定义和性质" class="headerlink" title="定义和性质"></a>定义和性质</h2><ul><li>距离：一个点的距离定义为一个点<strong>到离它最近的空节点的距离</strong></li><li>性质：每个点的<strong>左儿子的距离一定大于等于其右儿子的距离</strong></li></ul><p>以上就是左偏树额外维护以保证时间复杂度的信息，不难发现，这棵二叉树（堆）的<strong>每个节点的距离一定于右儿子的距离加1</strong></p><p><strong>定理</strong>：根节点的距离 $dis_{root} \le \log (n + 1)$ ，证明如下：</p><p>设 $f(k)$ 表示 $dis_{root} = k$ 的子树至少包含多少点，易得， $f(1) = 1 \le 2^1 - 1$ ，若 $f(k - 1) \le 2^{k - 1} - 1$ ，则对于 $dis_{root} = k$ 的子树，右儿子的距离为 $k - 1$ ，即右子树最少有 $f(k - 1)$ 个点，而左儿子的距离一定大于等于其右儿子的距离，故左子树最少也有 $f(k - 1)$ 个点，则 $f(k) = f(k - 1) + f(k - 1) + 1$ ，即 $f(k) \le 2^k - 1$ ，由数学归纳法原理， $f(k) \le 2^k - 1$ ，则 $f(\log (n + 1)) \le 2^{\log (n + 1)} - 1 = n$ ，可得 $dis_{root} \le \log (n + 1)$ </p><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>有了以上定义和性质，我们来看看如何合并左偏树，假设我们合并的两个左偏树的根分别为 $a, b$ ，进行如下操作（假设是小根堆）：</p><ol><li>若 $b &lt; a$ ， $swap(a, b)$ </li><li>将 $a$ 作为合并后的根节点，并将 $a$ 的左子树作为合并后的左子树</li><li>递归合并 $a$ 的右子树和 $b$ ，将合并后的树作为右子树</li><li>若右子树的距离大于左子树，交换两个子树</li></ol><p>可以发现，每一次递归，两个根节点必有一个会变成自己的右子树，即它的距离会减1，当根的距离为1时它就没有右子树了，故时间复杂度为  $O(dis_a - 1 + dis_b - 1) = O(\log (n + 1)) = O(\log n)$ </p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LeftHeap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r, v, dis;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(x) lh[(x)].l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(x) lh[(x)].r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> v(x) lh[(x)].v</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dis(x) lh[(x)].dis</span></span><br><span class="line">&#125; lh[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y)</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">v</span>(x) &gt; <span class="built_in">v</span>(y))</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="built_in">r</span>(x) = <span class="built_in">merge</span>(<span class="built_in">r</span>(x), y);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dis</span>(<span class="built_in">r</span>(x)) &gt; <span class="built_in">dis</span>(<span class="built_in">l</span>(x)))</span><br><span class="line"><span class="built_in">swap</span>(<span class="built_in">r</span>(x), <span class="built_in">l</span>(x));</span><br><span class="line"><span class="built_in">dis</span>(x) = <span class="built_in">dis</span>(<span class="built_in">r</span>(x)) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>左偏树的难点主要在于应用</p><p><a href="https://www.luogu.com.cn/problem/P4331">数字序列</a></p><p>先做一个变化：令 $a’_i = a_i - i, b’_i = b_i - i$ ，这样，最小值不会改变，且任意一组解都有唯一的  $\{b’<em>i\}$ 与之对应，而变化的目的是 $b_i &lt; b</em>{i + 1},即b’<em>i + i &lt; b’</em>{i + 1} + i + 1$ ，故 $b’<em>i \le b’</em>{i + 1}$ ，我们把 $&lt;$ 变成了 $\le$ ，为了方便，以下不会再用到原数组，所有的 $\{b_i\}$ 都指的是 $\{b’_i\}$ </p><p>考虑一个子问题：若有 $n$ 个数 $\{a_i\}$ ，求一个数 $b$ ，使得 $\sum_{i = 1}^n \mid a_i - x \mid$ 最小，即在保证 $b_1 = b_2 = … = b_n = x$ 的情况下求解原问题，明显，取 $\{a_i\}$ 的<strong>中位数</strong>时最小</p><p>那么再考虑，如果有 $n$ 个数 $\{a_i\}$ ，其中对于 $\sum_{i = 1}^m \mid a_i - b_i \mid$ ，其取最小值时 $b_{1 \sim m} = u$ ，对于 $\sum_{i = m + 1}^n \mid a_i - b_i \mid$ ，其取最小值时 $b_{m + 1 \sim n} = v$ ，那么该如何合并 $a_{1 \sim m}$ 和 $a_{m + 1 \sim n}$ 呢？分两类讨论：</p><ol><li>若 $u \le v$ ，即满足 $\{b_i\}$ 的单调性，则两段分别保留自己的 $b$ </li><li>若 $u &gt; v$ ，即不满足单调性，则使 $b_{1 \sim n}$ 为 $a_{1 \sim n}$ 的中位数 </li></ol><p>第一类正确性很好理解，下面证明第二类做法的正确性（即取中位数后 $\sum_{i = 1}^n \mid a_i - b_i \mid$ 最小）：</p><p>设对于 $a_{1 \sim n}$ 的一组最优解为 $\{b_i\} = \{x_i\}$ </p><p>若 $x_m &gt; u$ ，则由单调性可得 $x_{m + 1 \sim n} &gt; u$ ，由于 $b_{1 \sim m} = u$ 是对于 $a_{1 \sim m}$ 的最优解，所以用 $u$ 替换 $x_{1 \sim m}$ 仍然<strong>满足单调性且不会使答案变差</strong>，故只需讨论 $x_m \le u$ 的情况，同理，也只需讨论 $x_{m + 1} \ge v$ 的情况，因此只需考虑 $x_m \le u$ 且 $x_{m + 1} \ge v$ 的情况</p><p>下面证明一个<strong>引理</strong>：</p><p>若对于 $a_{1 \sim n}$ 的最优解为 $\{b_i\} = k$ ，则对于任意一组解（不一定最优） $\{b_i\} = \{x_i\}$ 满足 $x_1 &gt; k$ （因为单调性，其实就是 $\forall i \in [1, n], x_i &gt; k$ ），将其改为 $\{b_i\} = t(k \le t \le x_1)$ 一定不会比 $\{b_i\} = \{x_i\}$ 差</p><p><img src="https://s2.loli.net/2021/12/19/Pf8RZYa1NjA6lGq.png" alt="引理1"></p><p>如图，</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 考完学波数据结构&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="堆" scheme="https://dyd-true.github.io/tags/%E5%A0%86/"/>
    
    <category term="左偏树" scheme="https://dyd-true.github.io/tags/%E5%B7%A6%E5%81%8F%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/19总结</title>
    <link href="https://dyd-true.github.io/2021/12/19/test2021-12-19%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/19/test2021-12-19%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-19T06:08:57.000Z</published>
    <updated>2021-12-20T07:53:03.886Z</updated>
    
    <content type="html"><![CDATA[<p> 感觉我最近好躺啊，主要是whk月考完了（一语双关）</p><span id="more"></span><h1 id="test2021-12-19总结"><a href="#test2021-12-19总结" class="headerlink" title="test2021/12/19总结"></a>test2021/12/19总结</h1><p>可改性极强</p><h2 id="题目、成绩和题解"><a href="#题目、成绩和题解" class="headerlink" title="题目、成绩和题解"></a>题目、成绩和题解</h2><p><a href="./day3.pdf">题目</a></p><p><a href="./res.pdf">成绩</a></p><p><a href="./solution.pdf">题解</a></p><h2 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h2><p>没啥好说的，大概讲讲</p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>先看了看三道题，觉得T2最可做（<del>屎一般的第六感</del>），于是先开T2</p><p>第一眼看过去觉得好骗分——输出-1、答案不超过10、全部向右，感觉都能骗点，但仔细一想，连 $n \le 10$ 的<strong>暴力都不知道该怎么打</strong>，看到那种一个数后面跟另一个数的，考场上想的是暴力枚举每个线索是向左还是向右，然后暴力建图，这是考场上画的图（<del>把心思花在奇怪的地方</del>）：</p><p><img src="https://s2.loli.net/2021/12/19/HMgaFVWmo5IfS4Z.png" alt="T2-1"></p><p>然而还是没做出来，于是先看看T1</p><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>第一遍题看错了，不然就先开T1的</p><p>大概猜了个想法：<strong>先把一行填满，然后把这行复制 $n$ 次</strong>，发现只要 $\exists i使得a[i][j]$ 是黑色，则第 $j$ 行就可以填满（特判不用填的情况），很快打好了贪心，奇迹般的过了样例，不管了</p><h3 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h3><p>T3看见subtask不敢开，又来想T2</p><p>还是不肯放弃枚举每个线索是向左还是向右的想法（总觉得 $2^{10}$ 这个复杂度很优美），但把建图改成了考虑每一条线索，尝试在不破环前面线索的情况下满足它，具体的，维护区间上可以填的数，每次满足好线索后跟新，<strong>类似于珂朵莉树</strong>，我想用set+list/vector实现，还是画了个图（我今天太爱画图了，其实还有张画的更好的，不小心删了）：</p><p><img src="https://s2.loli.net/2021/12/19/9ByArIQKmxjFRCE.png" alt="T2-2"></p><p>感觉很难打，决定先把T3暴力打了</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>没啥好说的， $2^n$ 级暴力，加了点小优化，过不了最后一个样例</p><h3 id="T2-2"><a href="#T2-2" class="headerlink" title="T2"></a>T2</h3><p>回来死打T2，结果考试结束了都没调出来，暴力来不及了，大胆的交了个<strong>随机数</strong>上去</p><h2 id="成绩"><a href="#成绩" class="headerlink" title="成绩"></a>成绩</h2><p>T1贪心有细节没考虑到，90分正常（毕竟10分种打完的），T3暴力竟然有个40分（其实没有subtask的话有87分的），最可笑的是T2，随机数得了8分，还没有输出-1的分高（12分）</p><h2 id="改错"><a href="#改错" class="headerlink" title="改错"></a>改错</h2><h3 id="T1-1"><a href="#T1-1" class="headerlink" title="T1"></a>T1</h3><p>上午的贪心不完备的地方是：对于不存在 $i$ 使 $a[i][j]$ 为黑色的 $j$ ，并非就不能染色了，而是需要先消耗一次操作使得存在 $a[i][j]$ 为黑色</p><p>当然，整个图中都没有黑色的话还是输出-1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000</span> + <span class="number">5</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[N][N];</span><br><span class="line"><span class="keyword">int</span> ans = INF;</span><br><span class="line"><span class="keyword">bool</span> f[N], v[N];</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">gh</span>(), t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        t |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">        x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (a[x][i] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            ++res;</span><br><span class="line">    <span class="keyword">return</span> res + (!f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;matrix.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;matrix.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a[i] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                f[j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            v[i] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans = <span class="built_in">min</span>(<span class="built_in">work</span>(i), ans);</span><br><span class="line">    <span class="keyword">bool</span> c = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    ans += v[i], c |= f[i];</span><br><span class="line">    <span class="keyword">if</span> (!c)</span><br><span class="line">        ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a>T3</h3><p>看了题解，竟然也是暴力，后悔考场上没有认真打T3，说不定可以过的</p><p>就是找到每一个环，只有两个数的环就一定是前一个数为 $($ 优（因为方便闭口），剩下的环一定是4个及以上，每个环只有两种填法，时间复杂度为 $O(2^{\frac{n}{4}})$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="keyword">char</span> ans[N], chr[<span class="number">2</span>] = &#123;<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">gh</span>(), t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        t |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">        x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x + sum - <span class="number">1</span> &gt; n || sum &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (x + sum - <span class="number">1</span> == n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (ans[i] == <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">ans[i] = <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        ans[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, ans + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans[x] != <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(x + <span class="number">1</span>, sum + (ans[x] == <span class="string">&#x27;(&#x27;</span>) - (ans[x] == <span class="string">&#x27;)&#x27;</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, y, now, cnt; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    y = x, now = i;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">    ++cnt;</span><br><span class="line">    ans[y] = chr[now];</span><br><span class="line">    y = p[y];</span><br><span class="line">    now = !now;</span><br><span class="line">    &#125;<span class="keyword">while</span> (y != x);</span><br><span class="line">    <span class="built_in">dfs</span>(x + <span class="number">1</span>, sum + (ans[x] == <span class="string">&#x27;(&#x27;</span>) - (ans[x] == <span class="string">&#x27;)&#x27;</span>));</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[x] = <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;C.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;C.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(p[i]), ans[i] = <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T2-3"><a href="#T2-3" class="headerlink" title="T2"></a>T2</h3><p>没想到T2才是最难的，我第一遍看题还以为是最简单的（<strong>wfy</strong>大佬一下就判断出了T2最难，看来我题还是练少了）</p><p>正解是个dp， $n \le 10$ 那么明显的状压提示没看出来，半天都在往数据结构上想，dp还是一个短板</p><p>另外，题解上倒着dp、记忆化搜索这些技巧还是要多品</p><p>爱上了毒瘤马蜂，另外STL记得特判不存在</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI vector<span class="meta-string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back((x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> si(x) a[(x)].size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(x, y, z) for (int (x) = (y), __END__ = (z); (x) &lt;= __END__; ++(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span> + <span class="number">1</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">VI a[N], b[N];</span><br><span class="line"><span class="keyword">bool</span> v[N][N][N];</span><br><span class="line"><span class="keyword">int</span> f[N][N][N][N][(<span class="number">1</span> &lt;&lt; N)];</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">gh</span>(), t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        t |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">        x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[z][<span class="built_in">si</span>(z)] &amp; ~b[x][<span class="built_in">si</span>(x)])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">si</span>(x) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">0</span>, <span class="built_in">si</span>(z) - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (a[z][i] == a[x][y])</span><br><span class="line">++y;</span><br><span class="line"><span class="keyword">return</span> y == <span class="built_in">si</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> x, <span class="keyword">int</span> r, <span class="keyword">int</span> y, <span class="keyword">int</span> S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> &amp;res = f[l][x][r][y][S &amp;= (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (res != <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"><span class="keyword">if</span> (S == (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span> &amp;&amp; !x &amp;&amp; y == <span class="built_in">si</span>(r))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">res = INF;</span><br><span class="line"><span class="keyword">if</span> (l &lt; n &amp;&amp; !x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">0</span>, n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((S &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">per</span> (j, <span class="number">0</span>, <span class="built_in">si</span>(i))</span><br><span class="line"><span class="keyword">if</span> (v[i][j][l])</span><br><span class="line">res = <span class="built_in">min</span>(<span class="built_in">work</span>(i, j, r, y, S | (<span class="number">1</span> &lt;&lt; i)), res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (!((S &gt;&gt; i) &amp; <span class="number">1</span>) &amp;&amp; v[r][y][i])</span><br><span class="line">res = <span class="built_in">min</span>(<span class="built_in">work</span>(l, x, i, <span class="number">0</span>, S | (<span class="number">1</span> &lt;&lt; i)), res);</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> u = (x &amp;&amp; i == a[l][x - <span class="number">1</span>]), v = (<span class="built_in">si</span>(r) != <span class="number">0</span> &amp;&amp; i == a[r][y]);</span><br><span class="line"><span class="keyword">if</span> (u &amp;&amp; v)</span><br><span class="line">res = <span class="built_in">min</span>(<span class="built_in">work</span>(l, x - <span class="number">1</span>, r, y + <span class="number">1</span>, S) + <span class="number">1</span>, res);</span><br><span class="line"><span class="keyword">if</span> (u &amp;&amp; ((b[r][y] &gt;&gt; i) &amp; <span class="number">1</span>))</span><br><span class="line">res = <span class="built_in">min</span>(<span class="built_in">work</span>(l, x - <span class="number">1</span>, r, y, S) + <span class="number">1</span>, res);</span><br><span class="line"><span class="keyword">if</span> (v &amp;&amp; ((b[l][x] &gt;&gt; i) &amp; <span class="number">1</span>))</span><br><span class="line">res = <span class="built_in">min</span>(<span class="built_in">work</span>(l, x, r, y + <span class="number">1</span>, S) + <span class="number">1</span>, res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;hidden.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;hidden.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">per</span> (i, <span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">int</span> _a;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">read</span>(_a), _a != <span class="number">0</span>)</span><br><span class="line">            a[i].<span class="built_in">pb</span>(_a);</span><br><span class="line">b[i].<span class="built_in">pb</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">per</span> (j, <span class="number">0</span>, <span class="built_in">si</span>(i) - <span class="number">1</span>)</span><br><span class="line">b[i].<span class="built_in">pb</span>(b[i][j] | (<span class="number">1</span> &lt;&lt; a[i][j]));</span><br><span class="line">    &#125;</span><br><span class="line">b[n].<span class="built_in">pb</span>(~<span class="number">0U</span>);</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">0</span>, n)</span><br><span class="line"><span class="built_in">per</span> (j, <span class="number">0</span>, <span class="built_in">si</span>(i))</span><br><span class="line"><span class="built_in">per</span> (k, <span class="number">0</span>, n)</span><br><span class="line">v[i][j][k] = (i != k &amp;&amp; <span class="built_in">check</span>(i, j, k));</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line"><span class="keyword">int</span> ans = INF;</span><br><span class="line"><span class="built_in">per</span> (i, <span class="number">0</span>, n)</span><br><span class="line">ans = <span class="built_in">min</span>(ans, <span class="built_in">work</span>(i, <span class="built_in">si</span>(i), n, <span class="number">0</span>, <span class="number">1</span> &lt;&lt; i));</span><br><span class="line"><span class="keyword">if</span> (ans == INF)</span><br><span class="line">ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h2><p>写的有点简陋，主要是时间紧，还有一个左偏树没写</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 感觉我最近好躺啊，主要是whk月考完了（一语双关）&lt;/p&gt;</summary>
    
    
    
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="随机数" scheme="https://dyd-true.github.io/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
    <category term="贪心" scheme="https://dyd-true.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="记忆化搜索" scheme="https://dyd-true.github.io/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Dancing Links</title>
    <link href="https://dyd-true.github.io/2021/12/16/Dancing-Links/"/>
    <id>https://dyd-true.github.io/2021/12/16/Dancing-Links/</id>
    <published>2021-12-16T10:51:33.000Z</published>
    <updated>2021-12-16T14:20:45.090Z</updated>
    
    <content type="html"><![CDATA[<p> 跳舞表、舞蹈链（<del>神一般的翻译</del>）</p><span id="more"></span><h1 id="Dancing-Links"><a href="#Dancing-Links" class="headerlink" title="Dancing Links"></a>Dancing Links</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Dancing Links（DLX）一般被用来解决一类<strong>“精确覆盖问题”</strong>：</p><p>给定一个  $n * m$ 的01矩阵，求最少要选出多少行，使得每一列<strong>恰好</strong>有一个1，如图，最少选两行（红色）：</p><p><img src="https://s2.loli.net/2021/12/16/s8Ka6MjmNoflAdY.png" alt="精确覆盖"></p><p>这是一个NPC问题，也就意味着我们<strong>只能暴力</strong>，但如何更聪明的暴力呢？</p><h2 id="X算法"><a href="#X算法" class="headerlink" title="X算法"></a>X算法</h2><p>解决以上问题的暴力算法中，比较优秀的是<strong>二进制压缩</strong>和<strong>X算法</strong>，这里主要介绍X算法：</p><p>看到如下01矩阵：</p><p><img src="https://s2.loli.net/2021/12/16/E3AVZIfUHBYMinz.png" alt="1"></p><p>我们先找到<strong>还未满足的、且包含1最少的一列（有多个就随便取一个）</strong>，这样可以减少枚举（这个贪心的正确性显然），如图中红色的5列都满足条件，不妨取第一列</p><p>然后我们取第一列的两个1中任意一个所在行（蓝色），由于要求<strong>恰好</strong>有一个1，所以橘色行一定不可取，而绿色的列已经被满足了</p><p><img src="https://s2.loli.net/2021/12/16/SMG7CzQPv62heTb.png" alt="2"></p><p>显然被标记（蓝、橘、绿）部分已经没有意义了，我们删去它们，得到更小的矩阵</p><p><img src="https://s2.loli.net/2021/12/16/A3YHMKmGJOtq9h1.png" alt="4"></p><p>然后再选，这次假设我们选了现在的第一行，第二行也会被删掉，得到一个<strong>空矩阵</strong>，而得到空矩阵的这一步操作所删去的行<strong>并非全部为1</strong>，所以这不是一种合法的方案（如选则现在的第一行，现在的第一列就没有1，不符合要求）</p><p>怎么办？<strong>回溯</strong>啊，将我们删除的行、列加回来，再尝试另外一种删法</p><p>以上就是X算法，它看起来十分暴力，但可优化性极好，因为它含有很多的“加行、列，删行、列”操作，这提示我们<strong>用链表优化</strong></p><h2 id="DLX"><a href="#DLX" class="headerlink" title="DLX"></a>DLX</h2><p>DLX的使用必须满足一个条件：<strong>图是稀疏的</strong>，换句话说，图中的1的个数不多（<del>但“不多”的定义到底是多少呢，我也不知道</del>）</p><p>DLX是用了一个<strong>十字链表</strong>结构来优化的，具体的，<strong>一个为1点将与其上、下、左、右四个方向上的第一个1链接（如果走到边界就循环）</strong>，如图：</p><p><img src="https://s2.loli.net/2021/12/16/yqZnMdzvfl63erE.png" alt="十字链"></p><p>明显，这个链表是<strong>双向的</strong></p><p>同时我们还需要记录下每一个1的行号、列号，以及每一列有多少个1（方便求1最少的一列）</p><p>我们要先建出一个空行来做表头，然后类似于链式前向星的插入，注意我们是每插入完一行就要换行</p><p>然后进行dfs搜索即可（dance操作）</p><h2 id="代码和时间分析"><a href="#代码和时间分析" class="headerlink" title="代码和时间分析"></a>代码和时间分析</h2><p><a href="https://www.luogu.com.cn/problem/P4929">精确覆盖问题</a></p><p>由于l、r、u等变量名很容易重名，所以用了个结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5500</span> + <span class="number">5</span>; <span class="comment">//要多开m个表头</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l[N], r[N], u[N], d[N]; <span class="comment">//左、右、上、下</span></span><br><span class="line"><span class="keyword">int</span> si[N], row[N], col[N]; <span class="comment">//row:行号,col:列号</span></span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//建出表头</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x; ++i)</span><br><span class="line">&#123;</span><br><span class="line">l[i] = i - <span class="number">1</span>, r[i] = i + <span class="number">1</span>;</span><br><span class="line">col[i] = u[i] = d[i] = i;</span><br><span class="line">    si[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">l[<span class="number">0</span>] = x, r[x] = <span class="number">0</span>; <span class="comment">//循环</span></span><br><span class="line">idx = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;hh, <span class="keyword">int</span> &amp;tt, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//在hh和tt间插入点(x, y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">row[idx] = x, col[idx] = y, ++si[y];</span><br><span class="line">u[idx] = y, d[idx] = d[y], u[d[y]] = idx, d[y] = idx; <span class="comment">//这里y是表头</span></span><br><span class="line">r[hh] = l[tt] = idx, r[idx] = tt, l[idx] = hh;</span><br><span class="line">tt = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> p)</span> <span class="comment">//删掉p所在列和该列有1的行</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r[l[p]] = r[p], l[r[p]] = l[p];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[p]; i != p; i = d[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j])</span><br><span class="line">&#123;</span><br><span class="line">--si[col[j]];</span><br><span class="line">u[d[j]] = u[j], d[u[j]] = d[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> p)</span> <span class="comment">//添加p所在列和该列有1的行,注意和删除倒着来</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = u[p]; i != p; i = u[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j])</span><br><span class="line">&#123;</span><br><span class="line">u[d[j]] = j, d[u[j]] = j;</span><br><span class="line">++si[col[j]];</span><br><span class="line">&#125;</span><br><span class="line">r[l[p]] = p, l[r[p]] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!r[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> p = r[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r[<span class="number">0</span>]; i; i = r[i])</span><br><span class="line"><span class="keyword">if</span> (si[i] &lt; si[p])</span><br><span class="line">p = i;</span><br><span class="line"><span class="built_in">remove</span>(p);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[p]; i != p; i = d[i]) <span class="comment">//尝试选p列中每一个有1的行</span></span><br><span class="line">&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(row[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j])</span><br><span class="line"><span class="built_in">remove</span>(col[j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dance</span>())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//回溯,注意反着来</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j])</span><br><span class="line"><span class="built_in">resume</span>(col[j]);</span><br><span class="line">ans.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">resume</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; dlx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">dlx.<span class="built_in">init</span>(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, hh, tt, x; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">hh = tt = dlx.idx; <span class="comment">//换行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span> (x)</span><br><span class="line">dlx.<span class="built_in">insert</span>(hh, tt, i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dlx.<span class="built_in">dance</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : dlx.ans)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No Solution!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DLX递归及回溯的次数只与矩阵中1的个数有关，它的实际复杂度为 $O(c^n)$ ，其中 $c$ 是一个很接近于1的常数，而 $n$ 是矩阵中1的个数</p><p>与Dinic、匈牙利类似，DLX的实际运行情况良好</p><h2 id="应用——数独"><a href="#应用——数独" class="headerlink" title="应用——数独"></a>应用——数独</h2><p>DLX有很多应用，最经典的是<strong>数独</strong>问题，DLX 的难点，不全在于链表的建立，而在于建模，即如何转化为精确覆盖问题，一般来说，我们会赋予行列意义，<strong>行表示决策，对应选或不选</strong>，<strong>列表示限制，对应题目条件</strong></p><p>那么看看数独问题：<a href="https://www.luogu.com.cn/problem/P1784">数独</a></p><p>每一次填数可以用一个三元组  $(x, y, z)$ 表示，意为“在第 $x$ 行第 $y$ 列填入数字 $z$ ”，而题目的限制有四个：每个格子只能填一个数，行、列、九宫格要满足不重复</p><p>那么考虑如何定义DLX的行和列：</p><p>行对应决策，很好定义，因为三元组 $(x, y, z)$ 中 $x, y, z \in [1, 9]$ 故一共有  $9^3 = 729$ 种决策，我们就让DLX中有729行</p><p>而列对应限制，先考虑每个格子只能填一个数，我们需要81列来保证这个性质；然后，对于数独中的每一行，我们需要一列保证该行有且仅有一个1，又一列保证该行有且仅有一个2，……，最终对于数独中的每一行，我们要9列，一共9行，则为了保证数独的行不重复，我们要 $9 \times 9 = 81$ 行；对于数独的列、九宫同理，一共要用 $81 \times 4 = 324$ 列</p><p>而DLX的729行中每一行对应一个决策，即填入一个数字，这只会影响四个限制各一个，故有 $729 \times 4 = 2916$ 个1</p><p>综上，我们的DLX有729行，324列，2916个1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l[N], r[N], u[N], d[N];</span><br><span class="line"><span class="keyword">int</span> si[N], row[N], col[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x; ++i)</span><br><span class="line">&#123;</span><br><span class="line">l[i] = i - <span class="number">1</span>, r[i] = i + <span class="number">1</span>;</span><br><span class="line">col[i] = u[i] = d[i] = i;</span><br><span class="line">    si[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">l[<span class="number">0</span>] = x, r[x] = <span class="number">0</span>;</span><br><span class="line">idx = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;hh, <span class="keyword">int</span> &amp;tt, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">row[idx] = x, col[idx] = y, ++si[y];</span><br><span class="line">u[idx] = y, d[idx] = d[y], u[d[y]] = idx, d[y] = idx;</span><br><span class="line">r[hh] = l[tt] = idx, r[idx] = tt, l[idx] = hh;</span><br><span class="line">tt = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r[l[p]] = r[p], l[r[p]] = l[p];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[p]; i != p; i = d[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j])</span><br><span class="line">&#123;</span><br><span class="line">--si[col[j]];</span><br><span class="line">u[d[j]] = u[j], d[u[j]] = d[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = u[p]; i != p; i = u[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j])</span><br><span class="line">&#123;</span><br><span class="line">u[d[j]] = j, d[u[j]] = j;</span><br><span class="line">++si[col[j]];</span><br><span class="line">&#125;</span><br><span class="line">r[l[p]] = p, l[r[p]] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!r[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> p = r[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r[<span class="number">0</span>]; i; i = r[i])</span><br><span class="line"><span class="keyword">if</span> (si[i] &lt; si[p])</span><br><span class="line">p = i;</span><br><span class="line"><span class="built_in">remove</span>(p);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[p]; i != p; i = d[i])</span><br><span class="line">&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(row[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j])</span><br><span class="line"><span class="built_in">remove</span>(col[j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dance</span>())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j])</span><br><span class="line"><span class="built_in">resume</span>(col[j]);</span><br><span class="line">ans.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">resume</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; dlx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x - <span class="number">1</span>) * <span class="number">9</span> * <span class="number">9</span> + (y - <span class="number">1</span>) * <span class="number">9</span> + num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> dx = (x - <span class="number">1</span>) / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> dy = (y - <span class="number">1</span>) / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> room = (dx - <span class="number">1</span>) * <span class="number">3</span> + dy, id = <span class="built_in">get_id</span>(x, y, num);</span><br><span class="line"><span class="keyword">int</span> hh = dlx.idx, tt = dlx.idx;</span><br><span class="line">dlx.<span class="built_in">insert</span>(hh, tt, id, <span class="number">81</span> * <span class="number">0</span> + (x - <span class="number">1</span>) * <span class="number">9</span> + y);</span><br><span class="line">dlx.<span class="built_in">insert</span>(hh, tt, id, <span class="number">81</span> * <span class="number">1</span> + (x - <span class="number">1</span>) * <span class="number">9</span> + num);</span><br><span class="line">dlx.<span class="built_in">insert</span>(hh, tt, id, <span class="number">81</span> * <span class="number">2</span> + (y - <span class="number">1</span>) * <span class="number">9</span> + num);</span><br><span class="line">dlx.<span class="built_in">insert</span>(hh, tt, id, <span class="number">81</span> * <span class="number">3</span> + (room - <span class="number">1</span>) * <span class="number">9</span> + num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ans</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : dlx.ans)</span><br><span class="line">&#123;</span><br><span class="line">x = (i - <span class="number">1</span>) / <span class="number">9</span> / <span class="number">9</span> + <span class="number">1</span>;</span><br><span class="line">y = (i - <span class="number">1</span>) / <span class="number">9</span> % <span class="number">9</span> + <span class="number">1</span>;</span><br><span class="line">z = (i - <span class="number">1</span>) % <span class="number">9</span> + <span class="number">1</span>;</span><br><span class="line">a[x][y] = z;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dlx.<span class="built_in">init</span>(<span class="number">324</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line"><span class="keyword">if</span> (a[i][j])</span><br><span class="line"><span class="built_in">insert</span>(i, j, a[i][j]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">9</span>; ++k)</span><br><span class="line"><span class="built_in">insert</span>(i, j, k);</span><br><span class="line">&#125;</span><br><span class="line">dlx.<span class="built_in">dance</span>();</span><br><span class="line"><span class="built_in">get_ans</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; ++j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i][j]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展应用——重复覆盖问题"><a href="#拓展应用——重复覆盖问题" class="headerlink" title="拓展应用——重复覆盖问题"></a>拓展应用——重复覆盖问题</h2><p>在精确覆盖问题中，考虑将条件“每一列<strong>恰好</strong>有一个1”改为“每一列<strong>至少</strong>有一个1”，这个问题就是<strong>重复覆盖问题</strong></p><p>解决重复覆盖问题和精确覆盖问题一样，主要还是DLX，即十字双向链表优化dfs，不同的地方是，每次删除的时候只删掉所选行的所有1所在列，并不像精确覆盖一样删掉和1同列的所有1的所在行（这是因为可以重复覆盖），这样，dfs的深度将变得无法预测，于是我们使用<strong>IDA</strong>*</p><p>此时就不需要保证矩阵中1的个数不多了，反而，我们需要保证<strong>答案选的行数不多</strong>，另外重复覆盖问题很暴力，所以容易TLE</p><p><a href="https://www.acwing.com/problem/content/2715/">重复覆盖问题</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10000</span> + <span class="number">5</span>, NN = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l[N], r[N], u[N], d[N];</span><br><span class="line"><span class="keyword">int</span> si[N], row[N], col[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">bool</span> vis[NN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x; ++i)</span><br><span class="line">&#123;</span><br><span class="line">l[i] = i - <span class="number">1</span>, r[i] = i + <span class="number">1</span>;</span><br><span class="line">col[i] = u[i] = d[i] = i;</span><br><span class="line">si[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">l[<span class="number">0</span>] = x, r[x] = <span class="number">0</span>;</span><br><span class="line">idx = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;hh, <span class="keyword">int</span> &amp;tt, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">row[idx] = x, col[idx] = y, ++si[y];</span><br><span class="line">u[idx] = y, d[idx] = d[y], u[d[y]] = idx, d[y] = idx;</span><br><span class="line">r[hh] = l[tt] = idx, r[idx] = tt, l[idx] = hh;</span><br><span class="line">tt = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> p)</span> <span class="comment">//删除p列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[p]; i != p; i = d[i])</span><br><span class="line">&#123;</span><br><span class="line">r[l[i]] = r[i];</span><br><span class="line">l[r[i]] = l[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = u[p]; i != p; i = u[i])</span><br><span class="line">&#123;</span><br><span class="line">r[l[i]] = i;</span><br><span class="line">l[r[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">vis[i] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r[<span class="number">0</span>]; i; i = r[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[col[i]])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">++res;</span><br><span class="line">vis[col[i]] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = d[i]; j != i; j = d[j])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = r[j]; k != j; k = r[k])</span><br><span class="line">vis[col[k]] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dance</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (o + <span class="built_in">h</span>() &gt; depth)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!r[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> p = r[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r[<span class="number">0</span>]; i; i = r[i])</span><br><span class="line"><span class="keyword">if</span> (si[i] &lt; si[p])</span><br><span class="line">p = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[p]; i != p; i = d[i])</span><br><span class="line">&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(row[i]);</span><br><span class="line"><span class="built_in">remove</span>(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j])</span><br><span class="line"><span class="built_in">remove</span>(j);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dance</span>(o + <span class="number">1</span>, depth))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j])</span><br><span class="line"><span class="built_in">resume</span>(j);</span><br><span class="line"><span class="built_in">resume</span>(i);</span><br><span class="line">ans.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; dlx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">dlx.<span class="built_in">init</span>(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, hh, tt, x; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">hh = tt = dlx.idx; <span class="comment">//换行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span> (x)</span><br><span class="line">dlx.<span class="built_in">insert</span>(hh, tt, i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!dlx.<span class="built_in">dance</span>(<span class="number">0</span>, depth))</span><br><span class="line">++depth;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, depth);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : dlx.ans)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 跳舞表、舞蹈链（&lt;del&gt;神一般的翻译&lt;/del&gt;）&lt;/p&gt;</summary>
    
    
    
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="Dancing Links,DLX" scheme="https://dyd-true.github.io/tags/Dancing-Links-DLX/"/>
    
    <category term="搜索" scheme="https://dyd-true.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
    <category term="链表" scheme="https://dyd-true.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/13总结</title>
    <link href="https://dyd-true.github.io/2021/12/13/test2021-12-13%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/13/test2021-12-13%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-13T11:26:31.000Z</published>
    <updated>2021-12-19T12:13:11.567Z</updated>
    
    <content type="html"><![CDATA[<p> 连着考，我太难了……</p><span id="more"></span><h1 id="test2021-12-13总结"><a href="#test2021-12-13总结" class="headerlink" title="test2021/12/13总结"></a>test2021/12/13总结</h1><p>难得我在一天内改（<del>贺</del>）完了</p><h2 id="题目、成绩和题解"><a href="#题目、成绩和题解" class="headerlink" title="题目、成绩和题解"></a>题目、成绩和题解</h2><p><a href="./day2.pdf">题目</a></p><p><a href="./day2_res.pdf">成绩</a></p><p><a href="./solution.pdf">题解</a></p><h2 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>8：30开考，老规矩先看T1，一看博弈论，完蛋，取石子的结论<strong>忘了</strong>（太久没打博弈论的题了），于是开始手推必胜策略，一开始方向错了，看到样例都是奇数就往<strong>奇偶性</strong>那边想，结果——浪费时间ing</p><p>大概到9：00的样子，去了<strong>厕所</strong>，上大号，在厕所里面灵光一闪，发现其实结论是：<strong>取石子游戏后手必胜，当且仅当各堆石子数的异或和为0</strong>，简证（<del>口胡</del>）如下：首先，胜利的局面是取后所有石子恰好取完，其异或和为0，然后，对于当前情况，只要其异或和为0，先手取后异或和一定不为0，也就一定没赢，现在异或和不为0了，后手只要取成与先手互补，取完后异或和一定又变回0，如此，先手一直占有异或和不为0的情况，后手一直占有异或和为0的情况，最后一定后手胜；反之，如开始时异或和不为0，先手可以通过一次操作使其为0，这样先手就一直占有异或和为0的情况</p><p>于是题目转化为：<strong>求一个最小的代价，使得操作完后的个堆石子数异或和为0</strong></p><p>但这个怎么做呢？由于异或和加减法之间不存在分配律，我又卡题了（<del>嗷嗷嗷，我太弱了，o((&gt;ω&lt; ))o</del>）</p><p>又浪费时间到了9：30的样子，决定<strong>破釜沉舟</strong>，先去把后面两题的暴力打了，然后死磕T1</p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>一看，和昨天的T3有点微妙的相似，反正我的第一思路是一样的：暴力算出函数间两两的交点，然后分每一段讨论，看了一下，如果打的话 $n^2$ 能得40分，但考虑到极容易打错（毕竟分类讨论的话，端点、函数极值、多个函数交于一点、一次项系数为0……特判太多了），再加上我的策略是<strong>赶快打完暴力</strong>，于是就决定先打了 $a_i = 0$ 的部分分，然后暴力模拟每一秒的情况，lca处理位置，时间复杂度 $O(tn\log n)$ ，期望得分10 + 20 = 30，然后就马上跑去看T3了（<strong>埋下伏笔</strong>）</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>计数类dp，没得说，暴力的想法也很简单： $2^n$ 生成数列，然后 $n^2$ LIS（可以 $n\log n$ ，没必要），时间复杂度 $O(2^n n^2)$ ，具体实现用的是<strong>STL的list</strong>，第一次用，感觉效率挺高的，就是不支持下标访问和迭代器加法（但可以自加，即 $++$ ），所以枚举时要处理一下，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIT list<span class="meta-string">&lt;int&gt;</span>::iterator</span></span><br><span class="line">list&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line"><span class="comment">//函数中：</span></span><br><span class="line">b.<span class="built_in">push_back</span>(x);</span><br><span class="line">b.<span class="built_in">pop_back</span>();</span><br><span class="line">b.<span class="built_in">push_front</span>(x);</span><br><span class="line">b.<span class="built_in">pop_front</span>();</span><br><span class="line">LIT i;</span><br><span class="line"><span class="keyword">int</span> _i;</span><br><span class="line"><span class="keyword">for</span> (i = b.<span class="built_in">begin</span>(), _i = <span class="number">1</span>; i != b.<span class="built_in">end</span>(); ++i, ++_i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大概有个这些用法吧，期望得分30</p><h3 id="T1-1"><a href="#T1-1" class="headerlink" title="T1"></a>T1</h3><p>大概是11：00，回到T1，没有后顾之忧，开始<strong>死磕</strong>，有一个比较明显的结论是：设  $Xorsum$ 代表当前异或和，那么最小代价不会大于 $Xorsum$ ，正确性显然</p><p>于是有了一个暴力，就是dfs枚举每个数的改变量 $dt$ ，然后进入下一层，由于时间和 $dt$ 也就是 $a_i$ 的大小直接相关，而 $a_i$ 很大，期望得分5分（<del>太过暴力，打了个寂寞</del>），只会继续死磕，想办法把时间搞得与 $n(n \le 15)$ 相关，中途想到一个 $O(n^2\log a)$ 的二分，然鹅过不了大样例，仔细一想，发现答案不满足单调性（代价为 $a$ 不可以，但也许代价为 $b(b &lt; a)$ 却可以）</p><p>11：49，想到了一个<strong>贪心</strong>的思路：每次处理 $Xorsum$ 的最高位（设为第 $k$ 位），具体地，考虑每一个数  $x$ ，若 $x$ 第 $k$ 位为1，即 $x = \overline{??…?1??…?}$ ，则将 $x$ 变为 $\overline{??…?011…1}$ 时可以使  $Xorsum$ 的第 $k$ 位为0，且代价最小；反之，若 $x$ 第 $k$ 位为0，即 $x = \overline{??…?0??…?}$ ，则将 $x$ 变为 $\overline{??…?100…0}$ 时可以使  $Xorsum$ 的第 $k$ 位为0，且代价最小</p><p>取所有数最小代价中的最小值进行变化，然后再考虑下一位</p><p>花了大概半个小时伪证了一下：首先，每次变化只涉及到第 $k$ 位即以后的，不会影响前面我们已经处理好的，故<strong>正确性没问题</strong>；其次，让 $Xorsum$ 的第 $k$ 位变成0一定是比让它的  $k - 1$ 位变成0需要更大代价的，我们优先保证高位代价最小，这是符合感性的理解的，故<strong>最小性也有一定保证</strong></p><p>毕竟是考场，<strong>实践是检验真理的唯一标准</strong>，所以飞快的打了，调了一会，样例都过了，时间复杂度是 $O(T * bit * n)$ ，其中 $bit$ 是 $Xorsum$ 的二进制位数，跑得飞快，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>, D = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N], ans, b;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> o)</span> <span class="comment">//将x的第o位改变,返回最小代价</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = x, t;</span><br><span class="line">    <span class="keyword">if</span> ((x &gt;&gt; o) &amp; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = <span class="number">1</span> &lt;&lt; o;</span><br><span class="line">        x ^= t;</span><br><span class="line">        x |= (t - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        t = (<span class="number">1</span> &lt;&lt; o);</span><br><span class="line">        x ^= t;</span><br><span class="line">        t = __INT_MAX__ ^ (t - <span class="number">1</span>);</span><br><span class="line">        x &amp;= t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x - y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> o)</span>  <span class="comment">//处理第o位</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mn = (<span class="number">1</span> &lt;&lt; o) + <span class="number">1</span>, mni;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t, tt; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        t = a[i];</span><br><span class="line">        tt = <span class="built_in">change</span>(t, o);</span><br><span class="line">        <span class="keyword">if</span> (tt &lt; mn)</span><br><span class="line">            mn = tt, mni = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">change</span>(a[mni], o);</span><br><span class="line">    ans += mn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;a.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;a.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        ans = b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), b ^= a[i];</span><br><span class="line">        <span class="keyword">while</span> (b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = D; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">                <span class="keyword">if</span> ((b &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">work</span>(i);</span><br><span class="line">                    b = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                        b ^= a[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T3-times-0-5"><a href="#T3-times-0-5" class="headerlink" title="T3 $\times$ 0.5"></a>T3 $\times$ 0.5</h3><p>打完以后看了一会T3，找到一个性质：如果原序列以 $x$ 开头的最长序列（可上可下）长度位 $k$ ，对答案的贡献就是 $2^{n - k}$ ，简证：由于最长序列确定了，这 $k$  个数的位置也就定了，剩下 $n - k$ 个数每个数有两种放法</p><p>正打算打个分段骗点分，时间到，交了</p><h2 id="成绩"><a href="#成绩" class="headerlink" title="成绩"></a>成绩</h2><p>T1贪心过了，时间上碾压标程状压dp的 $O(Tn2^n\log a)$ ，正确性、最小性似乎都是对的（<strong>wfy</strong>大佬造了1w组数据跑出来都是对的），但严谨的证明就只好咕了</p><p>T2出大问题，没看见 $s_i \le 10^{15}$ ，<strong>不开long long见祖宗了</strong>，值得一提的是<strong>wfy</strong>大佬T2和题解一个思路，AC了</p><p>T3打的暴力，似乎大家的暴力思路都差不多，但是我用的<strong>list一枝独秀</strong>，开了O2卡到了30分（<del>不开O2只有5分</del>）</p><p>总分100 + 0 + 30，有做的好的，也有不足之处吧</p><h2 id="改错"><a href="#改错" class="headerlink" title="改错"></a>改错</h2><h3 id="T1-2"><a href="#T1-2" class="headerlink" title="T1"></a>T1</h3><p>略，可以看看题解的做法，说实话看到  $n \le 15$ 却没想到状压dp这还是说明了我对dp不熟练</p><h3 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h3><p>中午从<strong>wfy</strong>大佬哪里听了一下思路，大概和我差不多，只是先<strong>对于直线按斜率排序</strong>，这样就不必每两个直线都解一次交点，打完以后处理了几个细节，很快过了小样例，结果交上去WA20分，错的点都是相差1，估计是哪个细节挂了，调半天发现了几个问题，但总是没对</p><p>看std，发现它和我的细节处理完全不一样（尤其是端点的开还是闭，它和我是反的），而且它用了一个<strong>我看不懂的斜率优化</strong>，一边感叹<strong>wfy</strong>大佬<strong>太巨了</strong>，一边含泪<del>贺了此题</del>（虽是贺的，也调了半天）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, D = <span class="number">25</span>, INF = __INT_MAX__;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL a, b;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    IL <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Line &amp;t) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; t.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ques</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, t;</span><br><span class="line">    IL <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Ques &amp;<span class="keyword">_t</span>) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> t &lt; <span class="keyword">_t</span>.t;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; que[N];</span><br><span class="line"><span class="keyword">int</span> h[N], idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dep[N], f[N][D];</span><br><span class="line"><span class="keyword">int</span> ans[N], bt[N];</span><br><span class="line"><span class="keyword">int</span> dian[N], dmx;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = (Edge)&#123;h[x], y&#125;, h[x] = idx++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    dep[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        x = q.<span class="built_in">front</span>(), q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">        &#123;</span><br><span class="line">            y = e[i].ver;</span><br><span class="line">            <span class="keyword">if</span> (y == f[x][<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            dep[y] = dep[x] + <span class="number">1</span>;</span><br><span class="line">            f[y][<span class="number">0</span>] = x;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; D; ++i)</span><br><span class="line">                f[y][i] = f[f[y][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">            q.<span class="built_in">push</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y])</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = D - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (dep[f[y][i]] &gt;= dep[x])</span><br><span class="line">            y = f[y][i];</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = D - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (f[y][i] != f[x][i])</span><br><span class="line">            y = f[y][i], x = f[x][i];</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">jiao</span><span class="params">(Line x, Line y)</span>  \\求交点</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.a == y.a)</span><br><span class="line">        <span class="keyword">return</span> (y.b &gt; x.b || (y.b == x.b &amp;&amp; y.id &gt; x.id)) ? <span class="number">-1</span> : INF;</span><br><span class="line">    LL A = y.a - x.a, B = x.b - y.b;</span><br><span class="line">    LL res = B / A + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (B % A == <span class="number">0</span> &amp;&amp; y.id &gt; x.id)</span><br><span class="line">        --res;</span><br><span class="line">    res = <span class="built_in">max</span>(res, (LL)<span class="number">-1</span>);</span><br><span class="line">    res = <span class="built_in">min</span>(res, (LL)INF);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> <span class="comment">//分断,这里的斜率优化有点没看懂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">0</span>, d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (now)</span><br><span class="line">        &#123;</span><br><span class="line">            d = <span class="built_in">jiao</span>(a[bt[now]], a[i]);</span><br><span class="line">            <span class="keyword">if</span> (!d)</span><br><span class="line">            &#123;</span><br><span class="line">                --now;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (now &gt; <span class="number">1</span> &amp;&amp; dian[now - <span class="number">1</span>] &gt;= d)</span><br><span class="line">            &#123;</span><br><span class="line">                --now;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bt[++now] = i;</span><br><span class="line">        <span class="keyword">if</span> (now &gt; <span class="number">1</span>)</span><br><span class="line">            dian[now - <span class="number">1</span>] = d;</span><br><span class="line">    &#125;</span><br><span class="line">    dmx = now - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">get_f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t)</span> <span class="comment">//找到x的t祖先</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = D - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (t &gt;= (<span class="number">1</span> &lt;&lt; i))</span><br><span class="line">        &#123;</span><br><span class="line">            t -= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            x = f[x][i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">where</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> t)</span> <span class="comment">//判断从from到to在t步内走到哪里</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa = <span class="built_in">lca</span>(from, to);</span><br><span class="line">    <span class="keyword">int</span> l1 = dep[from] - dep[fa], l2 = dep[to] - dep[fa];</span><br><span class="line">    <span class="keyword">if</span> (t &lt;= l1)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">get_f</span>(from, t);</span><br><span class="line">    <span class="keyword">if</span> (t &lt;= l1 + l2)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">get_f</span>(to, l1 + l2 - t);</span><br><span class="line">    <span class="keyword">return</span> to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">get_ans</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(que + <span class="number">1</span>, que + <span class="number">1</span> + m);</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>, last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dian[i] &lt; que[j].t &amp;&amp; i &lt;= dmx)</span><br><span class="line">        &#123;</span><br><span class="line">            now = <span class="built_in">where</span>(now, a[bt[i]].id, dian[i] - last);</span><br><span class="line">            last = dian[i];</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            now = <span class="built_in">where</span>(now, a[bt[i]].id, que[j].t - last);</span><br><span class="line">            last = que[j].t;</span><br><span class="line">            ans[que[j].id] = now;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;ant.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;ant.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        h[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i].b), a[i].id = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i].a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, s, t; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;s, &amp;t);</span><br><span class="line">        ++s, ++t; <span class="comment">//最让人讨厌的,题目和std都是从0开始编号,而我喜欢从1开始</span></span><br><span class="line">        <span class="built_in">add</span>(s, t), <span class="built_in">add</span>(t, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;que[i].t), que[i].id = i;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="built_in">work</span>();</span><br><span class="line">    <span class="built_in">get_ans</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i] - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a>T3</h3><p>T3比较简单，毕竟那个性质我考场上退了个大概，思路题解说的很清楚了</p><p>值得一提的是，T3的std是<strong>歪果仁</strong>打的，所有函数和变量名全部用的是<strong>克罗地亚语</strong>，对我的对拍产生很大阻碍</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; (-(x)))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> //<span class="title">x</span>:</span>值,y:个数</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125; f[N], d[N], ans;</span><br><span class="line"><span class="function">IL Date <span class="title">dmax</span><span class="params">(Date x, Date y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.x == y.x)</span><br><span class="line">        x.y = (x.y + y.y) % P;  <span class="comment">//若相等就相加,否则跟新</span></span><br><span class="line">    <span class="keyword">return</span> x.x &gt;= y.x ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT_up</span>  //维护上升的树状数组</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Date c[N];</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x, Date d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x += <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">for</span> (;x &lt; N; x += <span class="built_in">lowbit</span>(x))</span><br><span class="line">            c[x] = <span class="built_in">dmax</span>(c[x], d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL Date <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x += <span class="number">5</span>;</span><br><span class="line">        Date res = (Date)&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (;x; x -= <span class="built_in">lowbit</span>(x))</span><br><span class="line">            res = <span class="built_in">dmax</span>(res, c[x]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; up;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT_down</span> //维护下降的树状数组</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Date c[N];</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x, Date d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x += <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">for</span> (;x; x -= <span class="built_in">lowbit</span>(x))</span><br><span class="line">            c[x] = <span class="built_in">dmax</span>(c[x], d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL Date <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x += <span class="number">5</span>;</span><br><span class="line">        Date res = (Date)&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (;x &lt; N; x += <span class="built_in">lowbit</span>(x))</span><br><span class="line">            res = <span class="built_in">dmax</span>(res, c[x]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; down;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; _a;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">lsh</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _a.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        _a.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    <span class="built_in">sort</span>(_a.<span class="built_in">begin</span>(), _a.<span class="built_in">end</span>());</span><br><span class="line">    _a.<span class="built_in">erase</span>(<span class="built_in">unique</span>(_a.<span class="built_in">begin</span>(), _a.<span class="built_in">end</span>()), _a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">       a[i] = <span class="built_in">lower_bound</span>(_a.<span class="built_in">begin</span>(), _a.<span class="built_in">end</span>(), a[i]) - _a.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">get_up</span><span class="params">()</span> <span class="comment">//dp得最长上升</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Date t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        t = up.<span class="built_in">ask</span>(a[i] - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.x == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = (Date)&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">            up.<span class="built_in">change</span>(a[i], (Date)&#123;<span class="number">1</span>, <span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = t;</span><br><span class="line">            ++t.x;</span><br><span class="line">            up.<span class="built_in">change</span>(a[i], t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">get_down</span><span class="params">()</span> <span class="comment">//dp得最长下降</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Date t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        t = down.<span class="built_in">ask</span>(a[i] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.x == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            d[i] = (Date)&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">            down.<span class="built_in">change</span>(a[i], (Date)&#123;<span class="number">1</span>, <span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            d[i] = t;</span><br><span class="line">            ++t.x;</span><br><span class="line">            down.<span class="built_in">change</span>(a[i], t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = (LL)res * x % P;</span><br><span class="line">        x = (LL)x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">get_ans</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans = <span class="built_in">dmax</span>(ans, (Date)&#123;f[i].x + d[i].x + <span class="number">1</span>, ((LL)f[i].y * d[i].y) % P&#125;);</span><br><span class="line">    ans.y = ((LL)ans.y * <span class="built_in">qpow</span>(<span class="number">2</span>, n - ans.x)) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;sequence.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;sequence.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">lsh</span>();</span><br><span class="line">    <span class="built_in">get_up</span>();</span><br><span class="line">    <span class="built_in">get_down</span>();</span><br><span class="line">    <span class="built_in">get_ans</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ans.x, ans.y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h2><p>没想到连着两天考试（而且明天whk还要考月考，慌得一笔），昨天考试的总结只好暂时鸽一下，尽快补上！</p><p>luogu的splay也没写完，更只有鸽一会了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 连着考，我太难了……&lt;/p&gt;</summary>
    
    
    
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="斜率优化" scheme="https://dyd-true.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
    <category term="树状数组" scheme="https://dyd-true.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="状态压缩" scheme="https://dyd-true.github.io/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
    <category term="STL" scheme="https://dyd-true.github.io/tags/STL/"/>
    
    <category term="贪心" scheme="https://dyd-true.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="LIS" scheme="https://dyd-true.github.io/tags/LIS/"/>
    
    <category term="博弈论" scheme="https://dyd-true.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/12总结</title>
    <link href="https://dyd-true.github.io/2021/12/13/test2021-12-12%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/13/test2021-12-12%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-13T11:26:06.000Z</published>
    <updated>2021-12-17T03:49:50.257Z</updated>
    
    <content type="html"><![CDATA[<p> 给巨佬们陪考</p><span id="more"></span><h1 id="test2021-12-12总结"><a href="#test2021-12-12总结" class="headerlink" title="test2021/12/12总结"></a>test2021/12/12总结</h1><p>翘掉whk的周考来陪<strong>rusun</strong>巨佬和<strong>wfy</strong>巨佬考WC模拟</p><h2 id="题目、成绩和题解"><a href="#题目、成绩和题解" class="headerlink" title="题目、成绩和题解"></a>题目、成绩和题解</h2><p>题目：</p><p><a href="./A.pdf">A</a>、<a href="./B.pdf">B</a>、<a href="./C.pdf">C</a></p><p><a href="./res.txt">成绩</a></p><p>题解：</p><p><a href="./Asol.pdf">A</a>、<a href="./Bsol.pdf">B</a>、<a href="./Csol.pdf">C</a></p><h2 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h2><p>晚上考试，有点意思</p><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>先看T1，感觉像是博弈论的SG函数，但又发现不行，那个 $10^{100}$ 回合明显直接理解成<strong>足够多回合</strong>，看了半天没思路，先去<strong>瞟一下后面两题</strong></p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>感觉像个dp，至少可以做个部分分，  $n, a_i \le 30$ 的28分还是非常好拿的，其它感觉要<strong>推性质</strong>，先看T3去</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>看到“浮点数比较（允许误差范围： $10^{-9}$ ）” 心就凉了一半，读完题想了个大概思路：解出直线两两间的交点，然后分类讨论，但定义域为 $[l_i, r_i)$ 这个限制不好解决</p><h3 id="T1-1"><a href="#T1-1" class="headerlink" title="T1"></a>T1</h3><p>看了一圈，还是回到T1，首先DAG的情况很好解决，自然联想到缩点，于是打了个分段：<strong>缩点</strong>解决  $K = 0$ ；<strong>记忆化搜索</strong>（本质是topu + dp）搞掉DAG；然后玄学搞  $a_i \le 1$ 的部分（由于是subtask，所有没有分）</p><p>期间发现一个（<del>在非subtask下</del>）很有用的性质：</p><ol><li><strong>如果节点 $x$ 的权值是最大的，那么 $x$ 的出边没有意义</strong></li><li><strong>如果节点 $x$ 的出边数小于等于  $K$ ，那么 $x$ 的出边没有意义</strong></li></ol><p>这两条性质正确性显然，它们可以减少边的数量，增加DAG的概率（<del>玄之又玄</del>）</p><p>期望得分17 + 22 + $\xi$ </p><h3 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h3><p>感觉T2是唯一认真去想了一会正解的，毕竟这个很明显是要推性质</p><p>想了一会（具体多久我忘了，反正过程挺曲折的），大概有了个思路：<strong>先枚举是那一种牌出了个对子，让其牌数减2，然后题目就转化为：每次可以让连续的三个数同时减1，求最后使所有数模3都为0的方案数</strong></p><p>这时候发现一个性质，如图：</p><p><img src="https://s2.loli.net/2021/12/13/ycIrvst67wgXQDS.png" alt="性质"></p><p>蓝色是下标，黑色是数字，红色是模3的余数，对于第一个数28，它模3余1，这意味着黄色部分（下标为  $1 \sim 3$ ）一定要一起减一个 $3k + 1(k \in \mathbb{N})$ ，即至少减1，这样，第二个数模3就变成0了，此时还能改变第二个数的是区间  $2 \sim 4$ （因为 $1 \sim 3$ ）已经确定了，那么区间 $2 \sim 4$ 一定要一起减一个 $3k(k \in \mathbb{N})$ ，以此类推，可以发现可以用  $O(n)$ 的时间确定最少减的次数  $x$ （或者判断出根本不可能使所有数模3都为0），然后满足条件的减的次数就是 $3k + x(k \in \mathbb{N})$ 再贪心的求一下 $k$ 的上界</p><p>时间复杂度 $O(n^2)$ ，期望得分61，还是给个代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL INF = (LL)<span class="number">1e18</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line">LL y, c;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ans</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL l[<span class="number">3</span>], r[<span class="number">3</span>];</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">update</span><span class="params">(LL y, LL c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        l[y % <span class="number">3</span>] = <span class="built_in">min</span>(l[y % <span class="number">3</span>], y / <span class="number">3</span>);</span><br><span class="line">        r[y % <span class="number">3</span>] = <span class="built_in">max</span>(r[y % <span class="number">3</span>], y / <span class="number">3</span> + c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL LL <span class="title">get_ans</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LL res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">            res += <span class="built_in">max</span>((LL)<span class="number">0</span>, r[i] - l[i] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ans;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> l, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x[l] -= d;</span><br><span class="line">    x[l + <span class="number">1</span>] -= d;</span><br><span class="line">    x[l + <span class="number">2</span>] -= d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(x[l], <span class="built_in">min</span>(x[l + <span class="number">1</span>], x[l + <span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    y = c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        b[i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">2</span> &lt;= n)</span><br><span class="line">        &#123;</span><br><span class="line">            t = b[i] % <span class="number">3</span>;</span><br><span class="line">            y += t;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">min</span>(b, i) &lt; t)</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            <span class="built_in">del</span>(b, i, t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (b[i] % <span class="number">3</span> != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t; i + <span class="number">2</span> &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        t = <span class="built_in">min</span>(b, i);</span><br><span class="line">        c += (t / <span class="number">3</span>);</span><br><span class="line">        <span class="built_in">del</span>(b, i, t);</span><br><span class="line">    &#125;</span><br><span class="line">    ans.<span class="built_in">update</span>(y, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;ex_mahjongnya1.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;t.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), t = (a[i] + t) % <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (t != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans.l[<span class="number">0</span>] = ans.l[<span class="number">1</span>] = ans.l[<span class="number">2</span>] = INF;</span><br><span class="line">    ans.r[<span class="number">0</span>] = ans.r[<span class="number">1</span>] = ans.r[<span class="number">2</span>] = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt;= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] -= <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">work</span>();</span><br><span class="line">            a[i] += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans.<span class="built_in">get_ans</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a>T3</h3><p>巨难打，思路和最开始一样，<strong>细节居多</strong>，打的很暴力，大概是找到所有交点记录下来，询问时二分</p><h2 id="成绩"><a href="#成绩" class="headerlink" title="成绩"></a>成绩</h2><p>T1因为subtask的原因只骗了39，T2得了61分正常（<del>万恶的出题人真的是一分都不肯多给我</del>），T3爆0了</p><p><strong>wfy</strong>大佬被subtask坑惨了，T1不开subtask他70分（很快他就改成AC了）的，结果细节出错+subtask=0</p><h2 id="改题"><a href="#改题" class="headerlink" title="改题"></a>改题</h2><h3 id="T1-2"><a href="#T1-2" class="headerlink" title="T1"></a>T1</h3><p>题解的 $O(n + m)$ 方法没看懂，请教<strong>wfy</strong>大佬后知道了一个 $O(n \log n)$ 的方法</p><p>主要思路是：<strong>对于无法确定转移顺序的dp，用类似Dij的思想，每次取出最大/最小值取更新其它状态</strong></p><p>其中注意判重，记已经用于跟新的点就不要再跟新了（<del>调了一天</del>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, K;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; from[N]; <span class="comment">//建反向边,记录来边</span></span><br><span class="line"><span class="keyword">int</span> du[N];</span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Date &amp;t) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> f &lt; t.f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ; </span><br><span class="line">priority_queue&lt;Date&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">        f[i] = a;</span><br><span class="line">        q.<span class="built_in">push</span>((Date)&#123;f[i], i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        from[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    Date x;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        x = q.<span class="built_in">top</span>(), q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[x.id])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[x.id] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : from[x.id])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((++du[i]) &lt;= K)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (x.f &gt; f[i])</span><br><span class="line">            &#123;</span><br><span class="line">                f[i] = x.f;</span><br><span class="line">                q.<span class="built_in">push</span>((Date)&#123;f[i], i&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T2-2"><a href="#T2-2" class="headerlink" title="T2"></a>T2</h3><p>题解前面思路还和我一样，结果后面不知的他干了什么就成 $O(n)$ 了！完全没看懂，简直离了大谱了，下辈子再改吧，咕了咕了（<del>要被教练打死</del>）</p><h3 id="T3-2"><a href="#T3-2" class="headerlink" title="T3"></a>T3</h3><p>就按照题解打，贺之贺之</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2000</span> + <span class="number">5</span>, M = <span class="number">50000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> D INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">D f[M], que[M];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; to[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    D a, b, mx;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Line &amp;t) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; t.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, vector&lt;D&gt; &amp;dp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> q[N], hh, tt;</span><br><span class="line">        <span class="keyword">static</span> D ts[N];</span><br><span class="line">        hh = <span class="number">1</span>, tt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = a[l].l; i &lt; N; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ts[i - a[l].l] = -a[l].a * i + a[l].b + dp[i - a[l].l];</span><br><span class="line">            <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; ts[q[tt]] &gt;= ts[i - a[l].l])</span><br><span class="line">                --tt;</span><br><span class="line">            q[++tt] = i - a[l].l;</span><br><span class="line">            <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; q[hh] + a[l].r &lt;= i)</span><br><span class="line">                ++hh;</span><br><span class="line">            <span class="keyword">if</span> (hh &gt; tt)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j : to[i])</span><br><span class="line">                f[j] = <span class="built_in">min</span>(f[j], ts[q[hh]] + a[l].a * que[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;D&gt; _dp(dp);</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= mid; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = N - <span class="number">1</span>; j &gt;= a[i].r; --j)</span><br><span class="line">            _dp[j] = <span class="built_in">min</span>(_dp[j], _dp[j - a[i].r] + a[i].mx);</span><br><span class="line">    <span class="built_in">solve</span>(mid + <span class="number">1</span>, r, _dp);</span><br><span class="line">    _dp = dp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= r; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = N - <span class="number">1</span>; j &gt;= a[i].l; --j)</span><br><span class="line">            _dp[j] = <span class="built_in">min</span>(_dp[j], _dp[j - a[i].l] + a[i].b);</span><br><span class="line">    <span class="built_in">solve</span>(l, mid, _dp);</span><br><span class="line">    _dp.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lf%lf&quot;</span>, &amp;a[i].l, &amp;a[i].r, &amp;a[i].a, &amp;a[i].b);</span><br><span class="line">        a[i].mx = a[i].b + (a[i].r - a[i].l) * a[i].a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;que[i]);</span><br><span class="line">        to[(<span class="keyword">int</span>)que[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">        f[i] = INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="function">vector&lt;D&gt; <span class="title">ans</span><span class="params">(N, INF)</span></span>;</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">solve</span>(<span class="number">1</span>, n, ans);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.10lf\n&quot;</span>, f[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h2><p>断断续续写了好些天，都12/17了才写到这里，大概算是完了吧，whk月考爆炸了，太弱了，心态爆炸</p><p>ps：加上了这几个字刚刚好2021词</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 给巨佬们陪考&lt;/p&gt;</summary>
    
    
    
    
    <category term="分治" scheme="https://dyd-true.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="Tarjan" scheme="https://dyd-true.github.io/tags/Tarjan/"/>
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="优化" scheme="https://dyd-true.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
    <category term="单调队列" scheme="https://dyd-true.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>LCT</title>
    <link href="https://dyd-true.github.io/2021/12/12/LCT/"/>
    <id>https://dyd-true.github.io/2021/12/12/LCT/</id>
    <published>2021-12-12T06:27:44.000Z</published>
    <updated>2021-12-12T09:02:14.067Z</updated>
    
    <content type="html"><![CDATA[<p> 背模板吧</p><span id="more"></span><h1 id="LCT"><a href="#LCT" class="headerlink" title="LCT"></a>LCT</h1><p><strong>LCT</strong>，<strong>Link Cut Tree</strong>，中文叫做<strong>动态树</strong>，顾名思义，是一种维护动态的树的数据结构，可以维护一个森林，支持加边、删边操作（但必须保证是<strong>树</strong>），时间都是 $O(\log n)$ ，常数有点大</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其实主要思路是<strong>将一棵树拆成很多个splay</strong></p><h3 id="虚实边"><a href="#虚实边" class="headerlink" title="虚实边"></a>虚实边</h3><p>和树剖类似，动态树将边分为<strong>虚边</strong>和<strong>实边</strong>，每一个点到其儿子节点的所有边中，<strong>最多有一条实边（可以没有）</strong>，而于树剖不同的是，我们用<strong>平衡树</strong>维护实边构成的路径，具体地，每一条<strong>只由实边构成的、极大的路径</strong>（特别的，<strong>如果一个点没有实边与其相连，我们认为这个点对应一个只包含自己的实边路径</strong>）都对应一个splay，splay的<strong>中序遍历</strong>，就是要维护的路径（从上到下），而splay的<strong>后继和前驱</strong>就对应树上的<strong>父子关系</strong>，而对于虚边，我们用splay的<strong>根节点维护</strong>（具体的，根节点的父亲对于虚边上的父亲）， 如图，实线对于实边，虚线对于虚边，红色部分对于一棵splay，不难发现，在这样的定义下，所有点都对应位于的实边路径：</p><p><img src="https://s2.loli.net/2021/12/12/aHpuSNOeUBWkoqM.png" alt="实虚边"></p><p>为了维护虚实边，我们有以下操作</p><h3 id="accecss"><a href="#accecss" class="headerlink" title="accecss"></a>accecss</h3><p> $access(x)$ 可以将树上从根节点到点 $x$ 之间的所有边变成实边（明显它们也就在同一个实边路径上了），并且 $x$ 下方再无该实边路径上的点（换句话说， $x$ 就是该实边路径的终点），这是LCT最基本的操作，执行完毕后 $x$  就是所在splay的根，具体如图：</p><p><img src="https://s2.loli.net/2021/12/12/GA6aSNO9JPIkzRQ.png" alt="acess"></p><p>如果要把 $x$ 和 $y$ 所在实边相连，可以把 $y$ 转到它所在splay的根，此时 $y$ 的左子树就对应 $y$ 所在实边中 $y$ 上方的部分，右子树就对应 $y$ 所在实边中 $y$ 下方的部分，然后直接让 $y$ 的右儿子指向 $x$ （我们从下往上进行，所以这时的 $x$ 是处理完毕的，并且一定是其所在实边对应slpay的根，这相当于将 $x$ 所在的splay拿来代替 $y$ 的右子树），这样， $y$ 所在实边中 $y$ 下方的部分就变成 $x$ 所在的那条实边了，特别的，第一次操作时让 $x$ 的右子树为空（保证 $x$ 就是该实边路径的终点）</p><p>要完成access，只需从 $x$ 开始向上操作，直到根节点即可</p><h3 id="is-root"><a href="#is-root" class="headerlink" title="is root"></a>is root</h3><p> $is\_rt(x)$ 可以判断 $x$ 是否是<strong>所在slpay</strong>的根节点，注意判断的不是原树的根节点，只需看 $x$ 的父亲是否有 $x$ 这个儿子即可（slpay根节点的父亲维护的时虚边）</p><h3 id="make-root"><a href="#make-root" class="headerlink" title="make root"></a>make root</h3><p> $make\_rt(x)$ 可以将 $x$ 变成所在树的根节点（因为树是无根树），只需先 $access(x)$ ，此时 $x$ 和根必定是同一实边路径的终点和起点，翻转即可</p><h3 id="find-root"><a href="#find-root" class="headerlink" title="find root"></a>find root</h3><p> $find\_rt(x)$ 可以找到 $x$ 所在树的根节点，并将其转到splay的根节点上，只需先 $access(x)$ ，然后一直向 $x$ 的左子树走即可，走时注意push down</p><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p> $split(x, y)$ 可以将 $x$ 到 $y$ 的路径变成实边路径，只要先 $make\_rt(x)$ ，然后 $access(y)$ 即可</p><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><p> $link(x, y)$ 判断 $x, y$ 是否联通，如果不连通就加边 $(x, y)$ ，只要 $make\_rt(x)$ 然后判断 $find\_rt(y)$ 是否等于 $x$ 不等则令 $fa(x) = y$ （因为make root后 $x$ 一定是splay的根节点）</p><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><p> $cut(x, y)$ 判断  $x, y$ 之间是否有边，如果有，就删除边 $(x, y)$ ，只要 $make\_rt(x)$ 然后判断 $find\_rt(y) = x \wedge fa(y) = x \wedge y\text{没有左儿子}$  ，成立就断开 $x, y$ 之间的边（双向断），然后push up</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.luogu.com.cn/problem/P3690">【模板】动态树</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Slpay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">2</span>], fa, v;</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"><span class="keyword">bool</span> rev;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ch(x, y) tr[(x)].ch[(y)]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fa(x) tr[(x)].fa</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> v(x) tr[(x)].v</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sum(x) tr[(x)].sum</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rev(x) tr[(x)].rev</span></span><br><span class="line">&#125; tr[N];</span><br><span class="line"><span class="keyword">int</span> stk[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tag_rev</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>),<span class="built_in">ch</span>(x, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">rev</span>(x) ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sum</span>(x) = <span class="built_in">sum</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)) ^ <span class="built_in">sum</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>)) ^ <span class="built_in">v</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">rev</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">tag_rev</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)), <span class="built_in">tag_rev</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">rev</span>(x) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_rt</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ch</span>(<span class="built_in">fa</span>(x), <span class="number">0</span>) != x &amp;&amp; <span class="built_in">ch</span>(<span class="built_in">fa</span>(x), <span class="number">1</span>) != x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">ch</span>(y, <span class="number">1</span>) == x;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">is_rt</span>(y))</span><br><span class="line"><span class="built_in">ch</span>(z, <span class="built_in">ch</span>(z, <span class="number">1</span>) == y) = x;</span><br><span class="line"><span class="built_in">fa</span>(x) = z;</span><br><span class="line"><span class="built_in">ch</span>(y, k) = <span class="built_in">ch</span>(x, k ^ <span class="number">1</span>), <span class="built_in">fa</span>(<span class="built_in">ch</span>(x, k ^ <span class="number">1</span>)) = y;</span><br><span class="line"><span class="built_in">ch</span>(x, k ^ <span class="number">1</span>) = y, <span class="built_in">fa</span>(y) = x;</span><br><span class="line"><span class="built_in">push_up</span>(y), <span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>, t = x;</span><br><span class="line">stk[++top] = t;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">is_rt</span>(t))</span><br><span class="line">stk[++top] = t = <span class="built_in">fa</span>(t);</span><br><span class="line"><span class="keyword">while</span> (top)</span><br><span class="line"><span class="built_in">push_down</span>(stk[top--]);</span><br><span class="line"><span class="keyword">int</span> y, z;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">is_rt</span>(x))</span><br><span class="line">&#123;</span><br><span class="line">y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">is_rt</span>(y))</span><br><span class="line">(<span class="built_in">ch</span>(y, <span class="number">1</span>) == x) ^ (<span class="built_in">ch</span>(z, <span class="number">1</span>) == y) ? <span class="built_in">rotate</span>(x) : <span class="built_in">rotate</span>(y);</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> z = x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; x; y = x, x = <span class="built_in">fa</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line"><span class="built_in">ch</span>(x, <span class="number">1</span>) = y;</span><br><span class="line"><span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">splay</span>(z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_rt</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x);</span><br><span class="line"><span class="built_in">tag_rev</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_rt</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">ch</span>(x, <span class="number">0</span>))</span><br><span class="line"><span class="built_in">push_down</span>(x), x = <span class="built_in">ch</span>(x, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_rt</span>(x);</span><br><span class="line"><span class="built_in">access</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_rt</span>(x);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find_rt</span>(y) != x)</span><br><span class="line"><span class="built_in">fa</span>(x) = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_rt</span>(x);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find_rt</span>(y) == x &amp;&amp; <span class="built_in">fa</span>(y) == x &amp;&amp; !<span class="built_in">ch</span>(y, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ch</span>(x, <span class="number">1</span>) = <span class="built_in">fa</span>(y) = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;<span class="built_in">v</span>(i));</span><br><span class="line"><span class="keyword">int</span> op, x, y;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">split</span>(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sum</span>(y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">link</span>(x, y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line"><span class="built_in">cut</span>(x, y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line"><span class="built_in">v</span>(x) = y;</span><br><span class="line"><span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 背模板吧&lt;/p&gt;</summary>
    
    
    
    
    <category term="平衡树" scheme="https://dyd-true.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    <category term="数据结构" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="LCT" scheme="https://dyd-true.github.io/tags/LCT/"/>
    
    <category term="slpay" scheme="https://dyd-true.github.io/tags/slpay/"/>
    
  </entry>
  
  <entry>
    <title>luoguP4883 mzf的考验</title>
    <link href="https://dyd-true.github.io/2021/12/12/luoguP4883-mzf%E7%9A%84%E8%80%83%E9%AA%8C/"/>
    <id>https://dyd-true.github.io/2021/12/12/luoguP4883-mzf%E7%9A%84%E8%80%83%E9%AA%8C/</id>
    <published>2021-12-12T05:51:13.000Z</published>
    <updated>2021-12-13T13:41:19.880Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>“我的splay常数小”</strong></p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4883">mzf的考验</a></p><p>一开始要写<strong>平衡树</strong>我是拒绝的，但是没有办法，最讨厌的是它要求区间旋转，这就意味着只有FHQ和slpay可以搞（其它的我都搞不出区间旋转操作），最后，决定打splay（主要是FHQ不会），然后看到讨论区说这道题<strong>卡常的一笔</strong>，我留下了历史性的flag——<strong>“没事，我的splay常数小”</strong></p><p>太久没写slpay，写的有点困难</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>, D = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> p[D];</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; D; ++i, d &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">x[i] = d &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Splay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> root = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> as[D];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">2</span>], fa, v, size, cnt[D], txor;</span><br><span class="line">LL sum;</span><br><span class="line"><span class="keyword">bool</span> rev;</span><br><span class="line">&#125; tr[N];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ch(x, y) tr[(x)].ch[(y)]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sum(x) tr[(x)].sum</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> si(x) tr[(x)].size</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rev(x) tr[(x)].rev</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> txor(x) tr[(x)].txor</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cnt(x, y) tr[(x)].cnt[(y)]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fa(x) tr[(x)].fa</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> v(x) tr[(x)].v</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">si</span>(x) = <span class="built_in">si</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>)) + <span class="built_in">si</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)) + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">sum</span>(x) = <span class="built_in">sum</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>)) + <span class="built_in">sum</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)) + <span class="built_in">v</span>(x);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; D; ++i)</span><br><span class="line"><span class="built_in">cnt</span>(x, i) = <span class="built_in">cnt</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>), i) + <span class="built_in">cnt</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>), i) + ((<span class="built_in">v</span>(x) &gt;&gt; i) &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">ch</span>(y, <span class="number">1</span>) == x;</span><br><span class="line"><span class="built_in">ch</span>(z, <span class="built_in">ch</span>(z, <span class="number">1</span>) == y) = x, <span class="built_in">fa</span>(x) = z;</span><br><span class="line"><span class="built_in">ch</span>(y, k) = <span class="built_in">ch</span>(x, k ^ <span class="number">1</span>), <span class="built_in">fa</span>(<span class="built_in">ch</span>(x, k ^ <span class="number">1</span>)) = y;</span><br><span class="line"><span class="built_in">ch</span>(x, k ^ <span class="number">1</span>) = y, <span class="built_in">fa</span>(y) = x;</span><br><span class="line"><span class="built_in">push_up</span>(y), <span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == k)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> y, z;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fa</span>(x) != k)</span><br><span class="line">&#123;</span><br><span class="line">y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line"><span class="keyword">if</span> (z != k)</span><br><span class="line">(<span class="built_in">ch</span>(y, <span class="number">1</span>) == x) ^ (<span class="built_in">ch</span>(z, <span class="number">1</span>) == y) ? <span class="built_in">rotate</span>(x) : <span class="built_in">rotate</span>(y);</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!k)</span><br><span class="line">root = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tag_rev</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">swap</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>), <span class="built_in">ch</span>(x, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">rev</span>(x) ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tag_xor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">update</span>(as, d);</span><br><span class="line">LL res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; D; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (as[i])</span><br><span class="line"><span class="built_in">cnt</span>(x, i) = <span class="built_in">si</span>(x) - <span class="built_in">cnt</span>(x, i);</span><br><span class="line">res += (LL)<span class="built_in">cnt</span>(x, i) * p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sum</span>(x) = res;</span><br><span class="line"><span class="built_in">v</span>(x) ^= d, <span class="built_in">txor</span>(x) ^= d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_donw</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">rev</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">tag_rev</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)), <span class="built_in">tag_rev</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">rev</span>(x) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">txor</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">tag_xor</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>), <span class="built_in">txor</span>(x)), <span class="built_in">tag_xor</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>), <span class="built_in">txor</span>(x));</span><br><span class="line"><span class="built_in">txor</span>(x) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_k</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">push_donw</span>(x);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">si</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)) + <span class="number">1</span> == k)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">if</span> (k &lt;= <span class="built_in">si</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_k</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>), k);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_k</span>(<span class="built_in">ch</span>(x, <span class="number">1</span>), k - <span class="built_in">si</span>(<span class="built_in">ch</span>(x, <span class="number">0</span>)) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ll = <span class="built_in">get_k</span>(root, l), rr = <span class="built_in">get_k</span>(root, r + <span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(ll, <span class="number">0</span>), <span class="built_in">splay</span>(rr, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fa</span>(ll) != root)</span><br><span class="line"><span class="built_in">rotate</span>(ll);</span><br><span class="line"><span class="built_in">tag_rev</span>(<span class="built_in">ch</span>(ll, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cxor</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ll = <span class="built_in">get_k</span>(root, l), rr = <span class="built_in">get_k</span>(root, r + <span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(ll, <span class="number">0</span>), <span class="built_in">splay</span>(rr, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fa</span>(ll) != root)</span><br><span class="line"><span class="built_in">rotate</span>(ll);</span><br><span class="line"><span class="built_in">tag_xor</span>(<span class="built_in">ch</span>(ll, <span class="number">1</span>), d);</span><br><span class="line"><span class="built_in">push_up</span>(ll), <span class="built_in">push_up</span>(rr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ll = <span class="built_in">get_k</span>(root, l), rr = <span class="built_in">get_k</span>(root, r + <span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(ll, <span class="number">0</span>), <span class="built_in">splay</span>(rr, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fa</span>(ll) != root)</span><br><span class="line"><span class="built_in">rotate</span>(ll);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">ch</span>(ll, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> ff, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> &amp;x)</span> <span class="comment">//类似于线段树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &gt; r)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">x = ++num;</span><br><span class="line"><span class="built_in">fa</span>(x) = ff, <span class="built_in">v</span>(x) = a[mid];</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">si</span>(x) = <span class="number">1</span>, <span class="built_in">sum</span>(x) = <span class="built_in">v</span>(x);</span><br><span class="line"><span class="built_in">update</span>(tr[x].cnt, <span class="built_in">v</span>(x));</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(x, l, mid - <span class="number">1</span>, <span class="built_in">ch</span>(x, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">build</span>(x, mid + <span class="number">1</span>, r, <span class="built_in">ch</span>(x, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">num = <span class="number">2</span>, root = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">ch</span>(<span class="number">1</span>, <span class="number">1</span>) = <span class="built_in">si</span>(<span class="number">1</span>) = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">fa</span>(<span class="number">2</span>) = <span class="built_in">si</span>(<span class="number">2</span>) = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">2</span>, <span class="number">1</span>, n, <span class="built_in">ch</span>(<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">push_up</span>(<span class="number">2</span>), <span class="built_in">push_up</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; tr;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prev</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; D; ++i)</span><br><span class="line">p[i] = p[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">prev</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">tr.<span class="built_in">init</span>(n);</span><br><span class="line"><span class="keyword">int</span> op, l, r, x;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;l, &amp;r);</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">tr.<span class="built_in">reve</span>(l, r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), tr.<span class="built_in">cxor</span>(l, r, x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, tr.<span class="built_in">ask</span>(l, r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>断断续续打了有2d，交的时候过去的话语犹在耳畔—— <strong>“我的splay常数小”</strong>，然后一交——TLE40分，wdf</p><p>果断无耻吸氧，含泪AC，完毕后不忘说一句： <strong>“我的splay开了O2常数小”</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; &lt;strong&gt;“我的splay常数小”&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="平衡树" scheme="https://dyd-true.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="splay" scheme="https://dyd-true.github.io/tags/splay/"/>
    
  </entry>
  
  <entry>
    <title>luoguP1512 伊甸园日历游戏</title>
    <link href="https://dyd-true.github.io/2021/12/12/luoguP1512-%E4%BC%8A%E7%94%B8%E5%9B%AD%E6%97%A5%E5%8E%86%E6%B8%B8%E6%88%8F/"/>
    <id>https://dyd-true.github.io/2021/12/12/luoguP1512-%E4%BC%8A%E7%94%B8%E5%9B%AD%E6%97%A5%E5%8E%86%E6%B8%B8%E6%88%8F/</id>
    <published>2021-12-12T02:35:55.000Z</published>
    <updated>2021-12-12T05:51:44.722Z</updated>
    
    <content type="html"><![CDATA[<p> 良多大水题</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P1512">伊甸园日历游戏</a></p><p>找规律：</p><ol><li> $m = 9, d = 30$ 胜</li><li> $m = 11, d = 30$ 胜</li><li> $(m + d) \mod 2 = 0$ 胜</li></ol><p>完</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n, m, d;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;d);</span><br><span class="line"><span class="keyword">if</span> ((m == <span class="number">9</span> &amp;&amp; d == <span class="number">30</span>) || (m == <span class="number">11</span> &amp;&amp; d == <span class="number">30</span>) || (((m + d) &amp; <span class="number">1</span>) == <span class="number">0</span>))</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 良多大水题&lt;/p&gt;</summary>
    
    
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="找规律" scheme="https://dyd-true.github.io/tags/%E6%89%BE%E8%A7%84%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>luoguP2747 [USACO5.4]周游加拿大Canada Tour</title>
    <link href="https://dyd-true.github.io/2021/12/12/luoguP2747-USACO5-4-%E5%91%A8%E6%B8%B8%E5%8A%A0%E6%8B%BF%E5%A4%A7Canada-Tour/"/>
    <id>https://dyd-true.github.io/2021/12/12/luoguP2747-USACO5-4-%E5%91%A8%E6%B8%B8%E5%8A%A0%E6%8B%BF%E5%A4%A7Canada-Tour/</id>
    <published>2021-12-12T02:22:10.000Z</published>
    <updated>2021-12-12T02:47:52.335Z</updated>
    
    <content type="html"><![CDATA[<p> 被STL卡半天</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P2747">周游加拿大</a></p><p>1993IOI的题（感觉当年的题好水啊，现在越来越<strong>卷</strong>了），疑似是<strong>dp的起源</strong></p><p>dp比较简单没什么好说的，重点在处理字符串，注意一下问题：</p><ol><li>map中不能直接拿char*作为key</li><li>string不能用scanf输入</li><li>别搞妖魔鬼怪，就用cin+string+map挺好的</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>  N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">map&lt;string, <span class="keyword">int</span>&gt; ha;</span><br><span class="line"><span class="keyword">int</span> mp[N][N], f[N][N], ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">string u, v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">cin &gt;&gt; u, ha[u] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v, mp[ha[u]][ha[v]] = mp[ha[v]][ha[u]] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; j; ++k)</span><br><span class="line"><span class="keyword">if</span> (mp[j][k] &amp;&amp; f[i][k])</span><br><span class="line">f[i][j] = f[j][i] = <span class="built_in">max</span>(f[i][j], f[i][k] + <span class="number">1</span>);</span><br><span class="line">ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (mp[i][n])</span><br><span class="line">ans = <span class="built_in">max</span>(f[i][n], ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 被STL卡半天&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="USACO" scheme="https://dyd-true.github.io/tags/USACO/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="STL" scheme="https://dyd-true.github.io/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>luoguP3896 [湖南集训]Clever Rabbit</title>
    <link href="https://dyd-true.github.io/2021/12/08/luoguP3896-%E6%B9%96%E5%8D%97%E9%9B%86%E8%AE%AD-Clever-Rabbit/"/>
    <id>https://dyd-true.github.io/2021/12/08/luoguP3896-%E6%B9%96%E5%8D%97%E9%9B%86%E8%AE%AD-Clever-Rabbit/</id>
    <published>2021-12-08T12:50:21.000Z</published>
    <updated>2021-12-12T01:19:40.932Z</updated>
    
    <content type="html"><![CDATA[<p>  一道很暴力的题</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P3896">Clever Rabbit</a></p><p>一看 $n \le 30$ ，时限4s，第一反应打表能过，仔细回味，发现 $10^{30}$ 铁挂，而且20分的 $n \le 10$ 都会挂，这……</p><p>但不能浪费我辛苦打出来的表（由于 $x = 0$ 对答案无贡献，故保证 $x &gt; 0$ ）：</p><table><thead><tr><th align="center">n</th><th align="center">x</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">-</td></tr><tr><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">3</td><td align="center">495</td></tr><tr><td align="center">4</td><td align="center">6174</td></tr><tr><td align="center">5</td><td align="center">-</td></tr><tr><td align="center">6</td><td align="center">549945<br/>631764</td></tr><tr><td align="center">7</td><td align="center">-</td></tr><tr><td align="center">8</td><td align="center">63317664<br/>97508421</td></tr><tr><td align="center">9</td><td align="center">554999445<br/>864197532</td></tr></tbody></table><p>9的数据都跑了进3min……</p><p>然后又是全凭rp的找规律时间，浪费时间ing</p><p>发现一个小规律，看图：</p><p><img src="https://s2.loli.net/2021/12/12/repxRFMSVkOgN7f.png" alt="竖式"></p><p>我们发现 $b$ 数是对称且单调下降的（下降不严格），证明也很好证（自己列个竖式就知道了），那么我们可以枚举 $b$ 的一半，计算另一半，然后得到 $b’$ 排序后得到 $c, d$ ，计算检验即可，然鹅， $10^{\frac{n}{2}} = 10^{15}$ 次方也是挂了</p><p>突然发现只需枚举 $0 \sim 9$ 每个数出现了多少次，计算 $max,min,max - min$ 判断即可，考虑时间复杂度，看似是 $n^{10} * n$ （跑不满），但实际上用隔板法可知为 $O(\binom{n + 10 - 1}{9}n)$ ， 注意解决一下高精减法，可以得60分（开了O2可以70分）</p><p>再考虑我们打表发现的性质，还是生成 $b$ ，但和上面一样，只枚举 $b$ 的前 $\frac{n}{2}$ 个数中 $0 \sim 9$ 各出现了多少次，由于 $b$ 单调，故只有一种合法排列，生成  $b’$ 后暴力检验 ，特殊处理一下  $n$ 为奇数时中间的数（一定是0）</p><p>不开O2最慢的点1.89s（时限4s，能过），开了O2快得飞起，最慢的点412ms</p><p>考虑优化（毕竟1.89s太讨厌了），那个排序可以开个桶，把 $\log n$ 优化了（然鹅 $n \le 30$ 所以 $\log n$ 几乎就是常数），再就是其实可以先不求出 $b’$ 用 $b$ 的一半即可判断是否合法，合法再求（常数优化），然后卡卡常，时间复杂度为 $O(\binom{\frac{n}{2} + 10 -1}{9}n)$ ，不开O2最慢的点322ms，开了O2最慢的点205ms，好像除了打表的大佬（竟然真的可以打表，蒟蒻想都不敢想）我混了个最快？估计马上就会被大佬们超过</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>  N = <span class="number">30</span> + <span class="number">5</span>, A = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> n, p, m, o;</span><br><span class="line"><span class="keyword">int</span> t, cnt;</span><br><span class="line"><span class="keyword">int</span> a[A], b[N], c[N], d[N];</span><br><span class="line"><span class="keyword">int</span> B[A]; <span class="comment">//桶</span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= B[i]; ++j)</span><br><span class="line">c[++t] = i, d[n - t + <span class="number">1</span>] = i;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">d[i] = d[i] - c[i];</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line"><span class="keyword">if</span> (d[i] != b[i])</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">b[n + <span class="number">1</span> - i] = -b[i];</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line"><span class="keyword">if</span> (b[i] &lt; <span class="number">0</span>)</span><br><span class="line">b[i] += <span class="number">10</span>, --b[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">t = ((LL)t * <span class="number">10</span> + b[i]) % p;</span><br><span class="line">ans = (((LL)t * t % p) + ans) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> <span class="comment">//生成b&#x27;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">B[i] = <span class="number">0</span>;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= a[i]; ++j)</span><br><span class="line">b[++cnt] = i;</span><br><span class="line"><span class="keyword">if</span> (o)</span><br><span class="line">b[cnt + <span class="number">1</span>] = <span class="number">0</span>, ++B[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = cnt, f = <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">1</span>)</span><br><span class="line">++B[<span class="number">9</span> - b[i]];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">++B[<span class="number">10</span> - b[i]];</span><br><span class="line"><span class="keyword">if</span> (b[i] == <span class="number">0</span> &amp;&amp; f)</span><br><span class="line">++B[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (f)</span><br><span class="line">++B[b[i] - <span class="number">1</span>], f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">++B[b[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[x] = r;</span><br><span class="line"><span class="built_in">work</span>();</span><br><span class="line"><span class="built_in">check</span>();</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= r; ++i)</span><br><span class="line">&#123;</span><br><span class="line">a[x] = i;</span><br><span class="line"><span class="built_in">dfs</span>(x + <span class="number">1</span>, r - i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;p);</span><br><span class="line">o = n &amp; <span class="number">1</span>;</span><br><span class="line">m = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans % p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;  一道很暴力的题&lt;/p&gt;</summary>
    
    
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="找规律" scheme="https://dyd-true.github.io/tags/%E6%89%BE%E8%A7%84%E5%BE%8B/"/>
    
    <category term="高精" scheme="https://dyd-true.github.io/tags/%E9%AB%98%E7%B2%BE/"/>
    
  </entry>
  
  <entry>
    <title>luoguP4892 GodFly的寻宝之旅</title>
    <link href="https://dyd-true.github.io/2021/12/06/luoguP4892-GodFly%E7%9A%84%E5%AF%BB%E5%AE%9D%E4%B9%8B%E6%97%85/"/>
    <id>https://dyd-true.github.io/2021/12/06/luoguP4892-GodFly%E7%9A%84%E5%AF%BB%E5%AE%9D%E4%B9%8B%E6%97%85/</id>
    <published>2021-12-06T14:00:40.000Z</published>
    <updated>2021-12-08T12:58:22.808Z</updated>
    
    <content type="html"><![CDATA[<p> 随机跳题都给我跳些神马玩意</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4892">GodFly的寻宝之旅</a></p><p>看了数据范围，感觉 $m$ （边数）应该只是做权值的，时间应和 $n$ 关系大些（毕竟  $n \le 18, m \le 10^5$ ），先考虑了暴力，暴搜走法，以边数为权值，时间复杂度为  $O(n!)$ 期望30分（我也没打所以正确性没保证） </p><p>然后继续以  $m$ 为权值的思路，考虑状压dp，设 $f[i][j][w]$ 表示“走到点 $i$ ，当前点集合为 $j$ 且当前代价为 $w$ 的方案数”，转移很显然，下面以 $w = 0$ 的转移为例：<br>$$<br>\begin{align}<br>&amp;\text{设当前地图为}j \text{（不存在}v \text{），和为}sum(j) \text{且存在边}u \rightarrow v \text{数为}mp[u][v] \text{，} j + v \text{指将点}v \text{压入状态}\\<br>&amp;f[v][j + v][0] += mp[u][v] *<br>\begin{cases}<br>f[u][j][0] &amp; if(v \mod 2 = 0)\\<br>f[u][j][0] &amp; if(v \mod 2 = 1 \wedge sum(j) \mod 2 = 0)\\<br>f[u][j][1] &amp; if(v \mod 2 = 1 \wedge sum(j) \mod 2 = 1)<br>\end{cases}<br>\end{align}<br>$$<br>打的很快，注意了取模，结果一交——WA</p><p>想对着样例调一下，于是翻出了2018的比赛（这是那次比赛的第三题），正打算下载样例，结果……谁家出题组样例用百度网盘发呀！下一个百度网盘太麻烦，于是放弃，只好对着死调</p><p>就在我万念俱灰之时，突然感觉 $f[i][j][w]$ 的顺序怪怪的，因为dp的无后效性是用第二维（当前点集只增不减）来保证的，那么是不是应该先枚举 $j$ 再枚举 $i$ 呢？怀着如果还不过就只有手造样例心态，把第二层循环调到了最外层，结果，柳暗花明又一村，AC了！</p><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>, P = <span class="number">19260817</span>, D = (<span class="number">1</span> &lt;&lt; <span class="number">18</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> mp[N][N];</span><br><span class="line"><span class="keyword">int</span> f[N][D][<span class="number">2</span>]; <span class="comment">//f[i][j][w]:走到i,当前点集为j,价值为w的方案数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">have</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((x &gt;&gt; (y - <span class="number">1</span>)) &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x | (<span class="number">1</span> &lt;&lt; (y - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_s</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">have</span>(x, i))</span><br><span class="line">res += i;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//debug</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; <span class="string">&quot; have&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">have</span>(x, i))</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c, d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">d = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">++mp[u][v], ++mp[v][u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="comment">//每个点只走一次,故没有自环</span></span><br><span class="line">mp[i][i] = <span class="number">0</span>;</span><br><span class="line">f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, sum; j &lt;= d; ++j) <span class="comment">//将第二层循环移到最外</span></span><br><span class="line">&#123;</span><br><span class="line">sum = <span class="built_in">get_s</span>(j);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="comment">//到n就停止,故不可能从n走到其它点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">have</span>(j, i))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">have</span>(j, k))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!mp[i][k])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sum &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>] = ((LL)f[i][j][<span class="number">0</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>]) % P;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>] = ((LL)f[i][j][<span class="number">1</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>]) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>] = ((LL)f[i][j][<span class="number">1</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>]) % P;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>] = ((LL)f[i][j][<span class="number">0</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>]) % P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>] = ((LL)f[i][j][<span class="number">1</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>]) % P;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>] = ((LL)f[i][j][<span class="number">0</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>]) % P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; ++i)</span><br><span class="line">ans = (ans + f[n][i][c]) % P;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉这个状压比较简单，毕竟连我这种<strong>奆弱</strong>都可以做</p><p>说句题外话，找样例的时候虽然样例没找到，但发现GodFly是“牛虻”的意思</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 随机跳题都给我跳些神马玩意&lt;/p&gt;</summary>
    
    
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="状态压缩" scheme="https://dyd-true.github.io/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>luoguP2441 角色属性树</title>
    <link href="https://dyd-true.github.io/2021/12/06/luoguP2441-%E8%A7%92%E8%89%B2%E5%B1%9E%E6%80%A7%E6%A0%91/"/>
    <id>https://dyd-true.github.io/2021/12/06/luoguP2441-%E8%A7%92%E8%89%B2%E5%B1%9E%E6%80%A7%E6%A0%91/</id>
    <published>2021-12-06T13:35:36.000Z</published>
    <updated>2021-12-12T08:05:06.832Z</updated>
    
    <content type="html"><![CDATA[<p> 暴力出奇迹</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P2441">角色属性树</a></p><ol><li>第一眼看过去想的是分解质因数后建图处理，一看 $a \le 2^{31} - 1$ 完蛋</li></ol><p>再仔细端详了一下数据， $n \le 2 \times 10^5$ ，估计是 $O(n \log n)$ 的算法，  $\text{修改次数} \le 50$ 似乎在提示我们暴力修改，估计是个树上倍增的算法，但具体实现还没想好，就被说明/提示的最后一行吸引：<strong>本题测试数据随机，可能是假题</strong>，随机生成，也就是说……暴力的<strong>期望</strong>复杂度也是 $O(n \log n)$ ，<del>本着能偷懒就偷懒的心态</del>，含泪AC了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> w[N], fa[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> y == <span class="number">0</span> ? x : <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">gcd</span>(w[x], a) != <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ask</span>(fa[x], a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k, op, u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt; n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), fa[y] = x;</span><br><span class="line"><span class="keyword">while</span> (k--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;op, &amp;u);</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ask</span>(fa[u], w[u]));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来看题解，也有树上倍增lca的做法，但是那样要维护区间乘积了，需要打高精，直接放弃</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 暴力出奇迹&lt;/p&gt;</summary>
    
    
    
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="lca" scheme="https://dyd-true.github.io/tags/lca/"/>
    
    <category term="倍增" scheme="https://dyd-true.github.io/tags/%E5%80%8D%E5%A2%9E/"/>
    
    <category term="素数" scheme="https://dyd-true.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
    <category term="最大公约数" scheme="https://dyd-true.github.io/tags/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>最小表示法</title>
    <link href="https://dyd-true.github.io/2021/12/06/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
    <id>https://dyd-true.github.io/2021/12/06/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/</id>
    <published>2021-12-06T10:57:09.000Z</published>
    <updated>2021-12-06T11:35:56.423Z</updated>
    
    <content type="html"><![CDATA[<p> 简单的缓和一下</p><span id="more"></span><h1 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>给定一个字符串 $S$ ，通过将 $S$ 循环移动可以得到至多 $n$ 个不同的串，其中 $n = |S|$ ，例如： $S = bcacd$ ，它循环移动一位可以得到 $S’ = cacdb$ （即把最后第一位放到最后）</p><p>对于得到的所有不同的字符串，字典序最小的串就叫原串的<strong>最小表示法</strong>，在上面的例子中， $S$ 的最小表示法为 $acdbc$ </p><h2 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h2><p>最小表示法的求法比较简单，把字符串复制一倍接在原串后面（破环成链），然后用一个双指针 $i, j$ 指向两个不同串的开头，初始时 $i = 1, j = 2$ （假设字符串从1开始）</p><p>然后暴力找到一个最小的非负整数 $k$ 满足 $S_{i + k} \ne S_{j + k}$ ：</p><ol><li>若 $S_{i + k} &lt; S_{j + k}$ ，则说明 $j \sim j + k$ 之间的所有位置开头的字符串都不是最小表示，因为它们都可以找到 $i \sim i + k$ 之间对应的开头的字符串，两个字符串到 $j + k$ （ $i + k$ ）前都相同，而 $S_{i + k} &lt; S_{j + k}$ ，故直接令 $j = j + k + 1$ </li><li>若 $S_{i + k} &gt; S_{j + k}$ ，同理令 $i = i + k + 1$ </li></ol><p>有几个特判：</p><ol><li> $i = j$ 时，让 $i = i + 1$ （加 $j$ 也行）</li><li>  $k &gt; n$ 时，说明两个开头的串一样，画图不难发现此时 $i \sim j$ 一定时一个循环节，而 $i \sim j$ 我们一定遍历过，所以直接结束</li></ol><p>完成后 $\min(i, j)$ 即为最小表示法的开头</p><p>时间复杂度为 $O(n)$ </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_min</span><span class="params">(<span class="keyword">char</span> *s)</span> <span class="comment">//求串s的最小表示,完成后答案存在s[k...k + len - 1]中</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">s[len + i] = s[i];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">2</span>, k;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= len &amp;&amp; j &lt;= len)</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (k &lt;= len &amp;&amp; s[i + k] == s[j + k])</span><br><span class="line">++k;</span><br><span class="line"><span class="keyword">if</span> (k &gt; len)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (s[i + k] &gt; s[j + k])</span><br><span class="line">i += k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">j += k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i == j)</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">k = <span class="built_in">min</span>(i, j);</span><br><span class="line">s[k + len] = <span class="number">0</span>; <span class="comment">//加上结束符</span></span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数中：</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">get_min</span>(a);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 简单的缓和一下&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="最小表示法" scheme="https://dyd-true.github.io/tags/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/06总结</title>
    <link href="https://dyd-true.github.io/2021/12/06/test2021-12-06%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/06/test2021-12-06%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-06T10:08:03.000Z</published>
    <updated>2021-12-06T13:09:35.361Z</updated>
    
    <content type="html"><![CDATA[<p> 你以为的不是你以为的，而是你以为的</p><span id="more"></span><h1 id="test2021-12-06总结"><a href="#test2021-12-06总结" class="headerlink" title="test2021/12/06总结"></a>test2021/12/06总结</h1><h2 id="题目、成绩和题解"><a href="#题目、成绩和题解" class="headerlink" title="题目、成绩和题解"></a>题目、成绩和题解</h2><p><a href="./day1.pdf">题目</a></p><p><a href="./result.pdf">成绩</a></p><p><a href="./solution.pdf">题解</a></p><h2 id="考前"><a href="#考前" class="headerlink" title="考前"></a>考前</h2><p>考前的白天，老师让我们学了<strong>点分治</strong>和<strong>启发式合并</strong>，估计要考（预判）</p><p>晚上在寝室里还发生了一件不同往常的事，这也就<strong>为后文埋下伏笔</strong>（出于保护隐私，不能说发生了什么，但只能说，<del>泡面真香</del>）</p><h2 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h2><p>开考前老师说这次考试<strong>不给大样例</strong>，预感到要凉凉</p><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>老规矩先开T1，望过去心中一片呼伦贝尔大草原（<del>简直好优美的中国话</del>），没有大样例，题目的样例又没有解释，我连答案怎么算出来的都不知道</p><p>于是就根本不管样例了，按照自己的理解来，于是想了个<strong>点分治</strong>，每次取重心：</p><ol><li>对于不含1号节点的子树，计算每个点到重心的边数和长度，用线段树维护，每次查询区间最值（路过过重心）或者直接跟新答案（路径以重心为端点），记在重心的答案里，一棵子树统计完后在修改线段树（保证不存在两个端点都在一棵子树内的情况）</li><li>对于含1号点的子树，dfs，传递的参数中含有一个 $y$ 意为正在跟新 $y$ 号点的答案，每次进入下一层时，若进入 $fa[x]$ （ $x$ 是当前节点），则让 $y = fa[x]$ ，否则  $y$ 不变</li></ol><p>时间复杂度为  $O(n \log^2 n)$ ， $n \le 10^6$  , 时限给的4m，期望得分50（<del>然而只是个期望</del>）</p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>花了大概  $1.5 \sim 2h$ 打完T1，浏览了一下T2、T3，T3的没看懂，T2感觉像是个博弈论，决定先开T2</p><p>回忆了一下SG函数（忘了有一半的样子吧），只记得如何判必胜，想了一会<strong>决定打暴力</strong>（这将是我本次考试最正确的决定），大概思路是对于当前操作者，dfs搜索每一种情况，找到自己赢的情况就返回自己赢（因为走最优策略），如果没有自己赢的情况就返回对方赢</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> who)</span> <span class="comment">//返回winner </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> xx, yy, t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">xx = x + dx[i], yy = y + dy[i];</span><br><span class="line"><span class="keyword">if</span> (mp[xx][yy] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; !vis[xx][yy])</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dfs</span>(xx, yy, who ^ <span class="number">1</span>) == who)</span><br><span class="line">&#123;</span><br><span class="line">vis[x][y] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> who;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[x][y] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> who ^ <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没怎么调试，手算了一组数据就去T3了</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>最开始没看懂题，加上<strong>昨天晚上的伏笔</strong>（忘了的可以上去看）差点放弃，但最后还是坚持着读懂了题，其实最大的歧义在于“价值恰好是 $P$ 的倍数”其实指的是“价值在模 $P$ 意义下为0”</p><p>读懂了题，就开做，第一反应是<strong>笛卡尔树</strong>，因为价值的定义有一个“最大”，感觉可以每次找最大点，以它为根处理所有过了它的路径，然后再删掉它，递归处理几个子树</p><p>具体实现用的是类似于点分治的构架，只是把找重心改成找最大点而已，时间复杂度当然是<strong>完全假掉</strong>的  $O(n \log n)$ ，目标是  $n \le 2000$ 和随机生成数据两个部分分，度数不大于2感觉太难打了就先没打，期望得分44（<del>我是有多么自信啊</del>）</p><h3 id="T？"><a href="#T？" class="headerlink" title="T？"></a>T？</h3><p>打完T3，感觉这场考试要凉，只有T1感觉像个正常思路，于是去<strong>检查了一下T1</strong>（用了约30min）</p><p>然后，由于<strong>昨天晚上的伏笔</strong>，接下来的约  $1 \sim 1.5h$ 处于掉线状态，没有再改动代码</p><p>提交时已经做好垫底的准备，估计只有T1有点分，T2、T3虽然打了但没怎么花时间看，心中不稳，估分 $30 + 0 + 0 \sim 60 + 30 + 44$ ，即 $30 \sim 134$ 的样子吧（然而事实与我所料大不相同）</p><h2 id="出成绩"><a href="#出成绩" class="headerlink" title="出成绩"></a>出成绩</h2><p>11：40考完就跑代码了，结果是 $0 + 80(20) + 28 = 106$ ，第二题括号里的是数据加强版</p><p>总分在预料内吧，但T1和T2的分数是不是反了啊？！T1我那么认真、那么自信的打了5kb的代码，结果 $WA + TLE = 0$ ，T2打了个稍微聪明点的暴力，时间花的最少，结果80……T3得了个正常的暴力分（<del>还比别人的暴力高4分好耶！</del>）</p><p>T1<strong>wfy</strong>大佬打的启发式合并（正解也是<strong>启发式合并</strong>，但<strong>wfy</strong>大佬的<strong>时间复杂度好像假掉了</strong>），太厉害了，我想过启发式合并（毕竟老师提示过），但完全不会，T1好像确实很难，我们都<strong>爆零</strong>了</p><p>T3<strong>rusun</strong>大佬的思路和标程一样（<strong>点分治</strong>），可惜的是求 $size$ 时少打一行判断该点是否被删，令人遗憾</p><p>T2好像大家都是基于SG函数打的暴力，大概得了20分，我（<del>打不出来SG函数</del>）打的基于dfs的暴力可能是和正解<strong>匈牙利</strong>的dfs有相似之处吧，骗了个不错的分数，但加强数据只有我反而低了（他们都是30分）</p><p>不管了，下午来改</p><h2 id="改题"><a href="#改题" class="headerlink" title="改题"></a>改题</h2><h3 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h3><p>本来想先改T1的（毕竟早上T1打的不容易），但一是找不出错，题解又看不懂，看来一下T2的题解比较简单，先改T2</p><p>题解很清楚了，就是判断每个点是否<strong>一定</strong>在最大匹配中，具体地，可以先匈牙利求出最大匹配，然后对于每一个未匹配的点，尝试让它匹配（work函数），这样一定会释放一个点，且匹配数不变，如此迭代下即可</p><p>考虑时间复杂度，匈牙利是 $O(n^4)$ （设 $n, m$ 同级），对于work函数，设未匹配的点有 $x(0 \le x \le n^2)$ 个，则有  $n^2 - x$ 个点已匹配，work会在主函数被调用 $x$ 次，每次最多遍历 $n^2 - x$ 个点（实际上远远达不到）， $O(x * (n^2 - x)) \le O(n^4)$ 故总的实际复杂度为 $O(n^4)$ ，由于 $n \le 100$ ，且时间远远达不到上界，普通版和加强版都可以过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> mp[N][N];</span><br><span class="line"><span class="keyword">int</span> id[N][N], cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, dy[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[(N * N) &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> h[N * N], idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> vis[N * N], match[N * N], win[N * N];</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (!vis[y = e[i].ver])</span><br><span class="line">&#123;</span><br><span class="line">vis[y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!match[y] || <span class="built_in">dfs</span>(match[y]))</span><br><span class="line">&#123;</span><br><span class="line">match[y] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">addedge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line"><span class="keyword">if</span> (mp[i][j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">4</span>; ++k)</span><br><span class="line">&#123;</span><br><span class="line">x = i + dx[k], y = j + dy[k];</span><br><span class="line"><span class="keyword">if</span> (mp[x][y] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="built_in">add</span>(id[i][j], id[x][y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">get_match</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line"><span class="keyword">if</span> (mp[i][j] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; ((i + j) &amp; <span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= cnt; ++k)</span><br><span class="line">vis[k] = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">dfs</span>(id[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line"><span class="keyword">if</span> (match[i])</span><br><span class="line">match[match[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (match[e[i].ver] &amp;&amp; !win[match[e[i].ver]])</span><br><span class="line">&#123;</span><br><span class="line">++ans;</span><br><span class="line">win[match[e[i].ver]] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">work</span>(match[e[i].ver] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;b.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;b.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, mp[i] + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">id[i][j] = ++cnt, h[cnt] = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">addedge</span>();</span><br><span class="line"><span class="built_in">get_match</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line"><span class="keyword">if</span> (!match[id[i][j]] &amp;&amp; mp[i][j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">++ans;</span><br><span class="line">win[id[i][j]] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">work</span>(id[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line"><span class="keyword">if</span> (win[id[i][j]])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, i, j);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a>T3</h3><p>T1<strong>wfy</strong>大佬改了半天发现自己时间复杂度是假的，反观T3<strong>rusun</strong>dalao很快就改好了，于是决定先改T3</p><p>和题解一样，考虑点分治，每次分治找重心，划分子树，只处理过重心的路径，其它递归处理，现在考虑如何处理过重心的路径</p><p>其实类似于点分治的例题1，就是在不同子树选两个数模  $P$ 意义下和为0，开一个桶维护“到重心权值和为  $i$ （模 $P$ 意义）的点有多少个”，先统计出每个子树中每个点到重心的最大权值以及权值和，以最大权值从小到大计算答案并插入桶中，类似例题1，用容斥解决两个端点在同一个子树的情况，每次计算完后清空桶即可</p><p>需要注意的是0的特判，会出现以重心为端点的路径，这只需在计算时多差一个到重心权值为0的点即可；还有就是每个点自己构成的路径价值为0，故答案最后要加  $n$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, PP = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, P;</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="keyword">int</span> w[N];</span><br><span class="line"><span class="keyword">int</span> as[N], ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b[PP];</span><br><span class="line"><span class="keyword">bool</span> del[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> mx, sum;</span><br><span class="line">IL <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mx &lt; t.mx;</span><br><span class="line">&#125;</span><br><span class="line">&#125; p[N], q[N];</span><br><span class="line"><span class="keyword">int</span> cp, cq;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="built_in">gh</span>(), t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">t |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line"><span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">gh</span>();</span><br><span class="line"><span class="keyword">if</span> (t)</span><br><span class="line">x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">get_si</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line">res += <span class="built_in">get_si</span>(e[i].ver, x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">get_wc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> si, <span class="keyword">int</span> &amp;wc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">1</span>, mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], t; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (e[i].ver == fa)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">t = <span class="built_in">get_wc</span>(e[i].ver, x, si, wc);</span><br><span class="line">mx = <span class="built_in">max</span>(mx, t);</span><br><span class="line">sum += t;</span><br><span class="line">&#125;</span><br><span class="line">mx = <span class="built_in">max</span>(mx, si - sum);</span><br><span class="line"><span class="keyword">if</span> (mx &lt;= si / <span class="number">2</span>)</span><br><span class="line">wc = x;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">get_Node</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, Node t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">t.mx = <span class="built_in">max</span>(t.mx, w[x]);</span><br><span class="line">t.sum = (t.sum + w[x]) % P;</span><br><span class="line">q[++cq] = t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line"><span class="built_in">get_Node</span>(e[i].ver, x, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">work</span><span class="params">(Node x[], <span class="keyword">int</span> cnt, <span class="keyword">int</span> wr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(x + <span class="number">1</span>, x + <span class="number">1</span> + cnt);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t; i &lt;= cnt; ++i)</span><br><span class="line">&#123;</span><br><span class="line">t = (x[i].sum + wr - <span class="built_in">max</span>(wr, x[i].mx)) % P;</span><br><span class="line">t = (P - t) % P;</span><br><span class="line">res += b[t];</span><br><span class="line">++b[x[i].sum];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">--b[x[i].sum];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">get_wc</span>(x, <span class="number">-1</span>, <span class="built_in">get_si</span>(x, <span class="number">-1</span>), x);</span><br><span class="line">del[x] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">cp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">cq = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_Node</span>(e[i].ver, x, (Node)&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">ans -= <span class="built_in">work</span>(q, cq, w[x]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cq; ++j)</span><br><span class="line">p[++cp] = q[j];</span><br><span class="line">&#125;</span><br><span class="line">p[++cp] = (Node)&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">ans += <span class="built_in">work</span>(p, cp, w[x]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="built_in">calc</span>(e[i].ver);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;c.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;c.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="built_in">read</span>(n), <span class="built_in">read</span>(P);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line"><span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">read</span>(w[i]);</span><br><span class="line"><span class="built_in">calc</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans + n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T3-2"><a href="#T3-2" class="headerlink" title="T3"></a>T3</h3><p>还没改出来，先挖个坑吧（<del>估计是不会填了</del>）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 你以为的不是你以为的，而是你以为的&lt;/p&gt;</summary>
    
    
    
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="点分治" scheme="https://dyd-true.github.io/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
    <category term="启发式合并" scheme="https://dyd-true.github.io/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
    <category term="二分图" scheme="https://dyd-true.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Manacher</title>
    <link href="https://dyd-true.github.io/2021/12/05/Manacher/"/>
    <id>https://dyd-true.github.io/2021/12/05/Manacher/</id>
    <published>2021-12-05T07:34:27.000Z</published>
    <updated>2021-12-05T08:44:50.079Z</updated>
    
    <content type="html"><![CDATA[<p> 马拉车算法</p><span id="more"></span><h1 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>Manacher算法是一中可以在  $O(n)$ 时间内求出最长回文子串的算法（以前的 $O(n \log n)$ hash+二分可以退役了）</p><p>在使用马拉车前，由于马拉车只能求<strong>长度为奇数</strong>的回文串，所有我们首先要有一个转换，把长度为偶数的回文串化为长度为奇数，具体方法为：</p><p>在字符串的头部插入开始符（一般为“\$”），在尾部插入结尾符（一般为“^”），然后每两个字符间都插入一个分隔符（一般为“#”），例如，字符串“abbcac”转化后就是“\$#a#b#b#c#a#c#^”，这样，就可以把原串的每一个回文串都化为一个“由#开头和结尾的长度为奇数的回文串”</p><p>然后，考虑如何求最大的长度为奇数的回文串</p><p>类似kmp我们扫描整个串，记 $p[i]$ 表示“以 $i$ 为中点的最长回文串的长度的一半（包括 $i$ ）”，考虑用已有的信息求出现在的 $p[i]$ </p><p><img src="https://s2.loli.net/2021/12/05/kiKbhwgSEDUZ7YJ.png" alt="马拉车"></p><p>如图，假设现在要求 $p[i]$ ，则  $p[1 \sim i - 1]$ 已知，定义一个回文串的位置为 $[l, r]$ ，则已知的最大的 $r$ 记为 $mr(maxright)$ ，其对应的回文串中点为 $mid$ ，则分类讨论：</p><ul><li><p> $i &gt; mr$ ，此时先令 $p[i] = 1$</p></li><li><p>$i \le mr$ 此时必有 $j = mid * 2 - i$ 与 $i$ 对应，再次分类：</p><ol><li> $p[j] \le mr - i + 1$ ，此时 $j$ 所在的最大回文串全部能和 $i$ 对应（图中蓝色部分），让 $p[i] = p[j]$</li><li> $p[j] &gt; mr - i + 1$ ，此时由于 $mr$ 右边的情况未知，故只能先让 $p[i] = mr - i + 1$ </li></ol></li></ul><p>由上，我们通过已有的信息计算出了“<strong>保证合法但不保证最大</strong>的情况下 $p[i]$ 的值”，其中没有保证最大的原因是 $mr$ 右边的情况不知道，若 $i$ 所在的最大回文串的右边界大于 $mr$ ，就无法统计，解决办法是——暴力！对于分类讨论得到的 $p[i]$ ，我们暴力尝试让它加1，直到不行为止</p><p>最后统计答案时，由于 $p[i]$ 只是长度的一半应该要乘二，但由于我们把原串扩充了一倍，所以实际答案就是 $\max_{i = 1}^{n}(p[i] - 1)$ </p><p>需要注意的是，在具体的代码实现中，常常让 $mr = mr + 1$ ，换句话说，以 $mid$ 为中心的最大回文串不是 $[l, r]$ ，而是 $[l, r)$ ，上面讲成闭区间只是为了方便理解</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.luogu.com.cn/problem/P3805">【模板】manacher 算法</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1.1e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[N], b[N &lt;&lt; <span class="number">1</span>];  <span class="comment">//二倍</span></span><br><span class="line"><span class="keyword">int</span> p[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">b[++k] = <span class="string">&#x27;$&#x27;</span>, b[++k] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">b[++k] = a[i], b[++k] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">b[++k] = <span class="string">&#x27;^&#x27;</span>;</span><br><span class="line">n = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manacher</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mr = <span class="number">0</span>, mid;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; mr)</span><br><span class="line">p[i] = <span class="built_in">min</span>(p[mid * <span class="number">2</span> - i], mr - i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b[i - p[i]] == b[i + p[i]])</span><br><span class="line">++p[i];</span><br><span class="line"><span class="keyword">if</span> (i + p[i] &gt; mr)</span><br><span class="line">mr = i + p[i], mid = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">n = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">manacher</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">ans = <span class="built_in">max</span>(ans, p[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>和kmp一样，马拉车的两个循环也是“假的”，简证：</p><p>首先，如果 $i$ 所在的最大回文串 $[l, r]$ 的右断点 $r \le mr$ ，while只会执行一次，因为如果此时 $p[i]$ 一定是与 $p[j]$ 对于的，若还可以加1，这与 $p[j]$ 的“最大”矛盾</p><p>其次，若 $r &gt; mr$ ，则一定会跟新 $mr$ ，而 $mr$ 明显是不下降的，当 $mr = n$ 时，就不可能再有 $r &gt; mr$ 了，换句话说， $mr$ 最多遍历一次 $n$ ，之后就不会再跟新 $mr$ 也就不会再有 $r &gt; mr$ 了</p><p>综上，马拉车的时间复杂度为 $O(n)$ </p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 马拉车算法&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="回文串" scheme="https://dyd-true.github.io/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
    <category term="Manacher" scheme="https://dyd-true.github.io/tags/Manacher/"/>
    
  </entry>
  
  <entry>
    <title>启发式合并</title>
    <link href="https://dyd-true.github.io/2021/12/05/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    <id>https://dyd-true.github.io/2021/12/05/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</id>
    <published>2021-12-05T06:27:53.000Z</published>
    <updated>2021-12-05T08:48:44.563Z</updated>
    
    <content type="html"><![CDATA[<p> 聪明的合并</p><span id="more"></span><h1 id="启发式合并"><a href="#启发式合并" class="headerlink" title="启发式合并"></a>启发式合并</h1><p>其实我们很早就接触过启发式合并了，比如并查集的<strong>按秩合并</strong>就是一种启发式合并（<del>虽然基本没用过</del>），但还是单独提一提</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在解决问题时，我们常常要用到“合并”操作，而该操作是<strong>可以</strong>满足<strong>交换律</strong>的（即可以把 $a$ 合并到 $b$ 里面，也可以把 $b$ 合并到 $a$ 里面），这个时候我们可以通过一些额外的信息（如安秩合并中的秩）来决定合并的顺序，从而降低时间复杂度</p><h2 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h2><p><a href="https://www.luogu.com.cn/problem/P3201">[HNOI2009] 梦幻布丁</a></p><p>对于每种颜色，用一个集合维护其下标，每次操作就是<strong>合并两个集合</strong>，合并完后颜色的段数是<strong>不会增加</strong>的，考虑如何维护段数，设合并颜色 $a$ 和颜色 $b$ ，枚举颜色 $a$ 的所有下标，若它左右的颜色中有  $x(0 \le x \le 2)$ 个颜色是 $b$ ，就让段数减 $x$ </p><p>不难发现暴力合并时间复杂度为 $O(mn)$ ，无法接受，考虑启发式合并，每次让小的集合合并到大的集合中</p><p>要用启发式合并，我们首先要解决一个问题：合并操作是满足交换律的吗？当然没有那么简单，由于操作是“把颜色 $a$ 变成颜色 $b$ ”，交换就成了“把颜色 $b$ 变成颜色 $a$ ”，当然不行</p><p>但是可以通过转化让其满足交换律吗？考虑用链表存储集合，那么只需要将表头映射一下，交换一下颜色即可，总的时间复杂度期望为 $O(n \log n)$ （<del>然而可以被hack，但可以过题</del>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, A = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> h[A], idx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[N];</span><br><span class="line"><span class="keyword">int</span> c[N], si[A], p[A];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == y)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (si[x] &gt; si[y])</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], z; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">z = e[i].ver;</span><br><span class="line">ans -= (c[z + <span class="number">1</span>] == y) + (c[z - <span class="number">1</span>] == y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], z; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">c[e[i].ver] = y;</span><br><span class="line"><span class="keyword">if</span> (e[i].ne == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">e[i].ne = h[y], h[y] = h[x];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">si[y] += si[x];</span><br><span class="line">h[x] = <span class="number">-1</span>, si[x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>, p[i] = i;</span><br><span class="line">idx = ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]);</span><br><span class="line"><span class="keyword">if</span> (c[i] != c[i - <span class="number">1</span>])</span><br><span class="line">++ans;</span><br><span class="line"><span class="built_in">add</span>(c[i], i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> op, x, y;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">merge</span>(p[x], p[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h2><p><a href="https://www.luogu.com.cn/problem/CF600E">Lomsat gelral</a></p><p>其实是一道树上并查集，类似树链剖分找出重儿子，暴力计算每一棵子树，但最后再计算重儿子，这样可以把重儿子的信息保留下来，下一次用的时候就不必再算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> c[N], cnt[N], mx;</span><br><span class="line">LL ans[N], sum;</span><br><span class="line"><span class="keyword">int</span> si[N], h_son[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">si[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (y == fa)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(y, x);</span><br><span class="line">si[x] += si[y];</span><br><span class="line"><span class="keyword">if</span> (si[y] &gt; si[h_son[x]])</span><br><span class="line">h_son[x] = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> dt, <span class="keyword">int</span> pass)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> _c = c[x];</span><br><span class="line">cnt[_c] += dt;</span><br><span class="line"><span class="keyword">if</span> (cnt[_c] &gt; mx)</span><br><span class="line">mx = cnt[_c], sum = _c;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cnt[_c] == mx)</span><br><span class="line">sum += _c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (y == fa || y == pass)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">update</span>(y, x, dt, pass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (y == fa || y == h_son[x])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(y, x, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (h_son[x])</span><br><span class="line"><span class="built_in">dfs</span>(h_son[x], x, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">update</span>(x, fa, <span class="number">1</span>, h_son[x]);</span><br><span class="line">ans[x] = sum;</span><br><span class="line"><span class="keyword">if</span> (!op)</span><br><span class="line"><span class="built_in">update</span>(x, fa, <span class="number">-1</span>, <span class="number">0</span>), mx = sum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line"><span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 聪明的合并&lt;/p&gt;</summary>
    
    
    
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="并查集" scheme="https://dyd-true.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    <category term="启发式合并" scheme="https://dyd-true.github.io/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>点分治</title>
    <link href="https://dyd-true.github.io/2021/12/05/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    <id>https://dyd-true.github.io/2021/12/05/%E7%82%B9%E5%88%86%E6%B2%BB/</id>
    <published>2021-12-05T00:17:35.000Z</published>
    <updated>2021-12-06T09:21:05.671Z</updated>
    
    <content type="html"><![CDATA[<p> 连分治也变得难了起来……</p><span id="more"></span><h1 id="点分治"><a href="#点分治" class="headerlink" title="点分治"></a>点分治</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>点分治是<strong>树上分治</strong>的种常用方法，主要思想是每次在树上选一个点，将整棵树的问题划分为两类（如图）：三角形的子树内问题和过了点跨子树的问题</p><p><img src="https://s2.loli.net/2021/12/05/mJCZwSPnvaE3W4K.png" alt="点和子树"></p><p>然后每个子树也这样划分，这个点每次取<strong>重心</strong>，可以保证最多划分 $\log n$ 层</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p><a href="https://www.acwing.com/problem/content/254/">树</a></p><p>题意非常简单：求树上距离不超过 $k$ 的点对数量，点分治的思路也非常简单，每次选重心（记选的节点为 $c$ ），分三类：</p><ol><li>对于两个点都在同一子树内部的情况，递归处理</li><li>对于有一个点恰好是 $c$ 的情况，直接dfs求</li><li>对于跨子树的情况，可以先求出每棵子树内每个点到 $c$ 的距离，然后对于所有距离，记录任选两个距离和小于等于 $k$ 的情况，再删掉同一棵子树内两个点距离和小于等于 $k$ 的情况即可，而求解“一个集合内任取两个数和小于等于 $k$ 的方案数”可以用排序后双指针来解决（也可以排序后二分，麻烦点）</li></ol><p>考虑时间复杂度，最多有 $\log n$ 层，每层 $n$ 个点都要排序，一共是 $O(n \log^2 n)$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver, w;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="keyword">bool</span> del[N];</span><br><span class="line"><span class="keyword">int</span> p[N], q[N], cp, cq;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y, z&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_si</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line">res += <span class="built_in">get_si</span>(e[i].ver, x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_wc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> si, <span class="keyword">int</span> &amp;wc)</span> <span class="comment">// 求重心(其实是一个保证删去后子树大小小于n/2的点,不一定是重心)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">1</span>, mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y, t; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (y == fa)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">t = <span class="built_in">get_wc</span>(y, x, si, wc);</span><br><span class="line">mx = <span class="built_in">max</span>(mx, t);</span><br><span class="line">sum += t;</span><br><span class="line">&#125;</span><br><span class="line">mx = <span class="built_in">max</span>(mx, si - sum);</span><br><span class="line"><span class="keyword">if</span> (mx &lt;= si / <span class="number">2</span>)</span><br><span class="line">wc = x;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">q[++cq] = dis;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line"><span class="built_in">get_dis</span>(e[i].ver, x, dis + e[i].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> c)</span> <span class="comment">//计算集合a中有多少对相加不大于k</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + c);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = c, j = <span class="number">0</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (j + <span class="number">1</span> &lt; i &amp;&amp; a[j + <span class="number">1</span>] + a[i] &lt;= k)</span><br><span class="line">++j;</span><br><span class="line">j = <span class="built_in">min</span>(j, i - <span class="number">1</span>);</span><br><span class="line">res += j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_wc</span>(x, <span class="number">-1</span>, <span class="built_in">get_si</span>(x, <span class="number">-1</span>), x);</span><br><span class="line">del[x] = <span class="literal">true</span>;</span><br><span class="line">cp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line">cq = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_dis</span>(y, <span class="number">-1</span>, e[i].w);</span><br><span class="line">res -= <span class="built_in">work</span>(q, cq);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cq; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (q[j] &lt;= k)</span><br><span class="line">++res;</span><br><span class="line">p[++cp] = q[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res += <span class="built_in">work</span>(p, cp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">res += <span class="built_in">calc</span>(e[i].ver);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k), n || k)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>, del[i] = <span class="literal">false</span>;;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line"><span class="built_in">add</span>(u + <span class="number">1</span>, v + <span class="number">1</span>, w), <span class="built_in">add</span>(v + <span class="number">1</span>, u + <span class="number">1</span>, w); <span class="comment">//输入的下标是从0开始的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">calc</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://www.acwing.com/problem/content/266/">权值</a></p><p>类似于模板，看注释吧，时间复杂度 $O(n \log n)$ ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, S = <span class="number">1e6</span> + <span class="number">5</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, ans = INF;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver, w;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> dis, num;</span><br><span class="line">&#125; p[N], q[N];</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="keyword">bool</span> del[N];</span><br><span class="line"><span class="keyword">int</span> cp, cq;</span><br><span class="line"><span class="keyword">int</span> b[S]; <span class="comment">//开一个桶记录到重心距离为i的点的最小边数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y, z&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_si</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line">res += <span class="built_in">get_si</span>(e[i].ver, x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_wc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> si, <span class="keyword">int</span> &amp;wc)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">1</span>, mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y, t; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (y == fa)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">t = <span class="built_in">get_wc</span>(y, x, si, wc);</span><br><span class="line">mx = <span class="built_in">max</span>(mx, t);</span><br><span class="line">sum += t;</span><br><span class="line">&#125;</span><br><span class="line">mx = <span class="built_in">max</span>(mx, si - sum);</span><br><span class="line"><span class="keyword">if</span> (mx &lt;= si / <span class="number">2</span>)</span><br><span class="line">wc = x;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> dis, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x] || dis &gt; k)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">q[++cq] = (Node)&#123;dis, num&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line"><span class="built_in">get_dis</span>(e[i].ver, x, dis + e[i].w, num + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">get_wc</span>(x, <span class="number">-1</span>, <span class="built_in">get_si</span>(x, <span class="number">-1</span>), x);</span><br><span class="line">del[x] = <span class="literal">true</span>;</span><br><span class="line">cp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line">cq = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_dis</span>(y, x, e[i].w, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cq; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (q[j].dis == k)</span><br><span class="line">ans = <span class="built_in">min</span>(ans, q[j].num);</span><br><span class="line">ans = <span class="built_in">min</span>(ans, b[k - q[j].dis] + q[j].num);</span><br><span class="line">p[++cp] = q[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cq; ++j)</span><br><span class="line">b[q[j].dis] = <span class="built_in">min</span>(b[q[j].dis], q[j].num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cp; ++j) <span class="comment">//将桶清空</span></span><br><span class="line">b[p[j].dis] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="built_in">calc</span>(e[i].ver);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++i)</span><br><span class="line">    b[i] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line"><span class="built_in">add</span>(u + <span class="number">1</span>, v + <span class="number">1</span>, w), <span class="built_in">add</span>(v + <span class="number">1</span>, u + <span class="number">1</span>, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">calc</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ans == INF)</span><br><span class="line">ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P3806">【模板】点分治1</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>, K = <span class="number">1e7</span> + <span class="number">5</span>, M = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver, w;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="keyword">bool</span> del[N];</span><br><span class="line"><span class="keyword">int</span> p[N], q[N], o[N], cp, cq, co;</span><br><span class="line">list&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="keyword">int</span> _Q[M];</span><br><span class="line"><span class="keyword">bool</span> b[K], ans[K];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y, z&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_si</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line">res += <span class="built_in">get_si</span>(e[i].ver, x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_wc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> si, <span class="keyword">int</span> &amp;wc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">1</span>, mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y, t; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (y == fa)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">t = <span class="built_in">get_wc</span>(y, x, si, wc);</span><br><span class="line">mx = <span class="built_in">max</span>(mx, t);</span><br><span class="line">sum += t;</span><br><span class="line">&#125;</span><br><span class="line">mx = <span class="built_in">max</span>(mx, si - sum);</span><br><span class="line"><span class="keyword">if</span> (mx &lt;= si / <span class="number">2</span>)</span><br><span class="line">wc = x;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x] || dis &gt; K)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">q[++cq] = dis;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line"><span class="built_in">get_dis</span>(e[i].ver, x, dis + e[i].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">get_wc</span>(x, <span class="number">-1</span>, <span class="built_in">get_si</span>(x, <span class="number">-1</span>), x);</span><br><span class="line">del[x] = <span class="literal">true</span>;</span><br><span class="line">cp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line">cq = co = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_dis</span>(y, <span class="number">-1</span>, e[i].w);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cq; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r : Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (q[j] == r)</span><br><span class="line">ans[r] = <span class="literal">true</span>, o[++co] = r;</span><br><span class="line"><span class="keyword">if</span> (r &gt;= q[j] &amp;&amp; b[r - q[j]])</span><br><span class="line">ans[r] = <span class="literal">true</span>, o[++co] = r;</span><br><span class="line">&#125;</span><br><span class="line">p[++cp] = q[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cq; ++j)</span><br><span class="line">b[q[j]] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= co; ++j)</span><br><span class="line">Q.<span class="built_in">remove</span>(o[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cp; ++j)</span><br><span class="line">b[p[j]] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="built_in">calc</span>(e[i].ver);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line"><span class="built_in">add</span>(u, v, w), <span class="built_in">add</span>(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_Q[i]);</span><br><span class="line">Q.<span class="built_in">push_back</span>(_Q[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">calc</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line"><span class="keyword">if</span> (ans[_Q[i]])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AYE\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NAY\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态点分治（点分树）"><a href="#动态点分治（点分树）" class="headerlink" title="动态点分治（点分树）"></a>动态点分治（点分树）</h2><p>还是先看模板题<a href="https://www.luogu.com.cn/problem/P3241">[HNOI2015]开店</a></p><p>既然叫点分树了，当然是要建一棵树，而这棵树要保证<strong>每一棵子树的根节点就是该子树的重心</strong></p><p>建好树后，考虑如何解决询问，不难发现，一个节点 $u$ 最多属于 $\log n$ 棵子树，不妨设当前子树根节点为 $r$ ：</p><ol><li>若  $r \ne u$ ，考虑形如 $u \rightarrow r \rightarrow v$  的路径有多少个，计入答案，然后进入  $u$ 所在子树递归</li><li>若 $u = r$ ，遍历当前子树所有点，计入答案，然后停止递归</li></ol><p>由于每个点的度不大于3，直接在每个重心上开三个vector，记录每个子树的所有年龄和它到重心的距离，排好序后前缀和+二分即可，总的空间复杂度为 $O(n \log n)$ 时间复杂度为 $O(m \log^2 n)$ ， $m$ 是询问的数量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VS vector<span class="meta-string">&lt;Son&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1.5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, A;</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver, w;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Father</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, id;</span><br><span class="line">LL dis;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Son</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">LL dis;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Son &amp;t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> age &lt; t.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Father&gt; f[N];</span><br><span class="line">VS s[N][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">bool</span> del[N];</span><br><span class="line"><span class="keyword">int</span> age[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y, z&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_si</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line">res += <span class="built_in">get_si</span>(e[i].ver, x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_wc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> si, <span class="keyword">int</span> &amp;wc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">1</span>, mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], t; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (e[i].ver == fa)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">t = <span class="built_in">get_wc</span>(e[i].ver, x, si, wc);</span><br><span class="line">mx = <span class="built_in">max</span>(mx, t);</span><br><span class="line">sum += t;</span><br><span class="line">&#125;</span><br><span class="line">mx = <span class="built_in">max</span>(mx, si - sum);</span><br><span class="line"><span class="keyword">if</span> (mx &lt;= si / <span class="number">2</span>)</span><br><span class="line">wc = x;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, LL dis, <span class="keyword">int</span> wc, <span class="keyword">int</span> k, VS &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">f[x].<span class="built_in">push_back</span>((Father)&#123;wc, k, dis&#125;);</span><br><span class="line">p.<span class="built_in">push_back</span>((Son)&#123;age[x], dis&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], t; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line"><span class="built_in">get_dis</span>(e[i].ver, x, dis + e[i].w, wc, k, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">get_wc</span>(x, <span class="number">-1</span>, <span class="built_in">get_si</span>(x, <span class="number">-1</span>), x);</span><br><span class="line">del[x] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y, k = <span class="number">0</span>; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (del[y])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">VS &amp;p = s[x][k];</span><br><span class="line">p.<span class="built_in">push_back</span>((Son)&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;), p.<span class="built_in">push_back</span>((Son)&#123;A + <span class="number">1</span>, <span class="number">0</span>&#125;); <span class="comment">//哨兵</span></span><br><span class="line"><span class="built_in">get_dis</span>(y, <span class="number">-1</span>, e[i].w, x, k, p);</span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; p.<span class="built_in">size</span>(); ++i)</span><br><span class="line">p[i].dis += p[i - <span class="number">1</span>].dis;</span><br><span class="line">++k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="built_in">calc</span>(e[i].ver);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Father &amp;i : f[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> g = age[i.x];</span><br><span class="line"><span class="keyword">if</span> (g &gt;= l &amp;&amp; g &lt;= r)</span><br><span class="line">res += i.dis;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == i.id)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">VS &amp;p = s[i.x][j];</span><br><span class="line"><span class="keyword">if</span> (p.<span class="built_in">empty</span>())</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="built_in">lower_bound</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), (Son)&#123;l, <span class="number">-1</span>&#125;) - p.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">int</span> b = <span class="built_in">lower_bound</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), (Son)&#123;r + <span class="number">1</span>, <span class="number">-1</span>&#125;) - p.<span class="built_in">begin</span>();</span><br><span class="line">res += i.dis * (b - a) + p[b - <span class="number">1</span>].dis - p[a - <span class="number">1</span>].dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">VS &amp;p = s[x][i];</span><br><span class="line"><span class="keyword">if</span> (p.<span class="built_in">empty</span>())</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="built_in">lower_bound</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), (Son)&#123;l, <span class="number">-1</span>&#125;) - p.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">int</span> b = <span class="built_in">lower_bound</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), (Son)&#123;r + <span class="number">1</span>, <span class="number">-1</span>&#125;) - p.<span class="built_in">begin</span>();</span><br><span class="line">res += p[b - <span class="number">1</span>].dis - p[a - <span class="number">1</span>].dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;A);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line"><span class="built_in">add</span>(u, v, w), <span class="built_in">add</span>(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">calc</span>(<span class="number">1</span>);</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> u, a, b, l, r;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;a, &amp;b);</span><br><span class="line">l = (a + ans) % A, r = (b + ans) % A;</span><br><span class="line"><span class="keyword">if</span> (l &gt; r)</span><br><span class="line"><span class="built_in">swap</span>(l, r);</span><br><span class="line">ans = <span class="built_in">ask</span>(u, l, r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 连分治也变得难了起来……&lt;/p&gt;</summary>
    
    
    
    
    <category term="分治" scheme="https://dyd-true.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="dfs" scheme="https://dyd-true.github.io/tags/dfs/"/>
    
    <category term="点分治" scheme="https://dyd-true.github.io/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
    <category term="点分树" scheme="https://dyd-true.github.io/tags/%E7%82%B9%E5%88%86%E6%A0%91/"/>
    
  </entry>
  
</feed>
