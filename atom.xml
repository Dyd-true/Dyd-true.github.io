<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dyd&#39;s Blog</title>
  
  <subtitle>He who has a strong enough why can bear almost any how.</subtitle>
  <link href="https://dyd-true.github.io/atom.xml" rel="self"/>
  
  <link href="https://dyd-true.github.io/"/>
  <updated>2021-12-12T01:19:40.932Z</updated>
  <id>https://dyd-true.github.io/</id>
  
  <author>
    <name>Dyd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>luoguP3896 [湖南集训]Clever Rabbit</title>
    <link href="https://dyd-true.github.io/2021/12/08/luoguP3896-%E6%B9%96%E5%8D%97%E9%9B%86%E8%AE%AD-Clever-Rabbit/"/>
    <id>https://dyd-true.github.io/2021/12/08/luoguP3896-%E6%B9%96%E5%8D%97%E9%9B%86%E8%AE%AD-Clever-Rabbit/</id>
    <published>2021-12-08T12:50:21.000Z</published>
    <updated>2021-12-12T01:19:40.932Z</updated>
    
    <content type="html"><![CDATA[<p>  一道很暴力的题</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P3896">Clever Rabbit</a></p><p>一看 $n \le 30$ ，时限4s，第一反应打表能过，仔细回味，发现 $10^{30}$ 铁挂，而且20分的 $n \le 10$ 都会挂，这……</p><p>但不能浪费我辛苦打出来的表（由于 $x = 0$ 对答案无贡献，故保证 $x &gt; 0$ ）：</p><table><thead><tr><th align="center">n</th><th align="center">x</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">-</td></tr><tr><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">3</td><td align="center">495</td></tr><tr><td align="center">4</td><td align="center">6174</td></tr><tr><td align="center">5</td><td align="center">-</td></tr><tr><td align="center">6</td><td align="center">549945<br/>631764</td></tr><tr><td align="center">7</td><td align="center">-</td></tr><tr><td align="center">8</td><td align="center">63317664<br/>97508421</td></tr><tr><td align="center">9</td><td align="center">554999445<br/>864197532</td></tr></tbody></table><p>9的数据都跑了进3min……</p><p>然后又是全凭rp的找规律时间，浪费时间ing</p><p>发现一个小规律，看图：</p><p><img src="https://s2.loli.net/2021/12/12/repxRFMSVkOgN7f.png" alt="竖式"></p><p>我们发现 $b$ 数是对称且单调下降的（下降不严格），证明也很好证（自己列个竖式就知道了），那么我们可以枚举 $b$ 的一半，计算另一半，然后得到 $b’$ 排序后得到 $c, d$ ，计算检验即可，然鹅， $10^{\frac{n}{2}} = 10^{15}$ 次方也是挂了</p><p>突然发现只需枚举 $0 \sim 9$ 每个数出现了多少次，计算 $max,min,max - min$ 判断即可，考虑时间复杂度，看似是 $n^{10} * n$ （跑不满），但实际上用隔板法可知为 $O(\binom{n + 10 - 1}{9}n)$ ， 注意解决一下高精减法，可以得60分（开了O2可以70分）</p><p>再考虑我们打表发现的性质，还是生成 $b$ ，但和上面一样，只枚举 $b$ 的前 $\frac{n}{2}$ 个数中 $0 \sim 9$ 各出现了多少次，由于 $b$ 单调，故只有一种合法排列，生成  $b’$ 后暴力检验 ，特殊处理一下  $n$ 为奇数时中间的数（一定是0）</p><p>不开O2最慢的点1.89s（时限4s，能过），开了O2快得飞起，最慢的点412ms</p><p>考虑优化（毕竟1.89s太讨厌了），那个排序可以开个桶，把 $\log n$ 优化了（然鹅 $n \le 30$ 所以 $\log n$ 几乎就是常数），再就是其实可以先不求出 $b’$ 用 $b$ 的一半即可判断是否合法，合法再求（常数优化），然后卡卡常，时间复杂度为 $O(\binom{\frac{n}{2} + 10 -1}{9}n)$ ，不开O2最慢的点322ms，开了O2最慢的点205ms，好像除了打表的大佬（竟然真的可以打表，蒟蒻想都不敢想）我混了个最快？估计马上就会被大佬们超过</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>  N = <span class="number">30</span> + <span class="number">5</span>, A = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> n, p, m, o;</span><br><span class="line"><span class="keyword">int</span> t, cnt;</span><br><span class="line"><span class="keyword">int</span> a[A], b[N], c[N], d[N];</span><br><span class="line"><span class="keyword">int</span> B[A]; <span class="comment">//桶</span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= B[i]; ++j)</span><br><span class="line">c[++t] = i, d[n - t + <span class="number">1</span>] = i;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">d[i] = d[i] - c[i];</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line"><span class="keyword">if</span> (d[i] != b[i])</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">b[n + <span class="number">1</span> - i] = -b[i];</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line"><span class="keyword">if</span> (b[i] &lt; <span class="number">0</span>)</span><br><span class="line">b[i] += <span class="number">10</span>, --b[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">t = ((LL)t * <span class="number">10</span> + b[i]) % p;</span><br><span class="line">ans = (((LL)t * t % p) + ans) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> <span class="comment">//生成b&#x27;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">B[i] = <span class="number">0</span>;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= a[i]; ++j)</span><br><span class="line">b[++cnt] = i;</span><br><span class="line"><span class="keyword">if</span> (o)</span><br><span class="line">b[cnt + <span class="number">1</span>] = <span class="number">0</span>, ++B[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = cnt, f = <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">1</span>)</span><br><span class="line">++B[<span class="number">9</span> - b[i]];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">++B[<span class="number">10</span> - b[i]];</span><br><span class="line"><span class="keyword">if</span> (b[i] == <span class="number">0</span> &amp;&amp; f)</span><br><span class="line">++B[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (f)</span><br><span class="line">++B[b[i] - <span class="number">1</span>], f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">++B[b[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[x] = r;</span><br><span class="line"><span class="built_in">work</span>();</span><br><span class="line"><span class="built_in">check</span>();</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= r; ++i)</span><br><span class="line">&#123;</span><br><span class="line">a[x] = i;</span><br><span class="line"><span class="built_in">dfs</span>(x + <span class="number">1</span>, r - i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;p);</span><br><span class="line">o = n &amp; <span class="number">1</span>;</span><br><span class="line">m = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans % p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;  一道很暴力的题&lt;/p&gt;</summary>
    
    
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="找规律" scheme="https://dyd-true.github.io/tags/%E6%89%BE%E8%A7%84%E5%BE%8B/"/>
    
    <category term="高精" scheme="https://dyd-true.github.io/tags/%E9%AB%98%E7%B2%BE/"/>
    
  </entry>
  
  <entry>
    <title>luoguP4892 GodFly的寻宝之旅</title>
    <link href="https://dyd-true.github.io/2021/12/06/luoguP4892-GodFly%E7%9A%84%E5%AF%BB%E5%AE%9D%E4%B9%8B%E6%97%85/"/>
    <id>https://dyd-true.github.io/2021/12/06/luoguP4892-GodFly%E7%9A%84%E5%AF%BB%E5%AE%9D%E4%B9%8B%E6%97%85/</id>
    <published>2021-12-06T14:00:40.000Z</published>
    <updated>2021-12-08T12:58:22.808Z</updated>
    
    <content type="html"><![CDATA[<p> 随机跳题都给我跳些神马玩意</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4892">GodFly的寻宝之旅</a></p><p>看了数据范围，感觉 $m$ （边数）应该只是做权值的，时间应和 $n$ 关系大些（毕竟  $n \le 18, m \le 10^5$ ），先考虑了暴力，暴搜走法，以边数为权值，时间复杂度为  $O(n!)$ 期望30分（我也没打所以正确性没保证） </p><p>然后继续以  $m$ 为权值的思路，考虑状压dp，设 $f[i][j][w]$ 表示“走到点 $i$ ，当前点集合为 $j$ 且当前代价为 $w$ 的方案数”，转移很显然，下面以 $w = 0$ 的转移为例：<br>$$<br>\begin{align}<br>&amp;\text{设当前地图为}j \text{（不存在}v \text{），和为}sum(j) \text{且存在边}u \rightarrow v \text{数为}mp[u][v] \text{，} j + v \text{指将点}v \text{压入状态}\\<br>&amp;f[v][j + v][0] += mp[u][v] *<br>\begin{cases}<br>f[u][j][0] &amp; if(v \mod 2 = 0)\\<br>f[u][j][0] &amp; if(v \mod 2 = 1 \wedge sum(j) \mod 2 = 0)\\<br>f[u][j][1] &amp; if(v \mod 2 = 1 \wedge sum(j) \mod 2 = 1)<br>\end{cases}<br>\end{align}<br>$$<br>打的很快，注意了取模，结果一交——WA</p><p>想对着样例调一下，于是翻出了2018的比赛（这是那次比赛的第三题），正打算下载样例，结果……谁家出题组样例用百度网盘发呀！下一个百度网盘太麻烦，于是放弃，只好对着死调</p><p>就在我万念俱灰之时，突然感觉 $f[i][j][w]$ 的顺序怪怪的，因为dp的无后效性是用第二维（当前点集只增不减）来保证的，那么是不是应该先枚举 $j$ 再枚举 $i$ 呢？怀着如果还不过就只有手造样例心态，把第二层循环调到了最外层，结果，柳暗花明又一村，AC了！</p><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>, P = <span class="number">19260817</span>, D = (<span class="number">1</span> &lt;&lt; <span class="number">18</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> mp[N][N];</span><br><span class="line"><span class="keyword">int</span> f[N][D][<span class="number">2</span>]; <span class="comment">//f[i][j][w]:走到i,当前点集为j,价值为w的方案数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">have</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((x &gt;&gt; (y - <span class="number">1</span>)) &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x | (<span class="number">1</span> &lt;&lt; (y - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_s</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">have</span>(x, i))</span><br><span class="line">res += i;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//debug</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; <span class="string">&quot; have&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">have</span>(x, i))</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c, d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">d = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">++mp[u][v], ++mp[v][u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="comment">//每个点只走一次,故没有自环</span></span><br><span class="line">mp[i][i] = <span class="number">0</span>;</span><br><span class="line">f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, sum; j &lt;= d; ++j) <span class="comment">//将第二层循环移到最外</span></span><br><span class="line">&#123;</span><br><span class="line">sum = <span class="built_in">get_s</span>(j);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="comment">//到n就停止,故不可能从n走到其它点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">have</span>(j, i))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">have</span>(j, k))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!mp[i][k])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sum &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>] = ((LL)f[i][j][<span class="number">0</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>]) % P;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>] = ((LL)f[i][j][<span class="number">1</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>]) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>] = ((LL)f[i][j][<span class="number">1</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>]) % P;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>] = ((LL)f[i][j][<span class="number">0</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>]) % P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>] = ((LL)f[i][j][<span class="number">1</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">1</span>]) % P;</span><br><span class="line">f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>] = ((LL)f[i][j][<span class="number">0</span>] * mp[i][k] % P + f[k][<span class="built_in">add</span>(j, k)][<span class="number">0</span>]) % P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; ++i)</span><br><span class="line">ans = (ans + f[n][i][c]) % P;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉这个状压比较简单，毕竟连我这种<strong>奆弱</strong>都可以做</p><p>说句题外话，找样例的时候虽然样例没找到，但发现GodFly是“牛虻”的意思</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 随机跳题都给我跳些神马玩意&lt;/p&gt;</summary>
    
    
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="状态压缩" scheme="https://dyd-true.github.io/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>luoguP2441 角色属性树</title>
    <link href="https://dyd-true.github.io/2021/12/06/luoguP2441-%E8%A7%92%E8%89%B2%E5%B1%9E%E6%80%A7%E6%A0%91/"/>
    <id>https://dyd-true.github.io/2021/12/06/luoguP2441-%E8%A7%92%E8%89%B2%E5%B1%9E%E6%80%A7%E6%A0%91/</id>
    <published>2021-12-06T13:35:36.000Z</published>
    <updated>2021-12-08T12:53:54.194Z</updated>
    
    <content type="html"><![CDATA[<p> 暴力出奇迹</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P2441">角色属性树</a></p><p>第一眼看过去想的是分解质因数后建图处理，一看 $a \le 2^31 - 1$ 完蛋</p><p>再仔细端详了一下数据， $n \le 2 \times 10^5$ ，估计是 $O(n \log n)$ 的算法，  $\text{修改次数} \le 50$ 似乎在提示我们暴力修改，估计是个树上倍增的算法，但具体实现还没想好，就被说明/提示的最后一行吸引：<strong>本题测试数据随机，可能是假题</strong>，随机生成，也就是说……暴力的<strong>期望</strong>复杂度也是 $O(n \log n)$ ，<del>本着能偷懒就偷懒的心态</del>，含泪AC了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> w[N], fa[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> y == <span class="number">0</span> ? x : <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">gcd</span>(w[x], a) != <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ask</span>(fa[x], a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k, op, u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt; n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), fa[y] = x;</span><br><span class="line"><span class="keyword">while</span> (k--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;op, &amp;u);</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ask</span>(fa[u], w[u]));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来看题解，也有树上倍增lca的做法，但是那样要维护区间乘积了，需要打高精，直接放弃</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 暴力出奇迹&lt;/p&gt;</summary>
    
    
    
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="lca" scheme="https://dyd-true.github.io/tags/lca/"/>
    
    <category term="倍增" scheme="https://dyd-true.github.io/tags/%E5%80%8D%E5%A2%9E/"/>
    
    <category term="素数" scheme="https://dyd-true.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
    <category term="最大公约数" scheme="https://dyd-true.github.io/tags/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>最小表示法</title>
    <link href="https://dyd-true.github.io/2021/12/06/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
    <id>https://dyd-true.github.io/2021/12/06/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/</id>
    <published>2021-12-06T10:57:09.000Z</published>
    <updated>2021-12-06T11:35:56.423Z</updated>
    
    <content type="html"><![CDATA[<p> 简单的缓和一下</p><span id="more"></span><h1 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>给定一个字符串 $S$ ，通过将 $S$ 循环移动可以得到至多 $n$ 个不同的串，其中 $n = |S|$ ，例如： $S = bcacd$ ，它循环移动一位可以得到 $S’ = cacdb$ （即把最后第一位放到最后）</p><p>对于得到的所有不同的字符串，字典序最小的串就叫原串的<strong>最小表示法</strong>，在上面的例子中， $S$ 的最小表示法为 $acdbc$ </p><h2 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h2><p>最小表示法的求法比较简单，把字符串复制一倍接在原串后面（破环成链），然后用一个双指针 $i, j$ 指向两个不同串的开头，初始时 $i = 1, j = 2$ （假设字符串从1开始）</p><p>然后暴力找到一个最小的非负整数 $k$ 满足 $S_{i + k} \ne S_{j + k}$ ：</p><ol><li>若 $S_{i + k} &lt; S_{j + k}$ ，则说明 $j \sim j + k$ 之间的所有位置开头的字符串都不是最小表示，因为它们都可以找到 $i \sim i + k$ 之间对应的开头的字符串，两个字符串到 $j + k$ （ $i + k$ ）前都相同，而 $S_{i + k} &lt; S_{j + k}$ ，故直接令 $j = j + k + 1$ </li><li>若 $S_{i + k} &gt; S_{j + k}$ ，同理令 $i = i + k + 1$ </li></ol><p>有几个特判：</p><ol><li> $i = j$ 时，让 $i = i + 1$ （加 $j$ 也行）</li><li>  $k &gt; n$ 时，说明两个开头的串一样，画图不难发现此时 $i \sim j$ 一定时一个循环节，而 $i \sim j$ 我们一定遍历过，所以直接结束</li></ol><p>完成后 $\min(i, j)$ 即为最小表示法的开头</p><p>时间复杂度为 $O(n)$ </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_min</span><span class="params">(<span class="keyword">char</span> *s)</span> <span class="comment">//求串s的最小表示,完成后答案存在s[k...k + len - 1]中</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">s[len + i] = s[i];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">2</span>, k;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= len &amp;&amp; j &lt;= len)</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (k &lt;= len &amp;&amp; s[i + k] == s[j + k])</span><br><span class="line">++k;</span><br><span class="line"><span class="keyword">if</span> (k &gt; len)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (s[i + k] &gt; s[j + k])</span><br><span class="line">i += k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">j += k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i == j)</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">k = <span class="built_in">min</span>(i, j);</span><br><span class="line">s[k + len] = <span class="number">0</span>; <span class="comment">//加上结束符</span></span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数中：</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">get_min</span>(a);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 简单的缓和一下&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="最小表示法" scheme="https://dyd-true.github.io/tags/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/06总结</title>
    <link href="https://dyd-true.github.io/2021/12/06/test2021-12-06%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/06/test2021-12-06%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-06T10:08:03.000Z</published>
    <updated>2021-12-06T13:09:35.361Z</updated>
    
    <content type="html"><![CDATA[<p> 你以为的不是你以为的，而是你以为的</p><span id="more"></span><h1 id="test2021-12-06总结"><a href="#test2021-12-06总结" class="headerlink" title="test2021/12/06总结"></a>test2021/12/06总结</h1><h2 id="题目、成绩和题解"><a href="#题目、成绩和题解" class="headerlink" title="题目、成绩和题解"></a>题目、成绩和题解</h2><p><a href="./day1.pdf">题目</a></p><p><a href="./result.pdf">成绩</a></p><p><a href="./solution.pdf">题解</a></p><h2 id="考前"><a href="#考前" class="headerlink" title="考前"></a>考前</h2><p>考前的白天，老师让我们学了<strong>点分治</strong>和<strong>启发式合并</strong>，估计要考（预判）</p><p>晚上在寝室里还发生了一件不同往常的事，这也就<strong>为后文埋下伏笔</strong>（出于保护隐私，不能说发生了什么，但只能说，<del>泡面真香</del>）</p><h2 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h2><p>开考前老师说这次考试<strong>不给大样例</strong>，预感到要凉凉</p><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>老规矩先开T1，望过去心中一片呼伦贝尔大草原（<del>简直好优美的中国话</del>），没有大样例，题目的样例又没有解释，我连答案怎么算出来的都不知道</p><p>于是就根本不管样例了，按照自己的理解来，于是想了个<strong>点分治</strong>，每次取重心：</p><ol><li>对于不含1号节点的子树，计算每个点到重心的边数和长度，用线段树维护，每次查询区间最值（路过过重心）或者直接跟新答案（路径以重心为端点），记在重心的答案里，一棵子树统计完后在修改线段树（保证不存在两个端点都在一棵子树内的情况）</li><li>对于含1号点的子树，dfs，传递的参数中含有一个 $y$ 意为正在跟新 $y$ 号点的答案，每次进入下一层时，若进入 $fa[x]$ （ $x$ 是当前节点），则让 $y = fa[x]$ ，否则  $y$ 不变</li></ol><p>时间复杂度为  $O(n \log^2 n)$ ， $n \le 10^6$  , 时限给的4m，期望得分50（<del>然而只是个期望</del>）</p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>花了大概  $1.5 \sim 2h$ 打完T1，浏览了一下T2、T3，T3的没看懂，T2感觉像是个博弈论，决定先开T2</p><p>回忆了一下SG函数（忘了有一半的样子吧），只记得如何判必胜，想了一会<strong>决定打暴力</strong>（这将是我本次考试最正确的决定），大概思路是对于当前操作者，dfs搜索每一种情况，找到自己赢的情况就返回自己赢（因为走最优策略），如果没有自己赢的情况就返回对方赢</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> who)</span> <span class="comment">//返回winner </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> xx, yy, t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">xx = x + dx[i], yy = y + dy[i];</span><br><span class="line"><span class="keyword">if</span> (mp[xx][yy] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; !vis[xx][yy])</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dfs</span>(xx, yy, who ^ <span class="number">1</span>) == who)</span><br><span class="line">&#123;</span><br><span class="line">vis[x][y] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> who;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[x][y] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> who ^ <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没怎么调试，手算了一组数据就去T3了</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>最开始没看懂题，加上<strong>昨天晚上的伏笔</strong>（忘了的可以上去看）差点放弃，但最后还是坚持着读懂了题，其实最大的歧义在于“价值恰好是 $P$ 的倍数”其实指的是“价值在模 $P$ 意义下为0”</p><p>读懂了题，就开做，第一反应是<strong>笛卡尔树</strong>，因为价值的定义有一个“最大”，感觉可以每次找最大点，以它为根处理所有过了它的路径，然后再删掉它，递归处理几个子树</p><p>具体实现用的是类似于点分治的构架，只是把找重心改成找最大点而已，时间复杂度当然是<strong>完全假掉</strong>的  $O(n \log n)$ ，目标是  $n \le 2000$ 和随机生成数据两个部分分，度数不大于2感觉太难打了就先没打，期望得分44（<del>我是有多么自信啊</del>）</p><h3 id="T？"><a href="#T？" class="headerlink" title="T？"></a>T？</h3><p>打完T3，感觉这场考试要凉，只有T1感觉像个正常思路，于是去<strong>检查了一下T1</strong>（用了约30min）</p><p>然后，由于<strong>昨天晚上的伏笔</strong>，接下来的约  $1 \sim 1.5h$ 处于掉线状态，没有再改动代码</p><p>提交时已经做好垫底的准备，估计只有T1有点分，T2、T3虽然打了但没怎么花时间看，心中不稳，估分 $30 + 0 + 0 \sim 60 + 30 + 44$ ，即 $30 \sim 134$ 的样子吧（然而事实与我所料大不相同）</p><h2 id="出成绩"><a href="#出成绩" class="headerlink" title="出成绩"></a>出成绩</h2><p>11：40考完就跑代码了，结果是 $0 + 80(20) + 28 = 106$ ，第二题括号里的是数据加强版</p><p>总分在预料内吧，但T1和T2的分数是不是反了啊？！T1我那么认真、那么自信的打了5kb的代码，结果 $WA + TLE = 0$ ，T2打了个稍微聪明点的暴力，时间花的最少，结果80……T3得了个正常的暴力分（<del>还比别人的暴力高4分好耶！</del>）</p><p>T1<strong>wfy</strong>大佬打的启发式合并（正解也是<strong>启发式合并</strong>，但<strong>wfy</strong>大佬的<strong>时间复杂度好像假掉了</strong>），太厉害了，我想过启发式合并（毕竟老师提示过），但完全不会，T1好像确实很难，我们都<strong>爆零</strong>了</p><p>T3<strong>rusun</strong>大佬的思路和标程一样（<strong>点分治</strong>），可惜的是求 $size$ 时少打一行判断该点是否被删，令人遗憾</p><p>T2好像大家都是基于SG函数打的暴力，大概得了20分，我（<del>打不出来SG函数</del>）打的基于dfs的暴力可能是和正解<strong>匈牙利</strong>的dfs有相似之处吧，骗了个不错的分数，但加强数据只有我反而低了（他们都是30分）</p><p>不管了，下午来改</p><h2 id="改题"><a href="#改题" class="headerlink" title="改题"></a>改题</h2><h3 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h3><p>本来想先改T1的（毕竟早上T1打的不容易），但一是找不出错，题解又看不懂，看来一下T2的题解比较简单，先改T2</p><p>题解很清楚了，就是判断每个点是否<strong>一定</strong>在最大匹配中，具体地，可以先匈牙利求出最大匹配，然后对于每一个未匹配的点，尝试让它匹配（work函数），这样一定会释放一个点，且匹配数不变，如此迭代下即可</p><p>考虑时间复杂度，匈牙利是 $O(n^4)$ （设 $n, m$ 同级），对于work函数，设未匹配的点有 $x(0 \le x \le n^2)$ 个，则有  $n^2 - x$ 个点已匹配，work会在主函数被调用 $x$ 次，每次最多遍历 $n^2 - x$ 个点（实际上远远达不到）， $O(x * (n^2 - x)) \le O(n^4)$ 故总的实际复杂度为 $O(n^4)$ ，由于 $n \le 100$ ，且时间远远达不到上界，普通版和加强版都可以过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> mp[N][N];</span><br><span class="line"><span class="keyword">int</span> id[N][N], cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, dy[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[(N * N) &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> h[N * N], idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> vis[N * N], match[N * N], win[N * N];</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (!vis[y = e[i].ver])</span><br><span class="line">&#123;</span><br><span class="line">vis[y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!match[y] || <span class="built_in">dfs</span>(match[y]))</span><br><span class="line">&#123;</span><br><span class="line">match[y] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">addedge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line"><span class="keyword">if</span> (mp[i][j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">4</span>; ++k)</span><br><span class="line">&#123;</span><br><span class="line">x = i + dx[k], y = j + dy[k];</span><br><span class="line"><span class="keyword">if</span> (mp[x][y] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="built_in">add</span>(id[i][j], id[x][y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">get_match</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line"><span class="keyword">if</span> (mp[i][j] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; ((i + j) &amp; <span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= cnt; ++k)</span><br><span class="line">vis[k] = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">dfs</span>(id[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line"><span class="keyword">if</span> (match[i])</span><br><span class="line">match[match[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (match[e[i].ver] &amp;&amp; !win[match[e[i].ver]])</span><br><span class="line">&#123;</span><br><span class="line">++ans;</span><br><span class="line">win[match[e[i].ver]] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">work</span>(match[e[i].ver] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;b.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;b.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, mp[i] + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">id[i][j] = ++cnt, h[cnt] = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">addedge</span>();</span><br><span class="line"><span class="built_in">get_match</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line"><span class="keyword">if</span> (!match[id[i][j]] &amp;&amp; mp[i][j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">++ans;</span><br><span class="line">win[id[i][j]] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">work</span>(id[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line"><span class="keyword">if</span> (win[id[i][j]])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, i, j);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a>T3</h3><p>T1<strong>wfy</strong>大佬改了半天发现自己时间复杂度是假的，反观T3<strong>rusun</strong>dalao很快就改好了，于是决定先改T3</p><p>和题解一样，考虑点分治，每次分治找重心，划分子树，只处理过重心的路径，其它递归处理，现在考虑如何处理过重心的路径</p><p>其实类似于点分治的例题1，就是在不同子树选两个数模  $P$ 意义下和为0，开一个桶维护“到重心权值和为  $i$ （模 $P$ 意义）的点有多少个”，先统计出每个子树中每个点到重心的最大权值以及权值和，以最大权值从小到大计算答案并插入桶中，类似例题1，用容斥解决两个端点在同一个子树的情况，每次计算完后清空桶即可</p><p>需要注意的是0的特判，会出现以重心为端点的路径，这只需在计算时多差一个到重心权值为0的点即可；还有就是每个点自己构成的路径价值为0，故答案最后要加  $n$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, PP = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, P;</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="keyword">int</span> w[N];</span><br><span class="line"><span class="keyword">int</span> as[N], ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b[PP];</span><br><span class="line"><span class="keyword">bool</span> del[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> mx, sum;</span><br><span class="line">IL <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mx &lt; t.mx;</span><br><span class="line">&#125;</span><br><span class="line">&#125; p[N], q[N];</span><br><span class="line"><span class="keyword">int</span> cp, cq;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="built_in">gh</span>(), t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">t |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line"><span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">gh</span>();</span><br><span class="line"><span class="keyword">if</span> (t)</span><br><span class="line">x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">get_si</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line">res += <span class="built_in">get_si</span>(e[i].ver, x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">get_wc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> si, <span class="keyword">int</span> &amp;wc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">1</span>, mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], t; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (e[i].ver == fa)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">t = <span class="built_in">get_wc</span>(e[i].ver, x, si, wc);</span><br><span class="line">mx = <span class="built_in">max</span>(mx, t);</span><br><span class="line">sum += t;</span><br><span class="line">&#125;</span><br><span class="line">mx = <span class="built_in">max</span>(mx, si - sum);</span><br><span class="line"><span class="keyword">if</span> (mx &lt;= si / <span class="number">2</span>)</span><br><span class="line">wc = x;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">get_Node</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, Node t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">t.mx = <span class="built_in">max</span>(t.mx, w[x]);</span><br><span class="line">t.sum = (t.sum + w[x]) % P;</span><br><span class="line">q[++cq] = t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line"><span class="built_in">get_Node</span>(e[i].ver, x, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">work</span><span class="params">(Node x[], <span class="keyword">int</span> cnt, <span class="keyword">int</span> wr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(x + <span class="number">1</span>, x + <span class="number">1</span> + cnt);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t; i &lt;= cnt; ++i)</span><br><span class="line">&#123;</span><br><span class="line">t = (x[i].sum + wr - <span class="built_in">max</span>(wr, x[i].mx)) % P;</span><br><span class="line">t = (P - t) % P;</span><br><span class="line">res += b[t];</span><br><span class="line">++b[x[i].sum];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">--b[x[i].sum];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">get_wc</span>(x, <span class="number">-1</span>, <span class="built_in">get_si</span>(x, <span class="number">-1</span>), x);</span><br><span class="line">del[x] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">cp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">cq = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_Node</span>(e[i].ver, x, (Node)&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">ans -= <span class="built_in">work</span>(q, cq, w[x]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cq; ++j)</span><br><span class="line">p[++cp] = q[j];</span><br><span class="line">&#125;</span><br><span class="line">p[++cp] = (Node)&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">ans += <span class="built_in">work</span>(p, cp, w[x]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="built_in">calc</span>(e[i].ver);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;c.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;c.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="built_in">read</span>(n), <span class="built_in">read</span>(P);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line"><span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">read</span>(w[i]);</span><br><span class="line"><span class="built_in">calc</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans + n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T3-2"><a href="#T3-2" class="headerlink" title="T3"></a>T3</h3><p>还没改出来，先挖个坑吧（<del>估计是不会填了</del>）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 你以为的不是你以为的，而是你以为的&lt;/p&gt;</summary>
    
    
    
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="点分治" scheme="https://dyd-true.github.io/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
    <category term="启发式合并" scheme="https://dyd-true.github.io/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
    <category term="二分图" scheme="https://dyd-true.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Manacher</title>
    <link href="https://dyd-true.github.io/2021/12/05/Manacher/"/>
    <id>https://dyd-true.github.io/2021/12/05/Manacher/</id>
    <published>2021-12-05T07:34:27.000Z</published>
    <updated>2021-12-05T08:44:50.079Z</updated>
    
    <content type="html"><![CDATA[<p> 马拉车算法</p><span id="more"></span><h1 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>Manacher算法是一中可以在  $O(n)$ 时间内求出最长回文子串的算法（以前的 $O(n \log n)$ hash+二分可以退役了）</p><p>在使用马拉车前，由于马拉车只能求<strong>长度为奇数</strong>的回文串，所有我们首先要有一个转换，把长度为偶数的回文串化为长度为奇数，具体方法为：</p><p>在字符串的头部插入开始符（一般为“\$”），在尾部插入结尾符（一般为“^”），然后每两个字符间都插入一个分隔符（一般为“#”），例如，字符串“abbcac”转化后就是“\$#a#b#b#c#a#c#^”，这样，就可以把原串的每一个回文串都化为一个“由#开头和结尾的长度为奇数的回文串”</p><p>然后，考虑如何求最大的长度为奇数的回文串</p><p>类似kmp我们扫描整个串，记 $p[i]$ 表示“以 $i$ 为中点的最长回文串的长度的一半（包括 $i$ ）”，考虑用已有的信息求出现在的 $p[i]$ </p><p><img src="https://s2.loli.net/2021/12/05/kiKbhwgSEDUZ7YJ.png" alt="马拉车"></p><p>如图，假设现在要求 $p[i]$ ，则  $p[1 \sim i - 1]$ 已知，定义一个回文串的位置为 $[l, r]$ ，则已知的最大的 $r$ 记为 $mr(maxright)$ ，其对应的回文串中点为 $mid$ ，则分类讨论：</p><ul><li><p> $i &gt; mr$ ，此时先令 $p[i] = 1$</p></li><li><p>$i \le mr$ 此时必有 $j = mid * 2 - i$ 与 $i$ 对应，再次分类：</p><ol><li> $p[j] \le mr - i + 1$ ，此时 $j$ 所在的最大回文串全部能和 $i$ 对应（图中蓝色部分），让 $p[i] = p[j]$</li><li> $p[j] &gt; mr - i + 1$ ，此时由于 $mr$ 右边的情况未知，故只能先让 $p[i] = mr - i + 1$ </li></ol></li></ul><p>由上，我们通过已有的信息计算出了“<strong>保证合法但不保证最大</strong>的情况下 $p[i]$ 的值”，其中没有保证最大的原因是 $mr$ 右边的情况不知道，若 $i$ 所在的最大回文串的右边界大于 $mr$ ，就无法统计，解决办法是——暴力！对于分类讨论得到的 $p[i]$ ，我们暴力尝试让它加1，直到不行为止</p><p>最后统计答案时，由于 $p[i]$ 只是长度的一半应该要乘二，但由于我们把原串扩充了一倍，所以实际答案就是 $\max_{i = 1}^{n}(p[i] - 1)$ </p><p>需要注意的是，在具体的代码实现中，常常让 $mr = mr + 1$ ，换句话说，以 $mid$ 为中心的最大回文串不是 $[l, r]$ ，而是 $[l, r)$ ，上面讲成闭区间只是为了方便理解</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.luogu.com.cn/problem/P3805">【模板】manacher 算法</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1.1e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[N], b[N &lt;&lt; <span class="number">1</span>];  <span class="comment">//二倍</span></span><br><span class="line"><span class="keyword">int</span> p[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">b[++k] = <span class="string">&#x27;$&#x27;</span>, b[++k] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">b[++k] = a[i], b[++k] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">b[++k] = <span class="string">&#x27;^&#x27;</span>;</span><br><span class="line">n = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manacher</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mr = <span class="number">0</span>, mid;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; mr)</span><br><span class="line">p[i] = <span class="built_in">min</span>(p[mid * <span class="number">2</span> - i], mr - i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b[i - p[i]] == b[i + p[i]])</span><br><span class="line">++p[i];</span><br><span class="line"><span class="keyword">if</span> (i + p[i] &gt; mr)</span><br><span class="line">mr = i + p[i], mid = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">n = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">manacher</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">ans = <span class="built_in">max</span>(ans, p[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>和kmp一样，马拉车的两个循环也是“假的”，简证：</p><p>首先，如果 $i$ 所在的最大回文串 $[l, r]$ 的右断点 $r \le mr$ ，while只会执行一次，因为如果此时 $p[i]$ 一定是与 $p[j]$ 对于的，若还可以加1，这与 $p[j]$ 的“最大”矛盾</p><p>其次，若 $r &gt; mr$ ，则一定会跟新 $mr$ ，而 $mr$ 明显是不下降的，当 $mr = n$ 时，就不可能再有 $r &gt; mr$ 了，换句话说， $mr$ 最多遍历一次 $n$ ，之后就不会再跟新 $mr$ 也就不会再有 $r &gt; mr$ 了</p><p>综上，马拉车的时间复杂度为 $O(n)$ </p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 马拉车算法&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="回文串" scheme="https://dyd-true.github.io/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
    <category term="Manacher" scheme="https://dyd-true.github.io/tags/Manacher/"/>
    
  </entry>
  
  <entry>
    <title>启发式合并</title>
    <link href="https://dyd-true.github.io/2021/12/05/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    <id>https://dyd-true.github.io/2021/12/05/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</id>
    <published>2021-12-05T06:27:53.000Z</published>
    <updated>2021-12-05T08:48:44.563Z</updated>
    
    <content type="html"><![CDATA[<p> 聪明的合并</p><span id="more"></span><h1 id="启发式合并"><a href="#启发式合并" class="headerlink" title="启发式合并"></a>启发式合并</h1><p>其实我们很早就接触过启发式合并了，比如并查集的<strong>按秩合并</strong>就是一种启发式合并（<del>虽然基本没用过</del>），但还是单独提一提</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在解决问题时，我们常常要用到“合并”操作，而该操作是<strong>可以</strong>满足<strong>交换律</strong>的（即可以把 $a$ 合并到 $b$ 里面，也可以把 $b$ 合并到 $a$ 里面），这个时候我们可以通过一些额外的信息（如安秩合并中的秩）来决定合并的顺序，从而降低时间复杂度</p><h2 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h2><p><a href="https://www.luogu.com.cn/problem/P3201">[HNOI2009] 梦幻布丁</a></p><p>对于每种颜色，用一个集合维护其下标，每次操作就是<strong>合并两个集合</strong>，合并完后颜色的段数是<strong>不会增加</strong>的，考虑如何维护段数，设合并颜色 $a$ 和颜色 $b$ ，枚举颜色 $a$ 的所有下标，若它左右的颜色中有  $x(0 \le x \le 2)$ 个颜色是 $b$ ，就让段数减 $x$ </p><p>不难发现暴力合并时间复杂度为 $O(mn)$ ，无法接受，考虑启发式合并，每次让小的集合合并到大的集合中</p><p>要用启发式合并，我们首先要解决一个问题：合并操作是满足交换律的吗？当然没有那么简单，由于操作是“把颜色 $a$ 变成颜色 $b$ ”，交换就成了“把颜色 $b$ 变成颜色 $a$ ”，当然不行</p><p>但是可以通过转化让其满足交换律吗？考虑用链表存储集合，那么只需要将表头映射一下，交换一下颜色即可，总的时间复杂度期望为 $O(n \log n)$ （<del>然而可以被hack，但可以过题</del>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, A = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> h[A], idx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[N];</span><br><span class="line"><span class="keyword">int</span> c[N], si[A], p[A];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == y)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (si[x] &gt; si[y])</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], z; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">z = e[i].ver;</span><br><span class="line">ans -= (c[z + <span class="number">1</span>] == y) + (c[z - <span class="number">1</span>] == y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], z; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">c[e[i].ver] = y;</span><br><span class="line"><span class="keyword">if</span> (e[i].ne == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">e[i].ne = h[y], h[y] = h[x];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">si[y] += si[x];</span><br><span class="line">h[x] = <span class="number">-1</span>, si[x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>, p[i] = i;</span><br><span class="line">idx = ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]);</span><br><span class="line"><span class="keyword">if</span> (c[i] != c[i - <span class="number">1</span>])</span><br><span class="line">++ans;</span><br><span class="line"><span class="built_in">add</span>(c[i], i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> op, x, y;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">merge</span>(p[x], p[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h2><p><a href="https://www.luogu.com.cn/problem/CF600E">Lomsat gelral</a></p><p>其实是一道树上并查集，类似树链剖分找出重儿子，暴力计算每一棵子树，但最后再计算重儿子，这样可以把重儿子的信息保留下来，下一次用的时候就不必再算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> c[N], cnt[N], mx;</span><br><span class="line">LL ans[N], sum;</span><br><span class="line"><span class="keyword">int</span> si[N], h_son[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">si[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (y == fa)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(y, x);</span><br><span class="line">si[x] += si[y];</span><br><span class="line"><span class="keyword">if</span> (si[y] &gt; si[h_son[x]])</span><br><span class="line">h_son[x] = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> dt, <span class="keyword">int</span> pass)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> _c = c[x];</span><br><span class="line">cnt[_c] += dt;</span><br><span class="line"><span class="keyword">if</span> (cnt[_c] &gt; mx)</span><br><span class="line">mx = cnt[_c], sum = _c;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cnt[_c] == mx)</span><br><span class="line">sum += _c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (y == fa || y == pass)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">update</span>(y, x, dt, pass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (y == fa || y == h_son[x])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(y, x, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (h_son[x])</span><br><span class="line"><span class="built_in">dfs</span>(h_son[x], x, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">update</span>(x, fa, <span class="number">1</span>, h_son[x]);</span><br><span class="line">ans[x] = sum;</span><br><span class="line"><span class="keyword">if</span> (!op)</span><br><span class="line"><span class="built_in">update</span>(x, fa, <span class="number">-1</span>, <span class="number">0</span>), mx = sum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line"><span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 聪明的合并&lt;/p&gt;</summary>
    
    
    
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="并查集" scheme="https://dyd-true.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    <category term="启发式合并" scheme="https://dyd-true.github.io/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>点分治</title>
    <link href="https://dyd-true.github.io/2021/12/05/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    <id>https://dyd-true.github.io/2021/12/05/%E7%82%B9%E5%88%86%E6%B2%BB/</id>
    <published>2021-12-05T00:17:35.000Z</published>
    <updated>2021-12-06T09:21:05.671Z</updated>
    
    <content type="html"><![CDATA[<p> 连分治也变得难了起来……</p><span id="more"></span><h1 id="点分治"><a href="#点分治" class="headerlink" title="点分治"></a>点分治</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>点分治是<strong>树上分治</strong>的种常用方法，主要思想是每次在树上选一个点，将整棵树的问题划分为两类（如图）：三角形的子树内问题和过了点跨子树的问题</p><p><img src="https://s2.loli.net/2021/12/05/mJCZwSPnvaE3W4K.png" alt="点和子树"></p><p>然后每个子树也这样划分，这个点每次取<strong>重心</strong>，可以保证最多划分 $\log n$ 层</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p><a href="https://www.acwing.com/problem/content/254/">树</a></p><p>题意非常简单：求树上距离不超过 $k$ 的点对数量，点分治的思路也非常简单，每次选重心（记选的节点为 $c$ ），分三类：</p><ol><li>对于两个点都在同一子树内部的情况，递归处理</li><li>对于有一个点恰好是 $c$ 的情况，直接dfs求</li><li>对于跨子树的情况，可以先求出每棵子树内每个点到 $c$ 的距离，然后对于所有距离，记录任选两个距离和小于等于 $k$ 的情况，再删掉同一棵子树内两个点距离和小于等于 $k$ 的情况即可，而求解“一个集合内任取两个数和小于等于 $k$ 的方案数”可以用排序后双指针来解决（也可以排序后二分，麻烦点）</li></ol><p>考虑时间复杂度，最多有 $\log n$ 层，每层 $n$ 个点都要排序，一共是 $O(n \log^2 n)$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver, w;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="keyword">bool</span> del[N];</span><br><span class="line"><span class="keyword">int</span> p[N], q[N], cp, cq;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y, z&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_si</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line">res += <span class="built_in">get_si</span>(e[i].ver, x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_wc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> si, <span class="keyword">int</span> &amp;wc)</span> <span class="comment">// 求重心(其实是一个保证删去后子树大小小于n/2的点,不一定是重心)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">1</span>, mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y, t; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (y == fa)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">t = <span class="built_in">get_wc</span>(y, x, si, wc);</span><br><span class="line">mx = <span class="built_in">max</span>(mx, t);</span><br><span class="line">sum += t;</span><br><span class="line">&#125;</span><br><span class="line">mx = <span class="built_in">max</span>(mx, si - sum);</span><br><span class="line"><span class="keyword">if</span> (mx &lt;= si / <span class="number">2</span>)</span><br><span class="line">wc = x;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">q[++cq] = dis;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line"><span class="built_in">get_dis</span>(e[i].ver, x, dis + e[i].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> c)</span> <span class="comment">//计算集合a中有多少对相加不大于k</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + c);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = c, j = <span class="number">0</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (j + <span class="number">1</span> &lt; i &amp;&amp; a[j + <span class="number">1</span>] + a[i] &lt;= k)</span><br><span class="line">++j;</span><br><span class="line">j = <span class="built_in">min</span>(j, i - <span class="number">1</span>);</span><br><span class="line">res += j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_wc</span>(x, <span class="number">-1</span>, <span class="built_in">get_si</span>(x, <span class="number">-1</span>), x);</span><br><span class="line">del[x] = <span class="literal">true</span>;</span><br><span class="line">cp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line">cq = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_dis</span>(y, <span class="number">-1</span>, e[i].w);</span><br><span class="line">res -= <span class="built_in">work</span>(q, cq);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cq; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (q[j] &lt;= k)</span><br><span class="line">++res;</span><br><span class="line">p[++cp] = q[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res += <span class="built_in">work</span>(p, cp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">res += <span class="built_in">calc</span>(e[i].ver);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k), n || k)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>, del[i] = <span class="literal">false</span>;;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line"><span class="built_in">add</span>(u + <span class="number">1</span>, v + <span class="number">1</span>, w), <span class="built_in">add</span>(v + <span class="number">1</span>, u + <span class="number">1</span>, w); <span class="comment">//输入的下标是从0开始的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">calc</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://www.acwing.com/problem/content/266/">权值</a></p><p>类似于模板，看注释吧，时间复杂度 $O(n \log n)$ ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, S = <span class="number">1e6</span> + <span class="number">5</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, ans = INF;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver, w;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> dis, num;</span><br><span class="line">&#125; p[N], q[N];</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="keyword">bool</span> del[N];</span><br><span class="line"><span class="keyword">int</span> cp, cq;</span><br><span class="line"><span class="keyword">int</span> b[S]; <span class="comment">//开一个桶记录到重心距离为i的点的最小边数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y, z&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_si</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line">res += <span class="built_in">get_si</span>(e[i].ver, x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_wc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> si, <span class="keyword">int</span> &amp;wc)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">1</span>, mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y, t; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (y == fa)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">t = <span class="built_in">get_wc</span>(y, x, si, wc);</span><br><span class="line">mx = <span class="built_in">max</span>(mx, t);</span><br><span class="line">sum += t;</span><br><span class="line">&#125;</span><br><span class="line">mx = <span class="built_in">max</span>(mx, si - sum);</span><br><span class="line"><span class="keyword">if</span> (mx &lt;= si / <span class="number">2</span>)</span><br><span class="line">wc = x;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> dis, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x] || dis &gt; k)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">q[++cq] = (Node)&#123;dis, num&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line"><span class="built_in">get_dis</span>(e[i].ver, x, dis + e[i].w, num + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">get_wc</span>(x, <span class="number">-1</span>, <span class="built_in">get_si</span>(x, <span class="number">-1</span>), x);</span><br><span class="line">del[x] = <span class="literal">true</span>;</span><br><span class="line">cp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line">cq = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_dis</span>(y, x, e[i].w, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cq; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (q[j].dis == k)</span><br><span class="line">ans = <span class="built_in">min</span>(ans, q[j].num);</span><br><span class="line">ans = <span class="built_in">min</span>(ans, b[k - q[j].dis] + q[j].num);</span><br><span class="line">p[++cp] = q[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cq; ++j)</span><br><span class="line">b[q[j].dis] = <span class="built_in">min</span>(b[q[j].dis], q[j].num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cp; ++j) <span class="comment">//将桶清空</span></span><br><span class="line">b[p[j].dis] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="built_in">calc</span>(e[i].ver);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++i)</span><br><span class="line">    b[i] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line"><span class="built_in">add</span>(u + <span class="number">1</span>, v + <span class="number">1</span>, w), <span class="built_in">add</span>(v + <span class="number">1</span>, u + <span class="number">1</span>, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">calc</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ans == INF)</span><br><span class="line">ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P3806">【模板】点分治1</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>, K = <span class="number">1e7</span> + <span class="number">5</span>, M = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver, w;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="keyword">bool</span> del[N];</span><br><span class="line"><span class="keyword">int</span> p[N], q[N], o[N], cp, cq, co;</span><br><span class="line">list&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="keyword">int</span> _Q[M];</span><br><span class="line"><span class="keyword">bool</span> b[K], ans[K];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y, z&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_si</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line">res += <span class="built_in">get_si</span>(e[i].ver, x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_wc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> si, <span class="keyword">int</span> &amp;wc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">1</span>, mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y, t; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (y == fa)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">t = <span class="built_in">get_wc</span>(y, x, si, wc);</span><br><span class="line">mx = <span class="built_in">max</span>(mx, t);</span><br><span class="line">sum += t;</span><br><span class="line">&#125;</span><br><span class="line">mx = <span class="built_in">max</span>(mx, si - sum);</span><br><span class="line"><span class="keyword">if</span> (mx &lt;= si / <span class="number">2</span>)</span><br><span class="line">wc = x;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x] || dis &gt; K)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">q[++cq] = dis;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line"><span class="built_in">get_dis</span>(e[i].ver, x, dis + e[i].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">get_wc</span>(x, <span class="number">-1</span>, <span class="built_in">get_si</span>(x, <span class="number">-1</span>), x);</span><br><span class="line">del[x] = <span class="literal">true</span>;</span><br><span class="line">cp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line">cq = co = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_dis</span>(y, <span class="number">-1</span>, e[i].w);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cq; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r : Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (q[j] == r)</span><br><span class="line">ans[r] = <span class="literal">true</span>, o[++co] = r;</span><br><span class="line"><span class="keyword">if</span> (r &gt;= q[j] &amp;&amp; b[r - q[j]])</span><br><span class="line">ans[r] = <span class="literal">true</span>, o[++co] = r;</span><br><span class="line">&#125;</span><br><span class="line">p[++cp] = q[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cq; ++j)</span><br><span class="line">b[q[j]] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= co; ++j)</span><br><span class="line">Q.<span class="built_in">remove</span>(o[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cp; ++j)</span><br><span class="line">b[p[j]] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="built_in">calc</span>(e[i].ver);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line"><span class="built_in">add</span>(u, v, w), <span class="built_in">add</span>(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_Q[i]);</span><br><span class="line">Q.<span class="built_in">push_back</span>(_Q[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">calc</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line"><span class="keyword">if</span> (ans[_Q[i]])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AYE\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NAY\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态点分治（点分树）"><a href="#动态点分治（点分树）" class="headerlink" title="动态点分治（点分树）"></a>动态点分治（点分树）</h2><p>还是先看模板题<a href="https://www.luogu.com.cn/problem/P3241">[HNOI2015]开店</a></p><p>既然叫点分树了，当然是要建一棵树，而这棵树要保证<strong>每一棵子树的根节点就是该子树的重心</strong></p><p>建好树后，考虑如何解决询问，不难发现，一个节点 $u$ 最多属于 $\log n$ 棵子树，不妨设当前子树根节点为 $r$ ：</p><ol><li>若  $r \ne u$ ，考虑形如 $u \rightarrow r \rightarrow v$  的路径有多少个，计入答案，然后进入  $u$ 所在子树递归</li><li>若 $u = r$ ，遍历当前子树所有点，计入答案，然后停止递归</li></ol><p>由于每个点的度不大于3，直接在每个重心上开三个vector，记录每个子树的所有年龄和它到重心的距离，排好序后前缀和+二分即可，总的空间复杂度为 $O(n \log n)$ 时间复杂度为 $O(m \log^2 n)$ ， $m$ 是询问的数量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VS vector<span class="meta-string">&lt;Son&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1.5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, A;</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver, w;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Father</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, id;</span><br><span class="line">LL dis;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Son</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">LL dis;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Son &amp;t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> age &lt; t.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Father&gt; f[N];</span><br><span class="line">VS s[N][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">bool</span> del[N];</span><br><span class="line"><span class="keyword">int</span> age[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y, z&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_si</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line">res += <span class="built_in">get_si</span>(e[i].ver, x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_wc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> si, <span class="keyword">int</span> &amp;wc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">1</span>, mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], t; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (e[i].ver == fa)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">t = <span class="built_in">get_wc</span>(e[i].ver, x, si, wc);</span><br><span class="line">mx = <span class="built_in">max</span>(mx, t);</span><br><span class="line">sum += t;</span><br><span class="line">&#125;</span><br><span class="line">mx = <span class="built_in">max</span>(mx, si - sum);</span><br><span class="line"><span class="keyword">if</span> (mx &lt;= si / <span class="number">2</span>)</span><br><span class="line">wc = x;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, LL dis, <span class="keyword">int</span> wc, <span class="keyword">int</span> k, VS &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">f[x].<span class="built_in">push_back</span>((Father)&#123;wc, k, dis&#125;);</span><br><span class="line">p.<span class="built_in">push_back</span>((Son)&#123;age[x], dis&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], t; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="keyword">if</span> (e[i].ver != fa)</span><br><span class="line"><span class="built_in">get_dis</span>(e[i].ver, x, dis + e[i].w, wc, k, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">get_wc</span>(x, <span class="number">-1</span>, <span class="built_in">get_si</span>(x, <span class="number">-1</span>), x);</span><br><span class="line">del[x] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y, k = <span class="number">0</span>; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (del[y])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">VS &amp;p = s[x][k];</span><br><span class="line">p.<span class="built_in">push_back</span>((Son)&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;), p.<span class="built_in">push_back</span>((Son)&#123;A + <span class="number">1</span>, <span class="number">0</span>&#125;); <span class="comment">//哨兵</span></span><br><span class="line"><span class="built_in">get_dis</span>(y, <span class="number">-1</span>, e[i].w, x, k, p);</span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; p.<span class="built_in">size</span>(); ++i)</span><br><span class="line">p[i].dis += p[i - <span class="number">1</span>].dis;</span><br><span class="line">++k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line"><span class="built_in">calc</span>(e[i].ver);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Father &amp;i : f[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> g = age[i.x];</span><br><span class="line"><span class="keyword">if</span> (g &gt;= l &amp;&amp; g &lt;= r)</span><br><span class="line">res += i.dis;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == i.id)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">VS &amp;p = s[i.x][j];</span><br><span class="line"><span class="keyword">if</span> (p.<span class="built_in">empty</span>())</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="built_in">lower_bound</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), (Son)&#123;l, <span class="number">-1</span>&#125;) - p.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">int</span> b = <span class="built_in">lower_bound</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), (Son)&#123;r + <span class="number">1</span>, <span class="number">-1</span>&#125;) - p.<span class="built_in">begin</span>();</span><br><span class="line">res += i.dis * (b - a) + p[b - <span class="number">1</span>].dis - p[a - <span class="number">1</span>].dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">VS &amp;p = s[x][i];</span><br><span class="line"><span class="keyword">if</span> (p.<span class="built_in">empty</span>())</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="built_in">lower_bound</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), (Son)&#123;l, <span class="number">-1</span>&#125;) - p.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">int</span> b = <span class="built_in">lower_bound</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), (Son)&#123;r + <span class="number">1</span>, <span class="number">-1</span>&#125;) - p.<span class="built_in">begin</span>();</span><br><span class="line">res += p[b - <span class="number">1</span>].dis - p[a - <span class="number">1</span>].dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;A);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line"><span class="built_in">add</span>(u, v, w), <span class="built_in">add</span>(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">calc</span>(<span class="number">1</span>);</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> u, a, b, l, r;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;a, &amp;b);</span><br><span class="line">l = (a + ans) % A, r = (b + ans) % A;</span><br><span class="line"><span class="keyword">if</span> (l &gt; r)</span><br><span class="line"><span class="built_in">swap</span>(l, r);</span><br><span class="line">ans = <span class="built_in">ask</span>(u, l, r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 连分治也变得难了起来……&lt;/p&gt;</summary>
    
    
    
    
    <category term="分治" scheme="https://dyd-true.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="dfs" scheme="https://dyd-true.github.io/tags/dfs/"/>
    
    <category term="点分治" scheme="https://dyd-true.github.io/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
    <category term="点分树" scheme="https://dyd-true.github.io/tags/%E7%82%B9%E5%88%86%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>kmp和hash（讲）</title>
    <link href="https://dyd-true.github.io/2021/12/03/kmp%E5%92%8Chash%EF%BC%88%E8%AE%B2%EF%BC%89/"/>
    <id>https://dyd-true.github.io/2021/12/03/kmp%E5%92%8Chash%EF%BC%88%E8%AE%B2%EF%BC%89/</id>
    <published>2021-12-03T03:22:20.000Z</published>
    <updated>2021-12-03T04:05:33.024Z</updated>
    
    <content type="html"><![CDATA[<p>​    water</p><span id="more"></span><p>临时准备一下，有点水，就只是当一个提纲用，主要听我讲吧</p><h2 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h2><ul><li><p><a href="https://baike.baidu.com/item/Hash/390310">hash的定义</a>（只要定义即可）</p></li><li><p>char数组存储并使用字符串，尽可能不要使用string，<del>但如果实在没办法就用吧</del></p><p>原因：string的值是不可变的，这就导致每次对string的操作都会生成新的string对象，不仅效率低下，而且大量浪费有限的内存空间，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string a = <span class="string">&quot;1&quot;</span>;  <span class="comment">//假设a指向地址0x0001</span></span><br><span class="line">a = <span class="string">&quot;2&quot;</span>; <span class="comment">//重新赋值后a指向地址0x0002,0x0001地址中保存的&quot;1&quot;依旧存在,但已经不再是a所指向的,a已经指向了其它地址</span></span><br></pre></td></tr></table></figure><p>重新赋值并没有改变地址中保存的”1”，而是直接再申请空间，因此string的操作都是改变赋值地址而不是改变值操作，类似的还有string在函数传参时浪费的空间，并且，时间上讲，string比vector和char都慢</p></li><li><p>一定的抽象思维（我会尽力讲的形象一定）</p></li></ul><p>不管如何，看下去吧</p><h2 id="字符串hash"><a href="#字符串hash" class="headerlink" title="字符串hash"></a>字符串hash</h2><ul><li><p>为何使用</p></li><li><p>正确性如何保证</p></li><li><p>具体如何实现（<a href="https://www.luogu.com.cn/problem/P3370">【模板】字符串哈希</a>）</p></li><li><p> $O(n\log n)$ 最长回文串（没有模板题，看代码吧，重点理解p数组的含义）</p></li></ul>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1.1e7</span> + <span class="number">5</span>, H = <span class="number">131</span>;</span><br><span class="line">ULL ha[N], ah[N], p[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function">IL ULL <span class="title">get_ha</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ha[r] - ha[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL ULL <span class="title">get_ah</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ah[l] - ah[r + <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="built_in">min</span>(x - <span class="number">1</span>, n - x), mid, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">get_ha</span>(x, x + mid) == <span class="built_in">get_ah</span>(x - mid, x))</span><br><span class="line">&#123;</span><br><span class="line">res = mid;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="built_in">min</span>(x - <span class="number">1</span>, n - y), mid, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">get_ha</span>(y, y + mid) == <span class="built_in">get_ah</span>(x - mid, x))</span><br><span class="line">&#123;</span><br><span class="line">res = mid;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">ha[i] = ha[i - <span class="number">1</span>] * H + s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">p[i] = p[i - <span class="number">1</span>] * H;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">ah[i] = ah[i + <span class="number">1</span>] * H + s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, <span class="built_in">find</span>(i) * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (s[i] == s[i + <span class="number">1</span>])</span><br><span class="line">ans = <span class="built_in">max</span>(ans, <span class="built_in">find</span>(i, i + <span class="number">1</span>) * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其它应用</li></ul><h2 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a>kmp</h2><ul><li><p>思想：利用已有信息减少枚举</p></li><li><p>实现：ne数组（别取next），重点理解其图形意义和其抽象定义的关系</p><p>对图理解：<img src="https://i.loli.net/2021/12/03/t2A3eYZLdJCqsu6.png" alt="kmp"></p></li><li><p>代码：<a href="https://www.luogu.com.cn/problem/P3375">【模板】KMP字符串匹配</a></p></li><li><p>应用：字符串问题、辅助dp（有点难，不要去掌握）</p></li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>AC自动机（有blog）、Z函数</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    water&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="hash" scheme="https://dyd-true.github.io/tags/hash/"/>
    
    <category term="kmp" scheme="https://dyd-true.github.io/tags/kmp/"/>
    
    <category term="备讲" scheme="https://dyd-true.github.io/tags/%E5%A4%87%E8%AE%B2/"/>
    
  </entry>
  
  <entry>
    <title>luoguP4558 [JSOI2018]机器人</title>
    <link href="https://dyd-true.github.io/2021/12/02/luoguP4558-JSOI2018-%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>https://dyd-true.github.io/2021/12/02/luoguP4558-JSOI2018-%E6%9C%BA%E5%99%A8%E4%BA%BA/</id>
    <published>2021-12-02T11:38:39.000Z</published>
    <updated>2021-12-08T12:56:48.812Z</updated>
    
    <content type="html"><![CDATA[<p> 我以为很好打……</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4558">机器人</a></p><p>一道很难的题，但可以骗点分</p><p>首先第一眼看过去就是dp， $n, m \le 50$ 说明dp并不简单，但看数据范围，反正我是想打分段骗分</p><h2 id="数据1"><a href="#数据1" class="headerlink" title="数据1"></a>数据1</h2><p> $n, m \le 4$ 直接dfs，注意题目求的是<strong>扫地机器人在撞上障碍之前，经过了多少个格子</strong>，换句话说，没撞上障碍，贡献是0</p><p>20分到手</p><h2 id="数据2"><a href="#数据2" class="headerlink" title="数据2"></a>数据2</h2><h3 id="打表"><a href="#打表" class="headerlink" title="打表"></a>打表</h3><p>除了起点外所有格子都是障碍，明显答案就是所有的方案都输入到了扫地机器人里，但 $n, m \le 50$ ，暴力求所有的方案数时间复杂度和数据1是一样的，但是，通过上面的暴力程序打个小表（把dfs能跑出来的全打了）来<strong>找规律</strong>，发现对于 $n, m$ （不妨设 $n \le m$ ），若 $n \mid m$ ，有如下表：</p><table><thead><tr><th align="center">n</th><th align="center">m</th><th align="center">Ans</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">2</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">3</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center">2</td><td align="center">4</td><td align="center">2</td></tr><tr><td align="center">2</td><td align="center">6</td><td align="center">2</td></tr><tr><td align="center">3</td><td align="center">3</td><td align="center">6</td></tr><tr><td align="center">3</td><td align="center">6</td><td align="center">3</td></tr><tr><td align="center">3</td><td align="center">9</td><td align="center">6</td></tr><tr><td align="center">3</td><td align="center">12</td><td align="center">3</td></tr><tr><td align="center">4</td><td align="center">4</td><td align="center">8</td></tr><tr><td align="center">4</td><td align="center">8</td><td align="center">8</td></tr><tr><td align="center">4</td><td align="center">12</td><td align="center">4</td></tr></tbody></table><p>而若 $n \not\mid m$ ，答案为0，找一手规律，信心满满交上去，WA了</p><p> 好吧，看来没有想象的简单，我们发现我们枚举的数都太小了，它们的<strong>合数</strong>只有4，而且4还没枚举完，但这已经提示我们<strong>和gcd或者互质</strong>有关系</p><h3 id="性质1"><a href="#性质1" class="headerlink" title="性质1"></a>性质1</h3><p>再认真看看打出来的表，以及对应的合法方案数</p><p>发现一个性质：对于一个点 $(x, y)$ ，若它走向 $(x + 1, y)$ ，则 $(x, y + 1)$ ，一定是由 $(x - 1, y + 1)$ 走来；同样的，若它走向 $(x, y + 1)$ ，则 $(x + 1, y)$ ，一定是由 $(x + 1, y - 1)$ 走来，正确性显然</p><p>参考下图：</p><p><img src="https://i.loli.net/2021/12/02/ka14GUhuOMKz9Jf.png" alt="对角线"></p><p>若红点向下，则黄点一定是由紫色向下走到（因为红点已经不可能再向右了），绿、蓝、粉点同理，换句话说，红、紫（绿、粉）点的方向一定相同</p><p>再参考样例：</p><p><img src="https://i.loli.net/2021/12/02/oI9YTryJAwOt1G2.png" alt="样例"></p><p>推广到整个图：<strong>一个矩形内任意一条从右上到左下的对角线方向相同</strong>，其中“一条从右上到左下的对角线”是包含了循环的，如图，颜色相同的是“一条对角线”</p><p><img src="https://i.loli.net/2021/12/02/fBTEp2Oxqkjl5uo.png" alt="对角线2"></p><p>这也和我们上面打的表相符合</p><h3 id="性质2"><a href="#性质2" class="headerlink" title="性质2"></a>性质2</h3><p>由于一个点左下和右下的元素属于同一对角线，所以我们下一步无论怎么走都会走到同一个对角线上，则下一步的方向已经确定，推广一下：<strong>机器人的动作自然就是循环的</strong></p><p>循环节很好求，就是看走多少部可以回到原对角线，手玩一下发现是 $gcd(n, m)$ ，这也和打表的猜测相符合</p><p>证明的话（<del>听大佬说是</del>）把这个矩阵复制几份拼在一起，如果循环节不是 $gcd(n, m)$ 那么在两个矩形的交界出会出现副对角线颜色不同的情况，而循环节是 $gcd(n, m)$ 的时候相当于一堆正方形拼在一起自然不会出现问题</p><h3 id="性质3"><a href="#性质3" class="headerlink" title="性质3"></a>性质3</h3><p>设循环节长度为 $d$ ，且其中有 $a$ 步向右， $d - a$ 步向下，则有 $a \perp d$ 且 $a \perp n, (d - a) \perp m$ </p><p>证明：</p><p>若可到节点 $(x, y)$，则有 $1 + ka \equiv x \pmod n$ ，而 $x$ 取遍 $1 \sim n$ ，由裴蜀定理，若 $gcd(a, n) \ne 1$ ，则必有 $x$ 取不到，故 $a \perp n$ </p><p>同理有 $gcd(d - a, m) = 1$ ，又因为 $d = gcd(n, m)$ ，故 $a \perp d$ </p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>有了以上性质，方案数变得可求，考虑枚举 $a$ 即可<br>$$<br>Ans = \sum_{a = 0} ^ {d} [a \perp d] * [a \perp n] * [(d - a) \perp m] * \binom{d}{a}<br>$$<br>期望得分50</p><h2 id="数据3"><a href="#数据3" class="headerlink" title="数据3"></a>数据3</h2><p>现在考虑撞上障碍，明显应该dp，由于 $n, m$ 很小，dp状态几乎可以随便设，反正维数管够，设 $f[i][j][k]$ 表示在 $(i, j)$ 上撞上障碍的路程的最小值为k的方案数</p><p>同数据2，可以枚举 $a$ ，易得，若该次循环从 $(x, y)$ 出发，必然走到 $(x + a, y + b)$ ，所以只要在 $(1, 1)$ 到 $(1 + a, 1 + b)$ 间dp即可</p><p>设格子 $(x, y), (1 \le x \le 1 + a, 1 \le y \le 1 + b)$ 的权值 $w_{x, y}$ 为走到有障碍格子 $(x + ka, y + kb), (k \in \mathbb{N})$ 的最小步数，则方程为<br>$$<br>\begin{align}<br>f[i][j][k] \rightarrow f[i + 1][j][\min (k, w_{i + 1, j})]\\<br>f[i][j][k] \rightarrow f[i][j + 1][\min (k, w_{i, j + 1})]<br>\end{align}<br>$$<br>考虑时间复杂度，求 $w[i][j]$ 需要枚举 $a, i, j, k$ ，$a, i, j \le d$ ，而 $k \le \frac{nm}{d}$ ，总的时间复杂度为 $O(d^2nm) &lt; O(n^4)$ ，而转移 $f$ 时要枚举 $i, j, k$ ，其中 $i \le n, j \le m, k \le nm$ 故为 $O(n^4)$ ，总的时间复杂度为 $O(Tn^4)$ ，大概 $6 \times 10^8$ 的样子，由于有很多条件特判（如 $a$ 的互质），跑不满（实测跑的飞快），加上时限是5s，可以过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span> + <span class="number">5</span>, P = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, d;</span><br><span class="line"><span class="keyword">char</span> s[N][N];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> f[N][N][N * N], w[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> y == <span class="number">0</span> ? x : <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (((a == <span class="number">0</span>) &amp;&amp; (n == <span class="number">1</span>)) || ((b == <span class="number">0</span>) &amp;&amp; (m == <span class="number">1</span>)) || ((<span class="built_in">gcd</span>(a, d) == <span class="number">1</span>) &amp;&amp; (<span class="built_in">gcd</span>(b, d) == <span class="number">1</span>) &amp;&amp; (<span class="built_in">gcd</span>(a, n) == <span class="number">1</span>) &amp;&amp; (<span class="built_in">gcd</span>(b, m) == <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen(&quot;t.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">// freopen(&quot;t.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">d = <span class="built_in">gcd</span>(n, m);</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i] + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span> &amp;&amp; m == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>, b; a &lt;= d; ++a)</span><br><span class="line">&#123;</span><br><span class="line">b = d - a; <span class="comment">//枚举a,b</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">check</span>(a, b))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y, _w; i &lt;= a + <span class="number">1</span>; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b + <span class="number">1</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line">x = i, y = j, _w = (i - <span class="number">1</span>) + (j - <span class="number">1</span>); <span class="comment">//设障碍点为(x, y)</span></span><br><span class="line">w[i][j] = n * m;  <span class="comment">//先将权值赋为极大值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k * d &lt;= n * m; ++k)  <span class="comment">//其实是k&lt;=n*m/d</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s[x][y] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">w[i][j] = <span class="built_in">min</span>(w[i][j], _w);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">x += a, y += b, _w += d;</span><br><span class="line"><span class="keyword">if</span> (x &gt; n)</span><br><span class="line">x -= n;</span><br><span class="line"><span class="keyword">if</span> (y &gt; m)</span><br><span class="line">y -= m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a + <span class="number">1</span>; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b + <span class="number">1</span>; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= n * m; ++k)</span><br><span class="line">f[i][j][k] = <span class="number">0</span>;</span><br><span class="line">f[<span class="number">1</span>][<span class="number">1</span>][w[<span class="number">1</span>][<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a + <span class="number">1</span>; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b + <span class="number">1</span>; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n * m; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> &lt;= a + <span class="number">1</span>)</span><br><span class="line">f[i + <span class="number">1</span>][j][<span class="built_in">min</span>(k, w[i + <span class="number">1</span>][j])] = (f[i + <span class="number">1</span>][j][<span class="built_in">min</span>(k, w[i + <span class="number">1</span>][j])] + f[i][j][k]) % P;</span><br><span class="line"><span class="keyword">if</span> (j + <span class="number">1</span> &lt;= b + <span class="number">1</span>)</span><br><span class="line">f[i][j + <span class="number">1</span>][<span class="built_in">min</span>(k, w[i][j + <span class="number">1</span>])] = (f[i][j + <span class="number">1</span>][<span class="built_in">min</span>(k, w[i][j + <span class="number">1</span>])] + f[i][j][k]) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * m; ++i)</span><br><span class="line">ans = (ans + (LL)f[a + <span class="number">1</span>][b + <span class="number">1</span>][i] * i) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 我以为很好打……&lt;/p&gt;</summary>
    
    
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="骗分" scheme="https://dyd-true.github.io/tags/%E9%AA%97%E5%88%86/"/>
    
    <category term="计数" scheme="https://dyd-true.github.io/tags/%E8%AE%A1%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>luoguP4616 [COCI2017-2018#5] Pictionary</title>
    <link href="https://dyd-true.github.io/2021/11/30/luoguP4616-COCI2017-2018-5-Pictionary/"/>
    <id>https://dyd-true.github.io/2021/11/30/luoguP4616-COCI2017-2018-5-Pictionary/</id>
    <published>2021-11-30T03:35:17.000Z</published>
    <updated>2021-12-08T12:57:27.763Z</updated>
    
    <content type="html"><![CDATA[<p> 不要老往数学上想</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4616">Pictionary</a></p><p>第一反应是 $O(n^2)$ 40分的做法（很显然），直接 $O(n\sqrt{n})$ 把每个数分解，建图连边，再从大到小扫描每个因数，由此处理出所有 $gcd(a, b)$ ，这里是 $O(n^2)$ ，然后暴力枚举 $i : 1 \rightarrow m$  ，并查集维护即可，这里是 $O(n\log n)$ </p><p>但满数据 $n \le 10^5$ 肯定不允许 $n^2$ ，空间时间都挂了</p><p>仔细看，上面的瓶颈主要在求 $gcd(a, b)$ 只要我们要求出所有 $gcd$ ，就一定会有一个 $n^2$ 的时空复杂度，这显然应该<strong>放弃</strong>，那么考虑题目可否不求或者不求出全部的 $gcd$ </p><p>发现题目的问题有一下性质：</p><ol><li>这 $n$ 个数是 $1 \sim n$ 连续的（我以为很有用，然并卵）</li><li>只是询问图的<strong>联通性</strong>，不询问具体的两个数的 $gcd$ </li><li>答案求的是一个<strong>最值</strong></li><li>图建好后，询问<strong>不会再改变图</strong>了</li></ol><p>除开第一个误导我好久的性质，我们来看看其它性质如何使用：</p><p>首先最好用的是性质3，它明显提示我们建一个有权值的图，将询问转化为求权值，具体的，可以建<strong>一棵有边权的树</strong>，权值对应的时间，两个点之间的路径上的最大边权就是答案</p><p>现在主要问题在建图了，再看现性质2，明显我们不必也不能求 $gcd$ 来建图，正难则反，考虑可否枚举倍数，发现在<strong>只关注图的联通性</strong>的情况下，每天连出的边<strong>等效于从第 $m - i + 1$ 号城向它的所有倍数号城连边</strong>，边权就是天数，正确性显然，而这样建图，时间复杂度为 $O(\frac{n}{1} + \frac{n}{2} + … + \frac{n}{n}) = O(n)$ ，但我们要的是<strong>树</strong>，毕竟如果有多条路径就不好处理了，于是用类似最小生成树的思想，取最小的边权（其实就是天数最小）加入树中，用并查集维护联通性，一共是 $O(n \log n)$ </p><p>现在树建好了，性质2、3也都用了，来考虑询问，上面说过，两个点之间的路径上的最大边权就是答案，但每次暴力求权值肯定不行，结合 $n \le 10^5$ 和所求问题，不难想到<strong>树链剖分</strong>，如果是树剖，当然，本题得以解决</p><p>但是考虑性质4，树剖是支持修改和区间操作的，用在本题这静态的图上不免大材小用（<del>主要是调不出来</del>），于是思考，可否用一个预处理后在 $O(\log n)$ 内回答询问</p><p>当然是可以的，考虑树上倍增，用ST表+lca即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, D = <span class="number">25</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver, w;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="keyword">int</span> fa[N];</span><br><span class="line"><span class="keyword">int</span> f[N][D], st[N][D], dep[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y, z&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_f</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">get_f</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m, u, v; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt;= n; j += i)</span><br><span class="line">&#123;</span><br><span class="line">u = <span class="built_in">get_f</span>(i), v = <span class="built_in">get_f</span>(j);</span><br><span class="line"><span class="keyword">if</span> (u != v)</span><br><span class="line">&#123;</span><br><span class="line">fa[u] = v;</span><br><span class="line"><span class="built_in">add</span>(i, j, m - i + <span class="number">1</span>);  <span class="comment">//i枚举的是m-i+1的值,所以这里要变回来</span></span><br><span class="line"><span class="built_in">add</span>(j, i, m - i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">dep[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">st[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">x = q.<span class="built_in">front</span>(), q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="keyword">if</span> (y == f[x][<span class="number">0</span>])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dep[y] = dep[x] + <span class="number">1</span>;</span><br><span class="line">f[y][<span class="number">0</span>] = x;</span><br><span class="line">st[y][<span class="number">0</span>] = e[i].w;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; D; ++i)</span><br><span class="line">&#123;</span><br><span class="line">f[y][i] = f[f[y][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">st[y][i] = <span class="built_in">max</span>(st[y][i - <span class="number">1</span>], st[f[y][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">push</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_ans</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//类似lca</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (dep[y] &lt; dep[x])</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = D - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line"><span class="keyword">if</span> (dep[f[y][i]] &gt;= dep[x])</span><br><span class="line">&#123;</span><br><span class="line">res = <span class="built_in">max</span>(res, st[y][i]);</span><br><span class="line">y = f[y][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x == y)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = D - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line"><span class="keyword">if</span> (f[x][i] != f[y][i])</span><br><span class="line">&#123;</span><br><span class="line">res = <span class="built_in">max</span>(res, <span class="built_in">max</span>(st[y][i], st[x][i]));</span><br><span class="line">y = f[y][i], x = f[x][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(res, <span class="built_in">max</span>(st[x][<span class="number">0</span>], st[y][<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> Q, u, v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;Q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>, fa[i] = i;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; D; ++j)</span><br><span class="line">st[i][j] = INF;</span><br><span class="line"><span class="built_in">build</span>();</span><br><span class="line"><span class="built_in">bfs</span>();</span><br><span class="line"><span class="keyword">while</span> (Q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">get_ans</span>(u, v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 不要老往数学上想&lt;/p&gt;</summary>
    
    
    
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="图论" scheme="https://dyd-true.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="COCI" scheme="https://dyd-true.github.io/tags/COCI/"/>
    
    <category term="并查集" scheme="https://dyd-true.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    <category term="ST表" scheme="https://dyd-true.github.io/tags/ST%E8%A1%A8/"/>
    
    <category term="lca" scheme="https://dyd-true.github.io/tags/lca/"/>
    
    <category term="倍增" scheme="https://dyd-true.github.io/tags/%E5%80%8D%E5%A2%9E/"/>
    
  </entry>
  
  <entry>
    <title>test2021/11/29总结</title>
    <link href="https://dyd-true.github.io/2021/11/29/test2021-11-29%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/11/29/test2021-11-29%E6%80%BB%E7%BB%93/</id>
    <published>2021-11-29T04:01:13.000Z</published>
    <updated>2021-11-29T14:05:11.287Z</updated>
    
    <content type="html"><![CDATA[<p> 暴力狂魔</p><span id="more"></span><h1 id="test2021-11-29总结"><a href="#test2021-11-29总结" class="headerlink" title="test2021/11/29总结"></a>test2021/11/29总结</h1><p>学校测试，考了<strong>2021全国统一省选Day2</strong></p><h2 id="题目、成绩和题解"><a href="#题目、成绩和题解" class="headerlink" title="题目、成绩和题解"></a>题目、成绩和题解</h2><p><a href="./%E7%9C%81%E9%80%892021.A%E5%8D%B7.day2.pdf">题目</a></p><p><a href="./noi2021sx-day2%E6%AF%94%E8%B5%9B%E7%BB%93%E6%9E%9C.pdf">成绩</a></p><p><a href="./NOI2021%E5%85%A8%E5%9B%BD%E7%BB%9F%E4%B8%80%E7%9C%81%E9%80%89A%E5%8D%B7%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89.docx">题解</a></p><h2 id="早上做题"><a href="#早上做题" class="headerlink" title="早上做题"></a>早上做题</h2><p>一大早考试，看到题就已经做好打三道暴力的准备</p><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>快速瞟了一眼，一看，第一感觉暴力可以拿25（<del>实际也是25分，一分不多艹</del>），后来仔细观察了数据范围，特殊性质有两个，一个是 $m \le 300$  再加上满数据的 $m$ 也比 $n$ 小，像是提示我要打权值线段树的样子；又有一个是链，像是提示我树链剖分</p><p>感觉上从数据范围看是 $O(n\log n)$ 或者常数小的 $O(n\log^2 n)$ ，个人考场上偏向于是树剖（<del>特别打脸</del>），想到树剖不好调（同机房的<strong>l18q</strong>就是死调树剖），决定打个暴力往下看</p><p>暴力思路这里简单说一下（免得我忘了）：大概是倍增法的lca找路径，存下来，然后再扫一遍求答案，时间复杂度 $O(qn)$ </p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>不多说，计算机一算，$13!$ 都炸了，直接放弃想正解，感觉暴力分挺多的，于是打暴力，dfs求排列，倒序扫排名判定是否可行，时间复杂度 $O(n!n)$ ，考场上得了60分，第三个大样例过不了</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>这个才<del>nm</del>离谱，<strong>wfy</strong>大佬会打支配树，刚开考就（在我旁边）说他先做T3，我内心忐忑的来到T3，一看，连暴力都觉得好麻烦，但麻烦也得打啊，就硬着头皮打暴力</p><p>第一遍打了个非多项式时间复杂度的（<del>其实就是玄学，说的那么文雅</del>），连样例三都超时，样例二还WA了，没多想，换思路</p><p>第二边打了个正经暴力，思路是先bfs求出每个点到1的最短路径，存在vector $D[N]$ 里，然后对于 $D[i]$ 中的每一个点，判断删去该点后1和 $i$ 是否联通，不联通则该点是支配点，对于每个加边操作，就加上边然后再判一次（因为 $D[i]$ 只会变小，不会变大），时间复杂度为 $O(qn^3)$ ，因为第二、三个 $n$ 都绝对跑不满，所以其实大概是 $O(qn\xi)$ 的，反正样例三是没TLE了</p><p>然鹅样例二的WA还是不变！我对着大样例极端痛苦的调到考试快结束，大概最后三分钟（其它人好多都交了）的时候才发现：“ 有 $q$ 次 ${\color{red}\colorbox{yellow}{互相独立}}$ 的询问”，所以每次询问完后要恢复原状！我用的链式前向星，不好复原，三分钟改成vector存图，没来得及调就交了，结果爆零</p><h3 id="总分"><a href="#总分" class="headerlink" title="总分"></a>总分</h3><p>25 + 60 + 0，85分，还算正常分数吧（毕竟我太弱了），最高是<strong>wfy</strong>大佬和<strong>龙巨</strong>，看了一下，T3都打出来了30分，不愧是他们，下午打算先把T3的30分改出来</p><h2 id="下午改题"><a href="#下午改题" class="headerlink" title="下午改题"></a>下午改题</h2><h3 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a>T3</h3><p>首先，上午的方法打出来了，不知为何，有几个询问都比答案小1，调了半天没办法，只好<del>看题解</del>，找了个支配树的方法，如下：</p><p>首先，用 $O(n^2)$  建出<strong>支配树</strong>（定义为一棵树，满足点 $u$ 的受支配集 $D_u$ 即为它到根的路径上的所有点组成的集合），建法为先求出 $D[]$ （方法同上午的），然后类似拓扑排序一样，首先把1入队，对于队头 $x$ 删除所以 $D[]$ 中的 $x$ ，若有一个 $i$ 满足 $D[i] = {i}$ 即只剩下自己支配自己，就入队，并连边 $(x, i)$ </p><p>建好支配树后，对于每次添加边 $(u, v)$ ，若一个点 $x$ 的支配集改变，一定是出现了 $1 \rightarrow u \rightarrow v \rightarrow x$ 并且该路径不经过支配树上 $x$ 的某个祖先</p><p>但枚举祖先太麻烦，而且会TLE，我们发现一个性质：若 $x$ 的支配集改变，则支配树上 $x$ 的所有孩子的支配集也会改变，正确性显然</p><p>于是利用该性质，问题转化为：如果存在一条路径 $1 \rightarrow u \rightarrow v \rightarrow x$ 不经过点 $x$ 的<strong>父亲</strong>，那么 $x$ 子树内所有点都会对答案产生贡献（支配集都会发生改变），问贡献和</p><p>我们可以预处理每一个点 $x$ ，把 $x$ 的父亲从原图的反图中删去，$x$ 能到达哪些点，它就可能对这些点产生贡献，对于一组询问 $(u, v)$ ，我们只需要枚举所有可能对 $v$ 产生贡献的点，如果它的父亲不在支配树上的 $1 \rightarrow u$ 这条路径上，它这棵子树就可以产生贡献，时间复杂度 $O(nq)$ </p><p>类似树剖，用dfn化为链，直接差分即可（因为修改一定是在同一子树，不必像树剖一样轻重链划分）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3000</span> + <span class="number">5</span>, Que = <span class="number">2e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[<span class="number">5</span>][N &lt;&lt; <span class="number">3</span>]; <span class="comment">//1-原图,2-反图,3-支配树</span></span><br><span class="line"><span class="keyword">int</span> h[<span class="number">5</span>][N], idx[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"><span class="keyword">int</span> stk[N * N], top;</span><br><span class="line"><span class="keyword">int</span> fa[N], si[N], dfn[N], id;</span><br><span class="line"><span class="keyword">int</span> vs[N], cf[N];  <span class="comment">//vs:第几次询问,cf:差分</span></span><br><span class="line"><span class="keyword">bool</span> del[N], vis[N], can[N][N], ins[N], cc[N][N]; <span class="comment">//cc:能否贡献</span></span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[o][idx[o]] = (Edge)&#123;h[o][x], y&#125;, h[o][x] = idx[o]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">dfs12</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (del[x])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[o][x]; i != <span class="number">-1</span>; i = e[o][i].ne)</span><br><span class="line"><span class="keyword">if</span> (!vis[e[o][i].ver])</span><br><span class="line"><span class="built_in">dfs12</span>(o, e[o][i].ver);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">del[j] = vis[j] = <span class="literal">false</span>;</span><br><span class="line">del[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">dfs12</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span> (!vis[j])</span><br><span class="line">can[j][i] = <span class="literal">true</span>, ++cnt[j];</span><br><span class="line">&#125;</span><br><span class="line">top = <span class="number">1</span>;</span><br><span class="line">stk[top] = <span class="number">1</span>;</span><br><span class="line">ins[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= top; i++)</span><br><span class="line">&#123;</span><br><span class="line">x = stk[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span> (can[j][x])</span><br><span class="line">--cnt[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span> (cnt[j] == <span class="number">1</span> &amp;&amp; !ins[j])</span><br><span class="line">ins[j] = <span class="literal">true</span>, <span class="built_in">add</span>(<span class="number">3</span>, x, j), stk[++top] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">dfs3</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">si[x] = <span class="number">1</span>;</span><br><span class="line">dfn[x] = ++id;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[<span class="number">3</span>][x], y; i != <span class="number">-1</span>; i = e[<span class="number">3</span>][i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[<span class="number">3</span>][i].ver;</span><br><span class="line">fa[y] = x;</span><br><span class="line"><span class="built_in">dfs3</span>(y);</span><br><span class="line">si[x] += si[y];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">prev</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">id = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs3</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">del[j] = vis[j] = <span class="literal">false</span>;</span><br><span class="line">del[fa[i]] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">dfs12</span>(<span class="number">2</span>, i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">cc[i][j] = vis[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, Q, u, v, _u, ans, t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;Q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[<span class="number">1</span>][i] = h[<span class="number">2</span>][i] = h[<span class="number">3</span>][i] = <span class="number">-1</span>;</span><br><span class="line">idx[<span class="number">1</span>] = idx[<span class="number">2</span>] = idx[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>, u, v);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">2</span>, v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>();</span><br><span class="line"><span class="built_in">prev</span>();</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (Q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">_u = u;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">++t;</span><br><span class="line"><span class="keyword">while</span> (_u != <span class="number">1</span>)</span><br><span class="line">vs[_u] = t, _u = fa[_u];</span><br><span class="line">vs[<span class="number">1</span>] = t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i)</span><br><span class="line">cf[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (cc[i][v] &amp;&amp; vs[fa[i]] != t)</span><br><span class="line">++cf[dfn[i]], --cf[dfn[i] + si[i]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cf[i] += cf[i - <span class="number">1</span>], ans += (cf[i] != <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果一下午+晚上只改了一道题，笑死我了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 暴力狂魔&lt;/p&gt;</summary>
    
    
    
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="差分" scheme="https://dyd-true.github.io/tags/%E5%B7%AE%E5%88%86/"/>
    
    <category term="支配树" scheme="https://dyd-true.github.io/tags/%E6%94%AF%E9%85%8D%E6%A0%91/"/>
    
    <category term="dfs" scheme="https://dyd-true.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>线性基</title>
    <link href="https://dyd-true.github.io/2021/11/28/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    <id>https://dyd-true.github.io/2021/11/28/%E7%BA%BF%E6%80%A7%E5%9F%BA/</id>
    <published>2021-11-28T11:04:24.000Z</published>
    <updated>2021-11-28T13:53:59.422Z</updated>
    
    <content type="html"><![CDATA[<p> 一堆无意义的定义</p><span id="more"></span><h1 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h1><p>线性基是竞赛中常用来解决<strong>子集异或</strong>一类题目的算法</p><h2 id="数学相关定义"><a href="#数学相关定义" class="headerlink" title="数学相关定义"></a>数学相关定义</h2><p>一大堆没用的</p><h3 id="向量空间"><a href="#向量空间" class="headerlink" title="向量空间"></a>向量空间</h3><p>向量空间亦称线性空间，具体可见<a href="https://baike.baidu.com/item/%E5%90%91%E9%87%8F%E7%A9%BA%E9%97%B4">百度百科</a>，反正简单来说，就是定义了加法和乘法的向量的集合（其实完全不一样，但我们只需要用到这么多）</p><h3 id="线性相关和线性无关"><a href="#线性相关和线性无关" class="headerlink" title="线性相关和线性无关"></a>线性相关和线性无关</h3><p>若 $V$ 是一个向量空间（集合），如果存在不全为零的系数数列 $c_1, c_2, …, c_n \in \mathbb{F}$ （ $\mathbb{F}$ 是<a href="https://baike.baidu.com/item/%E4%BB%A3%E6%95%B0%E6%95%B0%E5%9F%9F/9551710?fr=aladdin">代数域</a>），使得 $c_1 \vec{v_1} + c_2 \vec{v_2} + … +c_n \vec{v_n} = 0$ （即 $\exists \vec{v_j}$ 可以被除它本身外其它属于 $V$ 的向量表示出来），那么 $V$ 中的向量就叫做<strong>线性相关</strong>的，反之，则为<strong>线性无关</strong>的</p><h3 id="子空间"><a href="#子空间" class="headerlink" title="子空间"></a>子空间</h3><p>设 $W$ 为向量空间 $V$ 的一个非空子集，若 $W$ 在 $V$ 的加法及标量乘法下是封闭的，且零向量 $\vec{0} \in W$ ，就称 $W$ 为 $V$ 的<strong>线性子空间</strong>，简称<strong>子空间</strong></p><h3 id="扩张和生成集合"><a href="#扩张和生成集合" class="headerlink" title="扩张和生成集合"></a>扩张和生成集合</h3><p>给出一个向量集合 $B$ ，那么<strong>包含它</strong>的<strong>最小</strong>子空间 $W$ 就称为它的<strong>扩张</strong>（也叫<strong>张成</strong>），记作 $span(B)$ ，另外规定空集的扩张为 ${\vec{0}}$ </p><p>而 $B$ 也被叫做 $W$ 的<strong>生成集合</strong>（可以理解为通过 $B$ 中的元素可以将 $W$ 中的所有元素表示出来）</p><h3 id="基和维度"><a href="#基和维度" class="headerlink" title="基和维度"></a>基和维度</h3><p>给出一个向量集合 $B$ ，若 $B$ 是<strong>线性无关</strong>的，且 $B$ 能够生成 $V$ ，就称 $B$ 为 $V$ 的一个<strong>基</strong></p><p>对非零向量空间 $V$ ，基是 $V$ 最小的生成集，也是<a href="https://baike.baidu.com/item/%E6%9E%81%E5%A4%A7%E7%BA%BF%E6%80%A7%E6%97%A0%E5%85%B3%E7%BB%84">极大线性无关组</a></p><p>如果一个向量空间 $V$ 拥有一个元素个数<strong>有限</strong>的生成集，那么就称 $V$ 是一个<strong>有限维空间</strong>，向量空间的所有基拥有<strong>相同基数</strong>，称为该空间的<a href="https://baike.baidu.com/item/%E7%BB%B4%E5%BA%A6">维度</a></p><p>空间内的每个向量都有唯一的方法表达成基中向量的<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E7%BB%84%E5%90%88">线性组合</a>，而且，将基中向量进行排列，表示成有序基，每个向量便可以坐标系统来表示</p><h2 id="线性基-1"><a href="#线性基-1" class="headerlink" title="线性基"></a>线性基</h2><p>扯了那么多没有用的，下面才是真的要用的</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>线性基其实就是上面数学定义中，将向量空间的加法和乘法定义为<strong>异或</strong>的意义下的基，具体来说，在异或的定义下：</p><ul><li>用<strong>无符号整数集</strong>来替代<strong>向量的集合</strong></li><li>对于集合 $B$ ，在其中选出任意多个数，其异或和的所有可能的结果组成的集合 $S$ 称作 $B$ 的<strong>扩张</strong>，记为 $span(B)$ </li><li>对于一个集合 $B$ ，若存在一个元素可以用其它若干个元素异或起来得到，则称 $B$ 中元素<strong>线性相关</strong>，反之，则为<strong>线性无关</strong></li><li>对于集合 $B, S$ ，若 $S \subseteq span(B)$ 且 $B$ 线性无关，则称 $B$ 为 $S$ 的<strong>线性基</strong>，集合 $B$ 中元素的个数，称为线性基的<strong>长度</strong></li></ul><p>个人觉得对照这数学中的定义还是比较好理解的</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>若 $B$ 是 $S$ 的线性基，则 $S$ 中的任意元素都可以<strong>唯一</strong>表示为 $B$ 中若干个元素异或起来的结果，正确性显然</p><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p>设 $S$ 中最大的数在二进制下有 $L$ 为，我们用一个下标为 $0 \sim L$ 的数组 $a[]$ 来存储线性基，在接下来的构造中，我们称第 $i$ 位<strong>存在于</strong>线性基中，当且仅当 $a[i] \ne 0$</p><p>首先，线性基是动态构造的，我们只需要从空的，每次考虑在一个已存在的线性基中插入一个数 $t$ 即可</p><p>从 $t$ 最高位上的1开始考虑，设这是第 $j$ 位，如果这一位已经存在于线性基中，则我们需要将 $t$ 中的这一位消掉（将 $t$ 异或上 $a[i]$ ），才可以继续插入（因为要保证 $B$ 线性无关）；如果这一位不存在于线性基中，则可以将  插入到 $a[j]$ 的位置上</p><p>对于具体实现，我们采用逆序枚举 $t$ 所以为1的二进制位 $j$ ，对于每个 $j$ ：</p><ol><li>若 $a[j] \ne 0$ ，则 $t = t \oplus a[j]$ </li><li>若 $a[j] = 0$ ，则 $a[i] = t$ ，结束</li></ol><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>线性基支持一下操作：</p><ul><li><p>求集合的最大异或和：</p><p>只需倒序枚举每一个 $a[i]$ ，贪心异或即可</p></li><li><p>求集合的最小异或和：</p><p>先特判能否为0，然后正序序枚举每一个 $a[i]$ ，第一个存在的就是答案</p></li><li><p>查询 $t$ 是否在值域中</p><p>类似于插入</p></li><li><p>查询第 $k$ 小的值</p><p>先特判减去0，然后从高到低处理线性基每一位，对于每一位向后扫，如果当前数第 $i$ 位为0，且线性基第 $i$ 位不为0，则将当前数异或上 $a[i]$ ，这一操作可以在 $O(L^2)$ 的时间内解决，我们称其为重构<br>经过这一步操作后，设线性基内共有 $cnt$ 个数，则它们共可以表示出 $2^{cnt}$ 个数<br>随后，我们考虑将 $k$ 二进制拆分，用与快速幂类似的方法就可以求出第 $k$ 小值</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>一定要注意long long</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">64</span>; <span class="comment">//这个N一定要开对，大了小了都不行</span></span><br><span class="line">LL a[N], tmp[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">a[i] = tmp[i] = <span class="number">0</span>;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line"><span class="keyword">if</span> ((x &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[i])</span><br><span class="line">&#123;</span><br><span class="line">a[i] = x;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">x ^= a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">get_max</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">res = <span class="built_in">max</span>(res ^ a[i], res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">get_min</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> _c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line"><span class="keyword">if</span> (a[i])</span><br><span class="line">++_c;</span><br><span class="line"><span class="keyword">if</span> (_c &lt; n)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line"><span class="keyword">if</span> (a[i])</span><br><span class="line"><span class="keyword">return</span> a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> ((x &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[i])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">x^=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">()</span> <span class="comment">//重构线性基</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line"><span class="keyword">if</span> ((a[i] &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">a[i] ^= a[j];</span><br><span class="line"><span class="keyword">if</span> (a[i])</span><br><span class="line">tmp[cnt++] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; ++i)</span><br><span class="line">a[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">get_k</span><span class="params">(LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt &lt; n)</span><br><span class="line">--k;</span><br><span class="line">    <span class="keyword">if</span>(!k)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &gt;= (<span class="number">1ll</span> &lt;&lt; cnt))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; ++i)</span><br><span class="line">    <span class="keyword">if</span> ((k &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">    res ^= a[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个用vector实现，比较短的（太香了）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line">vector&lt;LL&gt; b;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (LL i : b)</span><br><span class="line">x = <span class="built_in">min</span>(x ^ i, x);</span><br><span class="line"><span class="keyword">for</span> (LL &amp;i : b)</span><br><span class="line">i = <span class="built_in">min</span>(x ^ i, i);</span><br><span class="line"><span class="keyword">if</span> (x)</span><br><span class="line">b.<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">get_max</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (LL i : b)</span><br><span class="line">res = <span class="built_in">max</span>(res ^ i, res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">get_min</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b.<span class="built_in">size</span>() &lt; n)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> b[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (LL i : b)</span><br><span class="line">x = <span class="built_in">min</span>(x ^ i, x);</span><br><span class="line">    <span class="keyword">return</span> x == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">get_k</span><span class="params">(LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (b.<span class="built_in">size</span>() &lt; n) <span class="comment">//减去为0的情况</span></span><br><span class="line">    --k;</span><br><span class="line">    <span class="keyword">for</span> (LL i : b)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span> (k &amp; <span class="number">1</span>)</span><br><span class="line">    res ^= i;</span><br><span class="line">    k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 一堆无意义的定义&lt;/p&gt;</summary>
    
    
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="线性基" scheme="https://dyd-true.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
  </entry>
  
  <entry>
    <title>斯特林数</title>
    <link href="https://dyd-true.github.io/2021/11/28/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/"/>
    <id>https://dyd-true.github.io/2021/11/28/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/</id>
    <published>2021-11-28T07:40:53.000Z</published>
    <updated>2021-11-28T11:05:01.320Z</updated>
    
    <content type="html"><![CDATA[<p> 还是卡特兰数简单一点……</p><span id="more"></span><h1 id="斯特林数"><a href="#斯特林数" class="headerlink" title="斯特林数"></a>斯特林数</h1><h2 id="第一类斯特林数"><a href="#第一类斯特林数" class="headerlink" title="第一类斯特林数"></a>第一类斯特林数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>第一类斯特林数（Stirling）分为无符号第一类斯特林数 $s_s(n, m)$ 和带符号第一类斯特林数 $s_u(n, m)$ ，有无符号斯特林数分别表现为其升阶函数和降阶函数的各项系数（<del>反正我是没看懂</del>），形式如下：<br>$$<br>\begin{aligned}<br>x^{n\uparrow} = x(x + 1)(x + 2)…(x + n - 1) = \sum_{k = 0}^{n}s_u(n, k)x^k\\<br>x^{n\downarrow} = x(x - 1)(x - 2)…(x - n  + 1) = \sum_{k = 0}^{n}s_s(n, k)x^k\\<br>\end{aligned}<br>$$<br>对于有无符号斯特林数之间的关系有 $s_s(n, m) = (-1)^{n + m}s_u(n, m)$</p><p>组合数学中的第一类斯特林数一般指无符号的第一类斯特林数，以下的“第一类斯特林数”若无特殊说明，也指“无符号的第一类斯特林数”，无符号的第一类斯特林数还有一个组合数学上的定义，为： $n$ 个不同元素构成 $m$ 个圆排列（两个圆排列间没有顺序之分）的方案数，记作 $s(n, m)$ 或 ${n \brack m}$ </p><h3 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h3><p>第一类斯特林数有一个递推式：<br>$$<br>{n \brack m} = {n - 1 \brack m - 1} + (n - 1){n - 1 \brack m}<br>$$<br>证明：</p><p>考虑第一类斯特林数的定义，${n \brack m}$ 表示把 $n$ 个不同元素构成 $m$ 个圆排列的方案数，对于第 $n$ 个数，若它单独成为新的一个圆，则它前面的 $n - 1$ 个数构成了 $m - 1$ 个圆，方案数为 ${n - 1 \brack m - 1}$ ；若它加入到前面构成的圆中，则它前面的 $n - 1$ 个数构成了 $m$ 个圆，方案数为 ${n - 1 \brack m}$ ，而这 $n - 1$ 个数间有 $n - 1$ 空位可以选择，共 $(n - 1){n - 1 \brack m}$  种方案</p><p>两种情况综合，即得递推式</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> s[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">s[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">s[i][j] = (s[i - <span class="number">1</span>][j - <span class="number">1</span>] + (LL)(i - <span class="number">1</span>) * s[i - <span class="number">1</span>][j]) % P;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[n][m]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul><li> ${0 \brack 0} = 1$ </li><li> ${n \brack 0} = 0$ </li><li> ${n \brack n} = 1$ </li></ul><p>以上三条由定义不难得到</p><ul><li><p>  ${n \brack 1} = (n - 1)!$ </p></li><li><p> ${n \brack n - 1} = \binom{n}{2}$ </p></li></ul><p>  证明：</p><p>  依然考虑定义，$n$ 个不同元素构成 $n - 1$ 个圆排列，必然有一个圆排列有两个数，其它圆排列只有一个数，有两个数的圆排列有 $\binom{n}{2}$ 种方案，对应其它都只有一种方案</p><ul><li> $\sum_{k = 0}^{n} {n \brack k} = n!$ </li></ul><p>  证明：</p><p>  令升阶函数中的 $x = 1$ ，即得原式</p><h2 id="第二类斯特林数"><a href="#第二类斯特林数" class="headerlink" title="第二类斯特林数"></a>第二类斯特林数</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>第二类斯特林数实际上是集合的一个拆分，表示将 $n$ 个不同的元素划分成 $m$ 个集合（两个集合间没有顺序之分）的方案数，记为 $S(n, m)$ 或 ${n \brace m}$ ，和第一类斯特林数不同的是，集合内是不考虑次序的，而圆排列是有序的</p><h3 id="求法-1"><a href="#求法-1" class="headerlink" title="求法"></a>求法</h3><p>递推式：<br>$$<br>{n \brace m} = {n - 1 \brace m - 1} + m {n - 1 \brace m}<br>$$<br>还是考虑定义，将 $n$ 个不同的元素划分成 $m$ 个集合，对于第 $n$ 个数，可以单独为一个集合，则前面 $n - 1$ 个数构成 $m - 1$ 个集合，方案数为 ${n - 1 \brace m - 1}$ ；也可以加入到原有集合中，则前面 $n - 1$ 个数构成 $m$ 个集合，方案数为 ${n - 1 \brace m}$ ，而第 $n$ 个数在 $m$ 个集合中选一个加入，方案数为 $m$ </p><p>两种情况综合，即得递推式</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> S[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">S[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">S[i][j] = (S[i - <span class="number">1</span>][j - <span class="number">1</span>] + (LL)j * S[i - <span class="number">1</span>][j]) % P;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, S[n][m]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算式：<br>$$<br>{n \brace m} = \frac{1}{m!} \sum_{k = 0}^{m} (-1)^k \binom{m}{k} (m - k)^n<br>$$<br>证明见<a href="https://baike.baidu.com/item/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0">百度百科</a></p><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h3><ul><li> ${n \brace 0} = 0^n$ </li><li> ${n \brace 1} = 1$ </li><li> ${n \brace n} = 1$ </li><li> ${n \brace 2} = 2^{n - 1} - 1$ </li><li> ${n \brace n - 1} = \binom{n}{2}$ </li><li> $\sum_{k = 0}^{n} {n \brace k} = B_n$ ，其中 $B_n$ 是<a href="https://baike.baidu.com/item/%E5%80%8D%E5%B0%94%E6%95%B0/369479?fromtitle=%E8%B4%9D%E5%B0%94%E6%95%B0&fromid=9227873">贝尔数</a>  </li></ul><h2 id="两类斯特林数的关系"><a href="#两类斯特林数的关系" class="headerlink" title="两类斯特林数的关系"></a>两类斯特林数的关系</h2><p>其实就一个：<br>$$<br>\sum_{k = 0}^{n} {n \brace k}{k \brack m} = \sum_{k = 0}^{n} {n \brack k}{k \brace m}<br>$$</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://www.luogu.com.cn/problem/P4609">建筑师</a></p><p>以高度为 $n$ 的建筑为分界线，左边选择 $A - 1$ 个建筑让他们可以被看见，右边 $B - 1$ 个，如图：</p><p><img src="https://i.loli.net/2021/11/28/lhKaJEux2kpqHmW.jpg" alt="AB"></p><p>问题转化为将 $1 \sim n - 1$ 划分为 $A + B - 2$ 部分（即红框里的），对于每一个部分，将其中元素排成一个圆排列，放置时保证最高的在最左边（如果是放在 $n$ 右边，则最高的在最右边），故有 ${n \brack m}$ 种方案</p><p>然后将这些部分划分给  $n$ 两边，有 $\binom{A + B - 2}{A - 1}$ 种方案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e4</span> + <span class="number">5</span>, P = <span class="number">1e9</span> + <span class="number">7</span>, M = <span class="number">200</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> s[N][M], C[M][M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pred</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; M; ++j)</span><br><span class="line">s[i][j] = (s[i - <span class="number">1</span>][j - <span class="number">1</span>] + (LL)(i - <span class="number">1</span>) * s[i - <span class="number">1</span>][j]) % P;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j)</span><br><span class="line"><span class="keyword">if</span> (!j)</span><br><span class="line">C[i][j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">C[i][j] = (C[i - <span class="number">1</span>][j] + C[i - <span class="number">1</span>][j - <span class="number">1</span>]) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">pred</span>();</span><br><span class="line"><span class="keyword">int</span> T, n, a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (LL)s[n - <span class="number">1</span>][a + b - <span class="number">2</span>] * C[a + b - <span class="number">2</span>][a - <span class="number">1</span>] % P);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 还是卡特兰数简单一点……&lt;/p&gt;</summary>
    
    
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Stirling数,斯特林数" scheme="https://dyd-true.github.io/tags/Stirling%E6%95%B0-%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/"/>
    
    <category term="排列组合" scheme="https://dyd-true.github.io/tags/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>luoguP4429 [BJOI2018]染色</title>
    <link href="https://dyd-true.github.io/2021/11/28/luoguP4429-BJOI2018-%E6%9F%93%E8%89%B2/"/>
    <id>https://dyd-true.github.io/2021/11/28/luoguP4429-BJOI2018-%E6%9F%93%E8%89%B2/</id>
    <published>2021-11-28T02:02:51.000Z</published>
    <updated>2021-12-08T12:56:23.587Z</updated>
    
    <content type="html"><![CDATA[<p> 结论题，靠手玩</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4429">染色</a></p><p>拿到题就先被吓了一跳，然后又看了看数据范围，毫无提示性</p><p>先盲猜一手考的二分图，也就是每个点的颜色集合都相同，然后……<del>理所当然的</del> 错了，但还是给了我们一点希望，因为我们发现明显，存在奇环就是No</p><p>那就还有不存在环和存在偶环两种情况</p><p>不存在环，即 $m &lt; n$ ，考虑节点 $u$ 染为颜色 $A$ ，那么与它相连的节点 $v$ 最多只是有一个颜色不能染，此外便再无其它限制，明显是有染色方案的，故为Yes</p><p>再考虑偶环的情况，若只有一个偶环，即 $n = m$ ，我们将其断开，记断开处两个节点为根节点和尾节点，从根节点开始用无环的方法染色，设根节的颜色集合为 ${A, B}$ ，分三种情况：</p><ol><li>若尾节点的颜色集合为 ${C, D}$ ，则染色成立</li><li>若尾节点的颜色集合为 ${A, C}$ ，只要根节点染为颜色 $B$ 即可</li><li>若尾节点的颜色集合为 ${A, B}$ ，设根节点染为颜色 $A$ 如果要让尾节点也必须染颜色 $A$ 则与尾节点相连的另一个点必须染为颜色 $B$ ，以此类推，每个节点的颜色都是“必须染成颜色 $X$ ”，设于根节点相连的另一个点的颜色是必须染成颜色 $E$ （这个 $E$ 可以等于于任何颜色，包括 $A, B$ ），由于这个“必须”，该节点的颜色集合一定是 ${A, E}$ （这样才能用“根节点染成颜色 $A$ ”推出“该节点染成颜色 $E$ ”），那么只要将根节点染成颜色 $B$ ，该节点染成颜色 $E$ ，由于刚才的一系列“必须”，尾节点只能保持颜色 $A$ 不变，染色成立</li></ol><p>综上，若只有一个偶环，必定可以染色，故为Yes</p><p>那有多个偶环，即 $m &gt; n$ ，怎么办？</p><p>先考虑两个偶环没有公共边，看看下图：</p><p><img src="https://i.loli.net/2021/11/28/41UTVmnNBcKjADr.png" alt="偶环"></p><p>不难发现在这种构造下，最下方的点只能选颜色 $X$ </p><p>于是有下图：</p><p><img src="https://i.loli.net/2021/11/28/OhjP4dcNZMFwrt8.png" alt="卡"></p><p>明显为No</p><p>推广一下，考虑把节点 ${C, D}$ 拆成多个节点相连，换句话说，用多个节点连成的链作为广义的“交叉节点”，我们 <del>玄学的</del> 得出了结论：如果存在两个没有公共边但联通的环，那么答案是No，构造方法类似上图，可以证明（<del>我也不知道咋证</del>）这种情况的充分条件为 $m &gt; n + 1$ </p><p>最后只剩一种情况： $m = n + 1$ 且为偶环</p><p>这种情况下，要么有一个点度数为4，要么有两个点度数为3，度数为四的情况就和上图一样，明显为No</p><p>考虑两个度数为3的点，它们之间必定有3条路径，设路径长度（经过的边数）分别为 $(x, y, z)$ ，<del>手玩一下</del> 发现只有 $(2, 2, 2k), k\in \mathbb{N_+}$ 的情况为Yes</p><hr><p>最后总结一下：</p><ol><li> $m &lt; n$ 为Yes</li><li> $m = n$ 且无奇环为Yes，否则为No</li><li> $m = n + 1$ 且无奇环，若有两个度为3的节点且两点间路径为 $(2, 2, 2k), k\in \mathbb{N_+}$ 则为Yes，否则为No；若有奇环为No</li><li> $m &gt; n + 1$ 为No</li></ol><p>注意以上结论均是在保证图联通的情况下得出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VIT vector<span class="meta-string">&lt;int&gt;</span>::iterator</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, e, v;</span><br><span class="line"><span class="keyword">int</span> c[N], du[N];</span><br><span class="line"><span class="keyword">bool</span> f; <span class="comment">//true-No,false-Yes</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; to[N], cir;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">to[i].<span class="built_in">clear</span>(), c[i] = <span class="number">0</span>;</span><br><span class="line">f = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> _c)</span> <span class="comment">//染色法判奇环</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (f)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span> (c[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[x] != _c)</span><br><span class="line">f = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">c[x] = _c;</span><br><span class="line">++v;</span><br><span class="line">e += to[x].<span class="built_in">size</span>();</span><br><span class="line">cir.<span class="built_in">push_back</span>(x);</span><br><span class="line"><span class="keyword">for</span> (VIT i = to[x].<span class="built_in">begin</span>(); i != to[x].<span class="built_in">end</span>(); ++i)</span><br><span class="line"><span class="built_in">dfs</span>(*i, <span class="number">3</span> - _c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topu</span><span class="params">()</span> <span class="comment">//拓扑处理非环节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span> (VIT i = cir.<span class="built_in">begin</span>(); i != cir.<span class="built_in">end</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">du[*i] = to[*i].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (du[*i] == <span class="number">1</span>)</span><br><span class="line">q.<span class="built_in">push</span>(*i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">x = q.<span class="built_in">front</span>(), q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (VIT i = to[x].<span class="built_in">begin</span>(); i != to[x].<span class="built_in">end</span>(); ++i)</span><br><span class="line"><span class="keyword">if</span>(--du[*i] == <span class="number">1</span>)</span><br><span class="line">q.<span class="built_in">push</span>(*i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T, t, tt;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">to[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">to[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (!c[i])</span><br><span class="line">&#123;</span><br><span class="line">e = v = <span class="number">0</span>;</span><br><span class="line">cir.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">dfs</span>(i, <span class="number">1</span>);</span><br><span class="line">e /= <span class="number">2</span>; <span class="comment">//存的是双向边,真正的边数要除以2</span></span><br><span class="line"><span class="keyword">if</span> (e &gt; v + <span class="number">1</span>)</span><br><span class="line">f = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (f)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (e &lt;= v)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">topu</span>();</span><br><span class="line">tt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (VIT j = cir.<span class="built_in">begin</span>(); j != cir.<span class="built_in">end</span>(); ++j)</span><br><span class="line"><span class="keyword">if</span> (du[*j] == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (VIT k = to[*j].<span class="built_in">begin</span>(); k != to[*j].<span class="built_in">end</span>(); ++k)</span><br><span class="line"><span class="keyword">if</span> (du[*k] == <span class="number">3</span>)</span><br><span class="line">++t;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">2</span>)</span><br><span class="line">++tt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tt &lt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">f = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (f)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 结论题，靠手玩&lt;/p&gt;</summary>
    
    
    
    
    <category term="图论" scheme="https://dyd-true.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="结论" scheme="https://dyd-true.github.io/tags/%E7%BB%93%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>luoguP2723 [USACO3.1]丑数 Humble Numbers</title>
    <link href="https://dyd-true.github.io/2021/11/28/luoguP2723-USACO3-1-%E4%B8%91%E6%95%B0-Humble-Numbers/"/>
    <id>https://dyd-true.github.io/2021/11/28/luoguP2723-USACO3-1-%E4%B8%91%E6%95%B0-Humble-Numbers/</id>
    <published>2021-11-28T00:47:16.000Z</published>
    <updated>2021-12-08T12:54:41.232Z</updated>
    
    <content type="html"><![CDATA[<p> 时间复杂度的计算是个技术活</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P2723">丑数</a></p><p>第一次想到的是用一个小根堆，每次取出最小值，乘其它数的积插入堆中，最后取出的第 $n$ 个就是答案，然鹅，时间（ $O(n^2\log n)$ ）和空间（ $O(n^2)$ ）上都不允许（ $n \le 10^5$ 太艹了）</p><p>然后发现其实真正有用的跟新只有 $f[i] * a[i]$ 的形式，其中 $f[i]$ 表示第 $i$ 个丑数， $a[i]$ 表示质数，由于 $k$ 很小，用平衡树维护貌似可做？（<del>黄题啊，平衡树个寂寞啊</del>）</p><p>最后实在 <del>不想打平衡树</del> 想不出来，一看题解：艹，暴力求第 $n$ 个就好了，加个记录的优化，时间复杂度 $O(nk \xi)$ ，其中 $\xi$ 代表玄学因子（因为没人知道那层while会跑多少），空间复杂度 $O(n)$ </p><p>无语，这个故事告诉我们不要一看见 $10^5$ 就想 $n\log n$  </p><p>似乎要long long</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, K = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL INF = (LL)<span class="number">1e18</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> k, n;</span><br><span class="line">LL f[N];</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;k, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + k);</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">//有只有一个质因数的情况,所以从1开始</span></span><br><span class="line">LL mn;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">mn = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里是一个优化(不加会TLE),用b记录每个质数对应的最小的f[i]</span></span><br><span class="line"><span class="comment">下一次的i只会更大而不会更小</span></span><br><span class="line"><span class="comment">当然,也可以写二分查找f[i],时间复杂度更稳定一点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span> (f[b[j]] * a[j] &lt;= f[i - <span class="number">1</span>])</span><br><span class="line">++b[j];</span><br><span class="line">mn = <span class="built_in">min</span>(f[b[j]] * a[j], mn);</span><br><span class="line">&#125;</span><br><span class="line">f[i] = mn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, f[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 时间复杂度的计算是个技术活&lt;/p&gt;</summary>
    
    
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="USACO" scheme="https://dyd-true.github.io/tags/USACO/"/>
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="枚举" scheme="https://dyd-true.github.io/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>luoguP2991 [USACO10OPEN]Water Slides G</title>
    <link href="https://dyd-true.github.io/2021/11/26/luoguP2991-USACO10OPEN-Water-Slides-G/"/>
    <id>https://dyd-true.github.io/2021/11/26/luoguP2991-USACO10OPEN-Water-Slides-G/</id>
    <published>2021-11-26T14:23:15.000Z</published>
    <updated>2021-12-08T12:57:41.041Z</updated>
    
    <content type="html"><![CDATA[<p> 题目描述过于“清晰”</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P2991">Water Slides G</a></p><p>最开始理解错了，以为是一个搜索，大概是预处理出每个点到终点的最长路，然后bfs，每个状态由位置、失误次数、权值和组成，不会TLE</p><p>但其实题目要求中失误是走“最坏的”，而不失误是走“最好的”；我理解的失误是走“除最好的以外的节点”（<del>太nm离谱了</del>）</p><p>再看原题，发现只有两种选择（最好的和最坏的），在暴搜的基础上加一个记忆化，令 $f[i][j]$ 表示从 $i$ 走到 $n$ 失误 $j$ 条边的情况下最大权值和，明显有 $f[n][0] = 0$ ， $Ans = f[1][k]$ ，由于是在一个DAG上，在搜索时转移，方程为<br>$$<br>f[u][j] =<br>\begin{cases}<br>    \min(f[v][j - 1] + w_{u,v})\\<br>    \max(f[v][j] + w_{u,v})<br>\end{cases}<br>$$<br>最后，记得开long long</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e4</span> + <span class="number">5</span>, M = <span class="number">1.5e5</span> + <span class="number">5</span>, K = <span class="number">10</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line">LL f[N][K];</span><br><span class="line"><span class="keyword">bool</span> vis[N][K];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ne, ver;</span><br><span class="line">LL w;</span><br><span class="line">&#125; e[M];</span><br><span class="line"><span class="keyword">int</span> h[N], idx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, LL z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = (Edge)&#123;h[x], y, z&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[x][j])</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="built_in">dp</span>(y, j);</span><br><span class="line">f[x][j] = <span class="built_in">max</span>(f[y][j] + e[i].w, f[x][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">&#123;</span><br><span class="line">y = e[i].ver;</span><br><span class="line"><span class="built_in">dp</span>(y, j - <span class="number">1</span>);</span><br><span class="line">f[x][j] = <span class="built_in">min</span>(f[y][j - <span class="number">1</span>] + e[i].w, f[x][j]);</span><br><span class="line">&#125;</span><br><span class="line">vis[x][j] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">h[i] = <span class="number">-1</span>;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line">LL w;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line"><span class="built_in">add</span>(u, v, w);</span><br><span class="line">&#125;</span><br><span class="line">f[n][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">vis[n][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">dp</span>(<span class="number">1</span>, k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, f[<span class="number">1</span>][k]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 题目描述过于“清晰”&lt;/p&gt;</summary>
    
    
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="USACO" scheme="https://dyd-true.github.io/tags/USACO/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="记忆化" scheme="https://dyd-true.github.io/tags/%E8%AE%B0%E5%BF%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>luoguP5091 【模板】扩展欧拉定理</title>
    <link href="https://dyd-true.github.io/2021/11/26/luoguP5091-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%89%A9%E5%B1%95%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/"/>
    <id>https://dyd-true.github.io/2021/11/26/luoguP5091-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%89%A9%E5%B1%95%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/</id>
    <published>2021-11-26T03:56:02.000Z</published>
    <updated>2021-12-08T12:58:55.939Z</updated>
    
    <content type="html"><![CDATA[<p> 我太弱了</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P5091">【模板】扩展欧拉定理</a></p><p>本来以为可以秒杀的（<del>毕竟是板子</del>），但遗忘的比我想象的严重，主要是当 $b &lt; \varphi(m)$ 时，不能让 $b = (b \mod \varphi(m)) + \varphi(m)$ 这个特判改了 ${\color{red} \text{三次}}$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20000000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a, m, phi, p;</span><br><span class="line"><span class="keyword">char</span> b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">res = (LL)res * x % p;</span><br><span class="line">x = (LL)x * x % p;</span><br><span class="line">y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%s&quot;</span>, &amp;a, &amp;m, b + <span class="number">1</span>);</span><br><span class="line">phi = p = m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j; i &lt;= m; ++i)</span><br><span class="line"><span class="keyword">if</span> (m % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">phi = (LL)phi * (i - <span class="number">1</span>) / i;</span><br><span class="line"><span class="keyword">while</span> (m % i == <span class="number">0</span>)</span><br><span class="line">m /= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(b + <span class="number">1</span>), bb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">8</span>) <span class="comment">//特判</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">bb = bb * <span class="number">10</span> + b[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (bb &gt;= phi)</span><br><span class="line">bb = bb % phi + phi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">bb = (bb * <span class="number">10</span> + b[i] - <span class="string">&#x27;0&#x27;</span>) % phi;</span><br><span class="line">bb += phi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">qpow</span>(a, bb));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 我太弱了&lt;/p&gt;</summary>
    
    
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="模板" scheme="https://dyd-true.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
    <category term="扩展欧拉定理" scheme="https://dyd-true.github.io/tags/%E6%89%A9%E5%B1%95%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>生成函数</title>
    <link href="https://dyd-true.github.io/2021/11/24/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    <id>https://dyd-true.github.io/2021/11/24/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/</id>
    <published>2021-11-24T09:05:49.000Z</published>
    <updated>2021-11-24T09:27:28.910Z</updated>
    
    <content type="html"><![CDATA[<p>too difficult for me</p><span id="more"></span><h1 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>任给我们一个序列 ${ a_i } ( i \in [ 0, n ] )$ ，可以定义一个函数 $g(x) = a_0 + a_1x + a_2x^2 + … + a_nx^n$ （一般为了使函数可以收敛，定义 $x \in ( -1, 1 )$ ），则称 $g(x)$ 为序列 ${ a_i }$ 的生成函数</p><p>我们将序列转化为函数的原因是为了用函数的知识（一般是数学知识，数学不好的慎用）使问题变的简单</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://www.acwing.com/problem/content/3135/">食物</a></p><p>本题是一个常用的转换，即将乘法原理转化为多项式的乘法，具体如下：</p><p>先将每一种食物当作一个子问题，如，对于食物1 ，定义序列 ${ a_i }$  为只选食物1能够选出 $i$ 个食物的方案数，由于食物以只能选偶数个，故 ${ a_i } = { 1,0,1,0,1…}$ ，定义其生成函数为 $f_1(x) = 1 + x^2 + x^4 + x^6 + … (x \in (-1, 1))$ 由等比数列求和公式有 $f_1(x) = \frac{1 - x^n}{1 - x^2}$ ，又因为 $n \rightarrow \infty$ ，所以 $x^n \rightarrow 0$ ，则 $f_1(x) = \frac{1}{1 - x^2}$ </p><p>同理，有：<br>$$<br>\begin{align}<br>f_2(x) &amp;= 1 + x = \frac{1 - x^2}{1 - x}\\<br>f_3(x) &amp;= 1 + x + x^2 = \frac{1 - x^3}{1 - x}\\<br>f_4(x) &amp;= x + x^3 + x^5 + … = \frac{x}{1 - x^2}\\<br>f_6(x) &amp;= 1 + x^4 + x^8 + … = \frac{1}{1 - x^4}\\<br>f_6(x) &amp;= 1 + x + x^2 + x^3 = \frac{1 - x^4}{1 - x}\\<br>f_7(x) &amp;= 1 + x = \frac{1 - x^2}{1 - x}\\<br>f_8(x) &amp;= 1 + x^3 + x^6 + x^9 = \frac{1}{1 - x^3}\\<br>\end{align}<br>$$<br> 设 $Ans(x) = \prod_{i = 1}^{8} f_i(x)$ ，则答案即为 $Ans(x)$ 展开后 $x^n$ 项的系数，证明可以考虑乘法原理，每一个多项式 $f_i(x)$ 中选一项 $ai_jx^j$ ，代表用第 $i$ 种食物凑成 $j$ 个的方案数有 $ai<br><em>j$ 种，乘起来方案共有 $\prod</em>{i = 1}^{8} ai_j$ 种，这些方案共献到 $x^{\sum j}$ 中，最后 $x^n$ 的系数就是最终方案数，正确性显然</p><p>现在考虑如何求系数<br>$$<br>\begin{align}<br>Ans &amp;= \prod_{i = 1}^{8} f_i(x)\\<br>    &amp;= \frac{1 - x^2}{1 - x} \frac{1 - x^3}{1 - x} \frac{x}{1 - x^2} \frac{1}{1 - x^4} \frac{1 - x^4}{1 - x} \frac{1 - x^2}{1 - x} \frac{1}{1 - x^3}\\<br>    &amp;= \frac{x}{(1 - x)^4}\\<br>    &amp;= x (1 - x)^{-4}\\<br>\text{又由} &amp;\text{牛顿广义二项式定理（广义二项式定理）：}\\<br>(x + y)^\alpha &amp;= \sum_{k = 0}^{\infty} \binom{\alpha}{k} x^{\alpha - k} y^k , \text{其中} \binom{\alpha}{k} = \frac{\alpha (\alpha - 1) (\alpha - 2) … (\alpha - k + 1)}{k!} , (\alpha \in \mathbb{R})\\<br>\text{有：} &amp; \\<br>(1 - x)^{-4} &amp;= \sum_{k = 0}^{\infty} \binom{-4}{k} 1^{-4 - k} (-x)^{k}\\<br>\text{又因} &amp;\binom{-k}{n} * (-x)^n = [(-1)^n * \binom{n+k-1}{n}] * [(-1)^n * x^n] = \binom{n+k-1}{n} x^n\\<br>\text{故} &amp; (1 - x)^4 \text{展开后} x^n \text系数为 \binom{n+k-1}{n}\\<br>\text{所以}\\<br>Ans &amp;= x (1 - x)^{-4}\\<br>    &amp;= x (\sum_{n = 0}^{\infty} \binom{n + 4 - 1}{4 - 1} x^n)\\<br>    &amp;= \sum_{n = 0}^{\infty} \binom{n + 4 - 1}{4 - 1} x^{n + 1}\\<br>\end{align}<br>$$</p><p>由上， $x^n$ 项的系数为 $\binom{n + 2}{3} = \frac{(n + 2)(n + 1)n}{6}$ ，问题得以解决</p><p> 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500</span>, P = <span class="number">10007</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, l = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l; ++i)</span><br><span class="line">n = (n * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>) % P;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (LL)n * (n + <span class="number">1</span>) * (n + <span class="number">2</span>) / <span class="number">6</span> % P); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;too difficult for me&lt;/p&gt;</summary>
    
    
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="生成函数" scheme="https://dyd-true.github.io/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>斜率优化dp</title>
    <link href="https://dyd-true.github.io/2021/11/22/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96dp/"/>
    <id>https://dyd-true.github.io/2021/11/22/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96dp/</id>
    <published>2021-11-22T08:42:46.000Z</published>
    <updated>2021-11-24T09:25:44.091Z</updated>
    
    <content type="html"><![CDATA[<p>然而我dp废的一比</p><span id="more"></span><p>用例题开讲：<br><a href="https://www.luogu.com.cn/problem/P2365">P2365 任务安排</a><br>明显<del>看题解</del>可知，dp方程为：<br> $f_i=min(f_j+sumt_i*(sumc_i-sumc_j)+s*(sumc_n-sunc_j),f_i)$<br> 故标程如下：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//P2365</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> t, c;</span><br><span class="line">&#125; sum[N];</span><br><span class="line"><span class="keyword">int</span> n, s;</span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;t, &amp;c);</span><br><span class="line">        sum[i].t = sum[i - <span class="number">1</span>].t + t;</span><br><span class="line">        sum[i].c = sum[i - <span class="number">1</span>].c + c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">            f[i] = <span class="built_in">min</span>(f[i], f[j] + sum[i].t * (sum[i].c - sum[j].c) + s * (sum[n].c - sum[j].c));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，康康这个——<a href="https://www.luogu.com.cn/problem/P5785">P5785 SDOI2012任务安排</a><br>令人惋惜的是，在数据加强后， $O(n^2)$ 的时间复杂度似乎确凿过不了，为此，我们<del>看题解后</del>想到救星——</p><h2 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h2><p>我们先假设所有的 $t$ 都大于0。<br>我们来康康转移方程：<br>$f_i=min(f_j+sumt_i*(sumc_i-sumc_j)+s*(sumc_n-sunc_j),f_i)$<br>不妨去掉 $min$ 看成：<br>$f_i=f_j+sumt_i*(sumc_i-sumc_j)+s*(sumc_n-sunc_j)$<br>它等价于：<br>$f_i=f_j-(sumt_i+s) * sumc_j+sumt_i* sumc_i+s* sumc_n$<br>设 $f_j=y,sumc_j=x$ （这是所有的关于 $j$ 的变量），然后化为直线表达式 $y=kx+b$ 的形式：<br>$f_j=(sumt_i+s)* sumc_j+f_i-sumt_i* sumc_i-s* umc_n$<br>不难发现 ：</p><ol><li><p>$k=sumt_i+s$ ，故 $0&lt;k&lt;\infty$ 。</p></li><li><p>且 $0 \le j \le i-1,j \in Z$  </p></li><li><p>而直线上的点为：$(f_0,sumc_0)$ 、 $(f_1,sumc_1)$ 、 … 、 $(f_{i-1},sunc_{i-1})$ </p></li><li><p>我们的目标是让 $f_i$ 最小  </p></li></ol><p>我们带着目标，看看图像：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/u8nbza21.png" alt="xoy"><br>对于一个已知的 $i$ ， $k=sumt_i+s$ 是固定的，而若点 $(x_0,y_0)$在 $y=kx+b$ 上，那么截距 $b$ 是可以算出来的，又因 $b=f_i-sumt_i* sumc_i-s* umc_n$ ，故 $b$ 最小时 $f_i$ 最小。<br>那么，我们康康下图：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/14w4y6tp.png" alt="xoy2"><br>图中绿色的点是所有可能的 $(x_0,y_0)$ ,红色的线是 $y=kx+b$ （只有 $k$ 确定，所以在从下往上平移）。<br>不难发现，凸包（绿线）内部的点对于 $b$ 的最小值毫无意义。换句话说，<strong>最小值的点只会在凸包上</strong>。<br>那么在凸包上哪一点呢？<br>还是上图，令构成凸包的三条直线斜率为 $k_1,k_2,k_3$ ，由凸包性质可得 $k_1&lt;k_2&lt;k_3$ 。再看看上图中我们要找的那个点（不妨设它为点 $A$ ）， $A$ 所在的两条直线斜率为 $k_2,k_3$ ,且 $k_2&lt;k&lt;k_3$ 也就是说，<strong>对于一个给定斜率为的直线 $y=kx+b$ 让它的截距 $b$ 取得最小值的点就是凸包上第一个斜率大于 $k$ 的线段的下端点</strong>。<br>由此，我们想到在单调队列中维护第一个大于某个数的点。<br>我们又发现，因为 $t$ 大于0，所以：<br>斜率是单调递增的，且新加的点的横坐标也单调递增。<br>所以：<br>在查询的时候，可以将队头小于当前斜率的点全删除掉。<br>在插入的时候，可以将队尾所有不在凸包上的点全删除掉。<br>我们便得到以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll t, c;</span><br><span class="line">&#125; sum[N];</span><br><span class="line">ll n, s;</span><br><span class="line">ll f[N];</span><br><span class="line">ll q[N], hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//除法会损失精度，故改成乘法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_slopeh</span><span class="params">(ll x, ll y, ll o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (f[y] - sum[y].c * s - f[x] + sum[x].c * s) &lt;= sum[o].t * (sum[y].c - sum[x].c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_slopet</span><span class="params">(ll x, ll y, ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (f[y] - sum[y].c - f[x] + sum[x].c) * (sum[b].c - sum[a].c) &gt;= (f[b] - sum[b].c - f[a] + sum[a].c) * (sum[y].c - sum[x].c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll t, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;t, &amp;c);</span><br><span class="line">        sum[i].t = sum[i - <span class="number">1</span>].t + t;</span><br><span class="line">        sum[i].c = sum[i - <span class="number">1</span>].c + c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x7f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    q[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (hh &lt; tt &amp;&amp; <span class="built_in">check_slopeh</span>(q[hh], q[hh + <span class="number">1</span>], i))</span><br><span class="line">            hh++;</span><br><span class="line">        ll j = q[hh];</span><br><span class="line">        f[i] = f[j] + sum[i].t * (sum[i].c - sum[j].c) + s * (sum[n].c - sum[j].c);</span><br><span class="line">        <span class="keyword">while</span> (hh &lt; tt &amp;&amp; <span class="built_in">check_slopet</span>(q[tt - <span class="number">1</span>], q[tt], q[tt], i))</span><br><span class="line">            tt--;</span><br><span class="line">        q[++tt] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是——60分！哦可恶！题目中的 $t$ 可以为负数，咋办？</p><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><p>我们来看看 $t$ 可以为负数的情况：</p><ol><li><p>$k=sumt_i+s$ ，但 $sumt_i$ 可能小于0，故 $ -\infty &lt;k&lt; \infty$ 。</p></li><li><p>$0 \le j \le i-1,j \in Z$  </p></li><li><p>而直线上的点为：$(f_0,sumc_0)$ 、 $(f_1,sumc_1)$ 、 … 、 $(f_{i-1},sunc_{i-1})$ </p></li><li><p>我们的目标是让 $f_i$ 最小 </p></li></ol><p>其实只有 $k$ 的范围变了， $k$ 可以小于0了，所以：<br>斜率不再具有单调性，但新加的点的横坐标仍然单调递增。<br>所以：<br>在查询的时候，只能用二分来查找了。<br>但在插入的时候，仍可以将队尾所有不在凸包上的点全删除掉。<br>终于，正解如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//P5785</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll t, c;</span><br><span class="line">&#125; sum[N];</span><br><span class="line">ll n, s;</span><br><span class="line">ll f[N];</span><br><span class="line">ll q[N], hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//除法会损失精度，故改成乘法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_slopeh</span><span class="params">(ll x, ll y, ll o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (f[y] - sum[y].c * s - f[x] + sum[x].c * s) &lt;= sum[o].t * (sum[y].c - sum[x].c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_slopet</span><span class="params">(ll x, ll y, ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (f[y] - sum[y].c - f[x] + sum[x].c) * (sum[b].c - sum[a].c) &gt;= (f[b] - sum[b].c - f[a] + sum[a].c) * (sum[y].c - sum[x].c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">work</span><span class="params">(ll o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll l = hh, r = tt;</span><br><span class="line">    <span class="keyword">int</span> ans = l;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        ll mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">check_slopeh</span>(q[mid], q[mid + <span class="number">1</span>], o))</span><br><span class="line">            r = mid - <span class="number">1</span>, ans = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q[ans];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll t, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;t, &amp;c);</span><br><span class="line">        sum[i].t = sum[i - <span class="number">1</span>].t + t;</span><br><span class="line">        sum[i].c = sum[i - <span class="number">1</span>].c + c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x7f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    q[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll j = <span class="built_in">work</span>(i);</span><br><span class="line">        f[i] = f[j] + sum[i].t * (sum[i].c - sum[j].c) + s * (sum[n].c - sum[j].c);</span><br><span class="line">        <span class="keyword">while</span> (hh &lt; tt &amp;&amp; <span class="built_in">check_slopet</span>(q[tt - <span class="number">1</span>], q[tt], q[tt], i))</span><br><span class="line">            tt--;</span><br><span class="line">        q[++tt] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;然而我dp废的一比&lt;/p&gt;</summary>
    
    
    
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="斜率优化" scheme="https://dyd-true.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
