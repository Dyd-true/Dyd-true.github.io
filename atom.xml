<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dyd&#39;s Blog</title>
  
  <subtitle>He who has a strong enough why can bear almost any how.</subtitle>
  <link href="https://dyd-true.github.io/atom.xml" rel="self"/>
  
  <link href="https://dyd-true.github.io/"/>
  <updated>2022-01-09T08:41:24.187Z</updated>
  <id>https://dyd-true.github.io/</id>
  
  <author>
    <name>Dyd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三/四元环计数</title>
    <link href="https://dyd-true.github.io/2022/01/09/%E4%B8%89-%E5%9B%9B%E5%85%83%E7%8E%AF%E8%AE%A1%E6%95%B0/"/>
    <id>https://dyd-true.github.io/2022/01/09/%E4%B8%89-%E5%9B%9B%E5%85%83%E7%8E%AF%E8%AE%A1%E6%95%B0/</id>
    <published>2022-01-09T06:57:45.000Z</published>
    <updated>2022-01-09T08:41:24.187Z</updated>
    
    <content type="html"><![CDATA[<p> 还是比较简单的</p><span id="more"></span><h1 id="三-四元环计数"><a href="#三-四元环计数" class="headerlink" title="三/四元环计数"></a>三/四元环计数</h1><h2 id="三元环计数"><a href="#三元环计数" class="headerlink" title="三元环计数"></a>三元环计数</h2><p>思考如下问题：</p><p>给定一个<strong>无向图</strong>，求图中有多少个环是<strong>由且仅由三个点构成的</strong>，这样的环被称为<strong>三元环</strong></p><p>暴力的办法当然是枚举每一个点 $u$ ，再枚举和它相连的点 $v$ ，再枚举和 $v$ 相连的点 $w$ ，判断 $w$ 是否和 $u$ 相连</p><p>但这样会有一个巨大的问题：一个环被算了多遍，必须想办法让一个环只被考虑一遍</p><p>考虑将边变为有向边，具体的，对于边 $(u, v), u &lt; v$ ：</p><ol><li>若 $\deg(u) = \deg(v)$ 则令 $v \to u$ </li><li>否则，让度数大的指向度数小的</li></ol><p>下面证明这样做后原图会变成一个<strong>DAG</strong>：</p><p>使用反证法，假设有一个环为 $a \to b \to … \to a$ ，则有 $\deg(a) \ge \deg(b) \ge … \ge \deg(a)$ ，明显应该 $\deg(a) = \deg(b)$ ，换句话说，这个环上的所有边都是第 $1$ 类情况，那么就有 $a &gt; b &gt; … &gt; a$ 这显然不成立</p><p>在上面的DAG中，一个三圆环显然会变成这样：<img src="https://s2.loli.net/2022/01/09/efZA16ptMNFakVw.png" alt="三元环"></p><p>此时再枚举，这个环就只会被记在红点上了</p><p>关于时间，首先我们要枚举每个点和它的出边，时间为 $O(n + m)$ ，然后，要枚举出边指向的点的出边</p><p>如此，对于第二次枚举，讨论这个点（就是红色点的出边指向的那个点）的出度：</p><ol><li>如果出度 $\le \sqrt{m}$ ，那么最多有 $n - 1$ 个点会指向它，由它会枚举的点数为就是出度，所以总的时间为 $O(n \sqrt{m})$ </li><li>如果出度 $&gt; \sqrt{m}$ ，那么指向它的边最多有 $\frac{m}{\sqrt{m}} = \sqrt{m}$ ，虽然它的出度最坏是 $m$ ，但总的时间为 $O(m\sqrt{m})$ </li></ol><p>注意在上面的讨论中，第一次枚举和第二次枚举是站在两个不同的角度计算的时间，在计算第二次枚举的时间时，第一次枚举的时间对它并没有影响，故总的时间为 $O(n + m + (n \sqrt{m} 或 m \sqrt{m})) = O(m \sqrt{m})$ </p><p>同时也可以得到，三元环的个数上界是 $m \sqrt{m}$ </p><p>代码如下 ：</p><p><a href="https://www.luogu.com.cn/problem/P1989">板子</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, M = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[M];</span><br><span class="line"><span class="keyword">int</span> h[N], idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = &#123;h[x], y&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find3c</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">            vis[e[i].ver] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = h[e[i].ver]; j != <span class="number">-1</span>; j = e[j].ne)</span><br><span class="line">                res += vis[e[j].ver];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">            vis[e[i].ver] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    STC PII _e[M];</span><br><span class="line">    STC <span class="keyword">int</span> deg[N];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        h[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;_e[i].fi, &amp;_e[i].se);</span><br><span class="line">        <span class="keyword">if</span> (_e[i].fi &lt; _e[i].se)</span><br><span class="line">            <span class="built_in">swap</span>(_e[i].fi, _e[i].se);</span><br><span class="line">        ++deg[_e[i].fi], ++deg[_e[i].se];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_e[i].fi == _e[i].se)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (deg[_e[i].fi] &gt;= deg[_e[i].se])</span><br><span class="line">            <span class="built_in">add</span>(_e[i].fi, _e[i].se);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">add</span>(_e[i].se, _e[i].fi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">find3c</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四元环计数"><a href="#四元环计数" class="headerlink" title="四元环计数"></a>四元环计数</h2><p>简单的思路是将四元环分成两个形如 $u \to v \to w$ 的形式，枚举 $u$ ，然后像三元环化为DAG，一样枚举 $v, w$ ，对于 $u, w$ 记 <code>cnt[u][w]</code> 表示从 $u$ 通过一个其它点到达 $w$ 的路径数，然后对答案的贡献即为 <code>cnt[u][w] * (cnt[u][w] - 1) / 2</code> </p><p>这样当然是错误的，因为三元环是无序的，有唯一性（即三个点最多存在一个三元环，且在DAG中这个三元环的形式确定），但四元环就不是了，如图：<img src="https://s2.loli.net/2022/01/09/hNO64LyPJT1aqfK.png" alt="四元环"></p><p>同一个四元环在DAG中可能有两种表示（ $2 + 2$ 或者 $3 + 1$ ）</p><p>那如何才能不重不漏呢？考虑三元环建边时的不等式：如果存在 $u \to v$ ，则 $\deg(u) \ge \deg(v)$ ，那么，在上面两幅图中，我们发现，<strong>度数最大的是同一个点</strong>，这启发了我们</p><p><strong>我们将每个点按度数大小重新编号，度数相同原来编号大的点在前</strong>的方法，就可以通过编号直接得到任意两个点的关系</p><p>设重新编号后排名为 $rk$ ，枚举四圆环中 $rk$ 最大的点 $x$ ，再枚举 $x$ 的出点 $y$ ，枚举  $y$ 的出点 $z$ （这里直接枚举无向边，注意判断 $rk(x) &gt; rk(y) &gt; rk(z)$ ）， 这里就得到了一个长度为 $2$ 的链了，再枚举一个点 $c$ ，只要 $rk(x) &gt; rk(c)$ 就计入答案的贡献，不管 $rk(c)$ 和 $rk(z)$ 的关系</p><p>时间复杂度还是 $O(m \sqrt{m})$ </p><p>注意四元环的个数上界是 $nm\sqrt{m}$ ，可能要 <code>long long</code> </p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, M = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> h[N], idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> id[N], deg[N], rk[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = &#123;h[x], y&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">find4c</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">            <span class="keyword">if</span> (rk[x] &gt; rk[e[i].ver])</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = h[e[i].ver]; j != <span class="number">-1</span>; j = e[j].ne)</span><br><span class="line">                    <span class="keyword">if</span> (rk[x] &gt; rk[e[j].ver])</span><br><span class="line">                        res += cnt[e[j].ver]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">            <span class="keyword">if</span> (rk[x] &gt; rk[e[i].ver])</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = h[e[i].ver]; j != <span class="number">-1</span>; j = e[j].ne)</span><br><span class="line">                    cnt[e[i].ver] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> deg[x] == deg[y] ? x &lt; y : deg[x] &lt; deg[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        h[i] = <span class="number">-1</span>, id[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        ++deg[u], ++deg[v];</span><br><span class="line">        <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(id + <span class="number">1</span>, id + <span class="number">1</span> + n, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        rk[id[i]] = i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">find4c</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>以后在写，现在鸽了</p><h2 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h2><p>啊啊啊，马上就要考期末考试了，这估计是我考前最后一次写blog了，老天保佑我别考爆炸啊！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 还是比较简单的&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="图论" scheme="https://dyd-true.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>luoguP3765 总统选举</title>
    <link href="https://dyd-true.github.io/2022/01/08/luoguP3765-%E6%80%BB%E7%BB%9F%E9%80%89%E4%B8%BE/"/>
    <id>https://dyd-true.github.io/2022/01/08/luoguP3765-%E6%80%BB%E7%BB%9F%E9%80%89%E4%B8%BE/</id>
    <published>2022-01-08T11:50:26.000Z</published>
    <updated>2022-01-09T00:15:48.514Z</updated>
    
    <content type="html"><![CDATA[<p> 心血来潮想写SBT了</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P3765">总统选举</a></p><p>想写平衡树了，所以看了道题</p><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>首先有一个小小的前置知识：<strong>摩尔投票法</strong></p><p>摩尔投票法用来寻找数组中<strong>出现次数超过一半的元素</strong></p><p>思想很简单，考虑每次取两个不同的数，把他们都删掉，如果有一个数出现次数超过一半的话，最后剩下的数一定都是这个数，正确性显然</p><p>具体实现可以考虑维护一个 <code>cnt</code> 和 <code>t</code> ，扫描每一个元素，若 <code>cnt = 0</code> ，则令 <code>t = x</code> ，否则 <code>cnt += (t == x ? 1 : -1)</code> ， 最后如果 <code>cnt</code> 大于 $0$ ， <code>t</code> 即是出现次数超过一半的元素</p><p>但这里有一个条件，那就是<strong>必须保证出现次数超过一半的元素存在</strong>，否则 <code>t</code>  当然就不是所求，所以我们还需要判断一下 <code>t</code> 的出现次数是否超过一半</p><h2 id="题"><a href="#题" class="headerlink" title="题"></a>题</h2><p>那么考虑这道题</p><p>由摩尔投票法，对于每个区间我们只需要维护出 <code>cnt</code> 和 <code>t</code> </p><p>考虑道维护的东西可以合并，即对于 $fa = [l, r], lc = [l, mid], rc = [mid + 1, r]$ ，有：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (v[lc] == v[rc])</span><br><span class="line">&#123;</span><br><span class="line">    v[fa] = v[lc];</span><br><span class="line">    cnt[fa] = cnt[lc] + cnt[rc];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cnt[lc] &gt;= cnt[rc])</span><br><span class="line">&#123;</span><br><span class="line">    cnt[fa] = cnt[lc] - cnt[rc];</span><br><span class="line">    v[fa] = v[lc];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    cnt[fa] = cnt[rc] - cnt[lc];</span><br><span class="line">    v[fa] = v[rc];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确性显然</p><p>所以可以考虑用线段树维护 <code>cnt</code> 和 <code>t</code> （就是上面的 <code>v</code> ）</p><p>但是！问题来了：摩尔投票法有一个讨厌的前提——<strong>必须保证出现次数超过一半的元素存在</strong>，所以我们还要检验这个数是否真的是出现次数超过一半的数</p><p>考虑平衡树，对于每一个候选人，建一棵平衡树，维护支持他的人的下标，直接查询 <code>l - 1</code> 和 <code>r</code> 在平衡树中的排名即可得到在 $[l, r]$ 中有多少人支持他</p><p>卡了个最优（主要是SBT快），估计现在已经没了吧</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SBT yyds</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>, K = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NodeForSBT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, v, si;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) node_for_sbt[(x)].l</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(x) node_for_sbt[(x)].r</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> v(x) node_for_sbt[(x)].v</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> si(x) node_for_sbt[(x)].si</span></span><br><span class="line">&#125; node_for_sbt[N + K]; <span class="comment">//由于del优化,SBT的节点数为n+插入节点数</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SBT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> rt = <span class="number">0</span>;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">rr</span><span class="params">(<span class="keyword">int</span> &amp;t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="built_in">l</span>(t);</span><br><span class="line">        <span class="built_in">l</span>(t) = <span class="built_in">r</span>(k), <span class="built_in">r</span>(k) = t;</span><br><span class="line">        <span class="built_in">si</span>(k) = <span class="built_in">si</span>(t);</span><br><span class="line">        <span class="built_in">si</span>(t) = <span class="built_in">si</span>(<span class="built_in">l</span>(t)) + <span class="built_in">si</span>(<span class="built_in">r</span>(t)) + <span class="number">1</span>;</span><br><span class="line">        t = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">lr</span><span class="params">(<span class="keyword">int</span> &amp;t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="built_in">r</span>(t);</span><br><span class="line">        <span class="built_in">r</span>(t) = <span class="built_in">l</span>(k), <span class="built_in">l</span>(k) = t;</span><br><span class="line">        <span class="built_in">si</span>(k) = <span class="built_in">si</span>(t);</span><br><span class="line">        <span class="built_in">si</span>(t) = <span class="built_in">si</span>(<span class="built_in">l</span>(t)) + <span class="built_in">si</span>(<span class="built_in">r</span>(t)) + <span class="number">1</span>;</span><br><span class="line">        t = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">mt</span><span class="params">(<span class="keyword">int</span> &amp;t, <span class="keyword">bool</span> f)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!f)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">si</span>(<span class="built_in">l</span>(<span class="built_in">l</span>(t))) &gt; <span class="built_in">si</span>(<span class="built_in">r</span>(t)))</span><br><span class="line">                <span class="built_in">rr</span>(t);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">si</span>(<span class="built_in">r</span>(<span class="built_in">l</span>(t))) &gt; <span class="built_in">si</span>(<span class="built_in">r</span>(t)))</span><br><span class="line">                <span class="built_in">lr</span>(<span class="built_in">l</span>(t)), <span class="built_in">rr</span>(t);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">si</span>(<span class="built_in">r</span>(<span class="built_in">r</span>(t))) &gt; <span class="built_in">si</span>(<span class="built_in">l</span>(t)))</span><br><span class="line">                <span class="built_in">lr</span>(t);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">si</span>(<span class="built_in">l</span>(<span class="built_in">r</span>(t))) &gt; <span class="built_in">si</span>(<span class="built_in">l</span>(t)))</span><br><span class="line">                <span class="built_in">rr</span>(<span class="built_in">r</span>(t)), <span class="built_in">lr</span>(t);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">mt</span>(<span class="built_in">l</span>(t), <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">mt</span>(<span class="built_in">r</span>(t), <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">mt</span>(t, <span class="literal">false</span>), <span class="built_in">mt</span>(t, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;t, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!t)</span><br><span class="line">        &#123;</span><br><span class="line">            t = ++num;</span><br><span class="line">            node_for_sbt[t] = &#123;<span class="number">0</span>, <span class="number">0</span>, v, <span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        ++<span class="built_in">si</span>(t);</span><br><span class="line">        <span class="keyword">if</span> (v &lt;= <span class="built_in">v</span>(t))</span><br><span class="line">            <span class="built_in">ins</span>(<span class="built_in">l</span>(t), v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">ins</span>(<span class="built_in">r</span>(t), v);</span><br><span class="line">        <span class="built_in">mt</span>(t, v &gt; <span class="built_in">v</span>(t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> &amp;t, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        --<span class="built_in">si</span>(t); <span class="comment">//一定要先减,不然会错</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">v</span>(t) == v) || (<span class="built_in">v</span>(t) &lt; v &amp;&amp; !<span class="built_in">r</span>(t)) || (<span class="built_in">v</span>(t) &gt; v &amp;&amp; !<span class="built_in">l</span>(t)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> res = <span class="built_in">v</span>(t);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">l</span>(t) || !<span class="built_in">r</span>(t))</span><br><span class="line">                t = <span class="built_in">l</span>(t) + <span class="built_in">r</span>(t);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">v</span>(t) = <span class="built_in">del</span>(<span class="built_in">l</span>(t), <span class="built_in">v</span>(t) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在这里--si(t)就会错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">v</span>(t) &lt; v ? <span class="built_in">del</span>(<span class="built_in">r</span>(t), v) : <span class="built_in">del</span>(<span class="built_in">l</span>(t), v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">int</span> <span class="title">rk</span><span class="params">(<span class="keyword">int</span> &amp;t, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!t)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="built_in">v</span>(t))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">si</span>(<span class="built_in">l</span>(t)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> v &lt; <span class="built_in">v</span>(t) ? <span class="built_in">rk</span>(<span class="built_in">l</span>(t), v) : <span class="built_in">si</span>(<span class="built_in">l</span>(t)) + <span class="number">1</span> + <span class="built_in">rk</span>(<span class="built_in">r</span>(t), v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sbt[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LineTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Date</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> cnt, v;</span><br><span class="line">    &#125; ;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NodeForLineTree</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        Date dat;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> ll(x) node_for_line_tree[(x)].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rr(x) node_for_line_tree[(x)].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> ct(x) node_for_line_tree[(x)].dat.cnt</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> vv(x) node_for_line_tree[(x)].dat.v</span></span><br><span class="line">    &#125; node_for_line_tree[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> lc (u &lt;&lt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> rc (u &lt;&lt; 1 | 1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Mid (ll(u) + rr(u) &gt;&gt; 1)</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Date x, Date y, Date &amp;z)</span> <span class="comment">//合并x和y,储存在z</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.v == y.v)</span><br><span class="line">            z.v = x.v, z.cnt = x.cnt + y.cnt;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x.cnt &gt;= y.cnt)</span><br><span class="line">            z.v = x.v, z.cnt = x.cnt - y.cnt;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            z.v = y.v, z.cnt = y.cnt - x.cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">merge</span>(node_for_line_tree[lc].dat, node_for_line_tree[rc].dat, node_for_line_tree[u].dat);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">ll</span>(u) = l, <span class="built_in">rr</span>(u) = r;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ct</span>(u) = <span class="number">1</span>, <span class="built_in">vv</span>(u) = x[l];</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = Mid;</span><br><span class="line">        <span class="built_in">build</span>(lc, l, mid, x), <span class="built_in">build</span>(rc, mid + <span class="number">1</span>, r, x);</span><br><span class="line">        <span class="built_in">up</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pos, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ll</span>(u) == <span class="built_in">rr</span>(u))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ct</span>(u) = <span class="number">1</span>, <span class="built_in">vv</span>(u) = d;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = Mid;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid)</span><br><span class="line">            <span class="built_in">change</span>(lc, pos, d);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">change</span>(rc, pos, d);</span><br><span class="line">        <span class="built_in">up</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL Date <span class="title">ask</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ll</span>(u) &gt;= l &amp;&amp; <span class="built_in">rr</span>(u) &lt;= r)</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="built_in">ct</span>(u), <span class="built_in">vv</span>(u)&#125;;</span><br><span class="line">        <span class="keyword">int</span> mid = Mid;</span><br><span class="line">        Date res = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">            <span class="built_in">merge</span>(<span class="built_in">ask</span>(lc, l, r), res, res);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid)</span><br><span class="line">            <span class="built_in">merge</span>(<span class="built_in">ask</span>(rc, l, r), res, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; lt;</span><br><span class="line"><span class="function">IL <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = sbt[x].<span class="built_in">rk</span>(sbt[x].rt, r) - sbt[x].<span class="built_in">rk</span>(sbt[x].rt, l - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> (t &lt;&lt; <span class="number">1</span>) &gt; (r - l + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    STC <span class="keyword">int</span> a[N];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        sbt[a[i]].<span class="built_in">ins</span>(sbt[a[i]].rt, i);</span><br><span class="line">    &#125;</span><br><span class="line">    lt.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n, a);</span><br><span class="line">    <span class="keyword">int</span> l, r, s, k, win, t;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;s, &amp;k);</span><br><span class="line">        win = lt.<span class="built_in">ask</span>(<span class="number">1</span>, l, r).v;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">check</span>(win, l, r))</span><br><span class="line">            win = s;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, win);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">            lt.<span class="built_in">change</span>(<span class="number">1</span>, t, win);</span><br><span class="line">            sbt[a[t]].<span class="built_in">del</span>(sbt[a[t]].rt, t);</span><br><span class="line">            sbt[win].<span class="built_in">ins</span>(sbt[win].rt, t);</span><br><span class="line">            a[t] = win;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    win = lt.<span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n).v;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>(win, l, r))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, win);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 心血来潮想写SBT了&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="SBT" scheme="https://dyd-true.github.io/tags/SBT/"/>
    
    <category term="平衡树" scheme="https://dyd-true.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    <category term="数据结构" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="线段树" scheme="https://dyd-true.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF1221C Perfect Team</title>
    <link href="https://dyd-true.github.io/2022/01/03/CF1221C-Perfect-Team/"/>
    <id>https://dyd-true.github.io/2022/01/03/CF1221C-Perfect-Team/</id>
    <published>2022-01-03T00:11:22.000Z</published>
    <updated>2022-01-03T00:21:28.291Z</updated>
    
    <content type="html"><![CDATA[<p> 简单的二分</p><span id="more"></span><p>尝试了一下CF难度 $1200$ ，一道简单的二分（感觉一直在A水题）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, c, m, x;</span><br><span class="line">    <span class="keyword">int</span> l, r, mid, ans;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;c, &amp;m, &amp;x);</span><br><span class="line">        l = ans = <span class="number">0</span>, r = <span class="built_in">min</span>(c, m);</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ((c + m + x - mid) &gt;= (mid &lt;&lt; <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 简单的二分&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="贪心" scheme="https://dyd-true.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="二分" scheme="https://dyd-true.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="CF" scheme="https://dyd-true.github.io/tags/CF/"/>
    
  </entry>
  
  <entry>
    <title>CF1455C Ping-pong</title>
    <link href="https://dyd-true.github.io/2022/01/03/CF1455C-Ping-pong/"/>
    <id>https://dyd-true.github.io/2022/01/03/CF1455C-Ping-pong/</id>
    <published>2022-01-02T23:47:58.000Z</published>
    <updated>2022-01-03T00:11:58.944Z</updated>
    
    <content type="html"><![CDATA[<p> 结论题？</p><span id="more"></span><p><a href="https://codeforces.com/problemset/problem/1455/C">Ping-pong</a></p><p> $1100$ ，不是很简单了，先考虑贪心吧</p><p>但是一个细节是体力少的一方可以不打，等对方体力耗完，可以这样理解：反正体力少这把必输，且打不打体力差都变小 $1$ ，不如不打保留实力</p><p>由上也可以得到一个策略：设双方体力为 $x, y$ ，若 $x &gt; y(y &gt; x)$ ，则体力大的一方赢 $x - y$ 次，双方体力都变成 $y$ </p><p>而当体力相同时，先开球的人必输，但他们是优先保证自己赢的多，所以先/后手都不会让体力被一把打尽，就会故意输（对于先手，这把输了双方体力相同，而对方变成下一把的先手；对于后手，这把输了自己体力更大，下把必胜），所以体力相同的时候两人一定是每个人都把自己的体力赢完</p><p>但第一局Alice必须开球，所以她的胜场会少 $1$ </p><p>另外，其实看样例找规律也能做吧？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, x - <span class="number">1</span>, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 结论题？&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="贪心" scheme="https://dyd-true.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="CF" scheme="https://dyd-true.github.io/tags/CF/"/>
    
  </entry>
  
  <entry>
    <title>CF1567B MEXor Mixup</title>
    <link href="https://dyd-true.github.io/2022/01/02/CF1567B-MEXor-Mixup/"/>
    <id>https://dyd-true.github.io/2022/01/02/CF1567B-MEXor-Mixup/</id>
    <published>2022-01-02T13:24:23.000Z</published>
    <updated>2022-01-02T23:49:59.660Z</updated>
    
    <content type="html"><![CDATA[<p> 再挑战一下 $1000$ </p><span id="more"></span><p><a href="https://codeforces.com/problemset/problem/1567/B">MEXor Mixup</a></p><p>略有点水，放代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prev</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] ^ i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, a, b;</span><br><span class="line">    <span class="built_in">prev</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span> (sum[a - <span class="number">1</span>] == b)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((sum[a - <span class="number">1</span>] ^ b) == a)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a + <span class="number">1</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 再挑战一下 $1000$ &lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="贪心" scheme="https://dyd-true.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="CF" scheme="https://dyd-true.github.io/tags/CF/"/>
    
  </entry>
  
  <entry>
    <title>CF4A Watermelon</title>
    <link href="https://dyd-true.github.io/2022/01/02/CF4A-Watermelon/"/>
    <id>https://dyd-true.github.io/2022/01/02/CF4A-Watermelon/</id>
    <published>2022-01-02T12:58:43.000Z</published>
    <updated>2022-01-02T23:49:25.291Z</updated>
    
    <content type="html"><![CDATA[<p> CF $800$ 的水题</p><span id="more"></span><p><a href="https://codeforces.com/problemset/problem/4/A">Watermelon</a></p><p>蒻蒟发现自己刷了好久luogu了，偶尔想换换口味，于是看了道CF的题</p><p>毕竟（不通过luogu做CF）是第一次，所以做一道难度 $800$ 的try one try，在思考了整整 $1145141919810.1415926535…$ 秒后，终于做出来了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w);</span><br><span class="line">    <span class="keyword">if</span> ((w &lt; <span class="number">4</span>) || (w &amp; <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; CF $800$ 的水题&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="CF" scheme="https://dyd-true.github.io/tags/CF/"/>
    
  </entry>
  
  <entry>
    <title>luoguP4466 [国家集训队]和与积</title>
    <link href="https://dyd-true.github.io/2022/01/02/luoguP4466-%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F-%E5%92%8C%E4%B8%8E%E7%A7%AF/"/>
    <id>https://dyd-true.github.io/2022/01/02/luoguP4466-%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F-%E5%92%8C%E4%B8%8E%E7%A7%AF/</id>
    <published>2022-01-02T10:29:41.000Z</published>
    <updated>2022-01-02T12:46:09.675Z</updated>
    
    <content type="html"><![CDATA[<p> 时间复杂度到底是多少……</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4466">和与积</a></p><p>一眼望过去感觉像莫反，心里拔凉</p><p>但还是坚强的把25分的暴力打了，不出意外，刚刚好25分，于是，找规律</p><p>打了个表找规律，看见答案一块一块的贼像数论分块，心里更凉了，把100以内的数对打表出来，发现（<del>反正我看见的</del>） $gcd(a, b) \ne 1$ ，硬着头皮推</p><p>莫反<br>$$<br>\begin{aligned}<br>设 &amp; gcd(a, b) = r, c = \frac{a}{r}, d = \frac{b}{r}, k \in \mathbb{N_+} \\<br>&amp; a b = (a + b) k \\<br>&amp; r^2 c d = r (c + d) k \\<br>&amp; r c d = (c + d) k \\<br>\because &amp; gcd(c, d) = 1 \\<br>\therefore &amp; cd \mid k \\<br>设 &amp; k’ = \frac{k}{cd} \\<br>有 &amp; r = (c + d) k’<br>\end{aligned}<br>$$<br>乱推一波到这里不知道该干啥了，于是去看了看（<del>被我遗忘了很久的</del>）莫反，想到莫反的经典操作——将枚举约数改成枚举倍数</p><p>考虑求 $c, d, k’, (c &lt; d, gcd(c, d) = 1, k’ \in \mathbb{N_+})$ ，则可计计算出 $r = (c + d) k’, a = rc, b = rd$ ，又因为 $b \le n$ ，所以 $d (c + d) k’ \le n$ ，也就是说， $c, d$ 确定以后， $k’$ 的范围也确定了，可以直接计算有几对，时间复杂度为 $O(n^2)$ ——woc，暴力也是 $O(n^2)$ 啊！</p><p>再次推式子：<br>$$<br>\begin{aligned}<br>Ans<br>&amp; = \sum_{i = 1}^N \sum_{j = 1}^{i - 1} [gcd(i, j) == 1] \lfloor \frac{N}{i (i + j)} \rfloor \\<br>&amp; = \sum_{i = 1}^N \sum_{j = 1}^{i - 1} \sum_{k | gcd(i, j)} \mu(k) \lfloor \frac{N}{i (i + j)} \rfloor \\<br>&amp; 令 pk = i, qk = j, N’k = N, 有 : \\<br>Ans<br>&amp; = \sum_{k = 1}^N \sum_{p = 1}^N’ \sum_{q = 1}^{p - 1} \mu(k) \lfloor \frac{N’}{p (p + q)} \rfloor \\<br>\end{aligned}<br>$$<br>到这一步动不了了，主要是 $p(p + q)$ 是个二次项没法整除分块，卡了1145141919810h，高素质的瞟了一眼题解：<br>$$<br>\begin{aligned}<br>Ans<br>&amp; = \sum_{k = 1}^N \sum_{p = 1}^N’ \sum_{q = 1}^{p - 1} \mu(k) \lfloor \frac{N’}{p (p + q)} \rfloor \\<br>&amp; = \sum_{k = 1}^N \sum_{p = 1}^N’ \sum_{q = 1}^{p - 1} \mu(k) \lfloor \frac{\lfloor \frac{N’}{p} \rfloor}{p + q} \rfloor \\<br>\end{aligned}<br>$$<br>于是当 $k, p$ 定了后，后面只关于 $q$ 可以整除分块（<del>我咋就想不到呢？</del>）</p><p>机房的巨佬在这一步就可以做了，但蒟蒻我还是不能理解（感觉三个 $\sum$ 时间不是更慢了吗），所以我又绕了一下</p><p>发现这里没有必要跑满每一个 $N$ ，中间有一步：<br>$$<br>Ans = \sum_{i = 1}^N \sum_{j = 1}^{i - 1} \sum_{k | gcd(i, j)} \mu(k) \lfloor \frac{N}{i (i + j)} \rfloor \\<br>$$<br>这里当 $i \ge \sqrt{N}$ 时后面就为 $0$ ，所以直接令 $M = \sqrt{N}$ ，则<br>$$<br>Ans = \sum_{k = 1}^M \sum_{p = 1}^M’ \sum_{q = 1}^{p - 1} \mu(k) \lfloor \frac{\lfloor \frac{M’}{p} \rfloor}{p + q} \rfloor \\<br>$$<br>枚举 $k$ 用 $N^{\frac{1}{2}}$  ，枚举 $p$ 用大概用个 $N^{\frac{1}{4}}$ ，数论分块大概用个 $\sqrt{N^{\frac{1}{4}}}$ ……？？？啊啊啊算不出来了</p><p>看了一下题解，大家也都各不相同，但好像是 $O(n^{\frac{3}{4}})$ ？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> mu[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; prime;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prev</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> v[N];</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!v[i])</span><br><span class="line">            prime.<span class="built_in">push_back</span>(i), mu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j : prime)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * j &gt; n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            v[i * j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % j)</span><br><span class="line">                mu[i * j] = -mu[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">work</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ed = p &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = p + <span class="number">1</span>, r; l &lt; ed; l = r + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x / l)</span><br><span class="line">            r = <span class="built_in">min</span>(x / (x / l), ed - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        res += (LL)(r - l + <span class="number">1</span>) * (x / l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    m = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="built_in">prev</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mu[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j * i &lt;= m; ++j)</span><br><span class="line">            ans += <span class="built_in">work</span>(j, n / (i * i * j)) * mu[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉自己莫反好弱</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 时间复杂度到底是多少……&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="莫比乌斯反演" scheme="https://dyd-true.github.io/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>luoguP4022 [CTSC2012]熟悉的文章</title>
    <link href="https://dyd-true.github.io/2022/01/02/luoguP4022-CTSC2012-%E7%86%9F%E6%82%89%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    <id>https://dyd-true.github.io/2022/01/02/luoguP4022-CTSC2012-%E7%86%9F%E6%82%89%E7%9A%84%E6%96%87%E7%AB%A0/</id>
    <published>2022-01-02T02:53:51.000Z</published>
    <updated>2022-01-02T07:20:53.781Z</updated>
    
    <content type="html"><![CDATA[<p> shit，不是水题了</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4022">熟悉的文章</a></p><p>首先匹配的问题很好解决，SAM、SA维护文本串或者kmp处理模式串都可以</p><p>关键问题在于 $L_0$ ，首先考虑的是二分，因为答案很明显有单调性（如果长度 $L_0$ 可以，那么长度小于 $L_0$ 的也明显可以），但二分后如何判定是个问题</p><p>目测感觉和dp挂钩，有点像在kmp上dp，关键是假设已知长度为 $L_0$ ，如何得到划分方案，这边想考虑贪心</p><p>贪了一会贪不动，如果没有明显的贪心就考虑dp，设 <code>f[i]</code> 表示在已知长度为 $L_0$ 的情况下，以 $i$ 结尾的前缀串中“熟悉”的子串的长度总和，设以 $i$ 结尾的能匹配上的子串中最长的长度为 $len_i$ dp方程比较好推（就是状态不好设）：<br>$$<br>\begin{aligned}<br>f[i] = max<br>\begin{cases}<br>f[i - 1] (不让 i 成为一段) \\<br>f[j] + i - j, j \in [i - len_i, i - L_0] (让 i 匹配)<br>\end{cases}<br>\end{aligned}<br>$$<br>关于 $len_i$ ，可以对于每一个串预处理出来</p><p>明显可以单调队列维护，但由于数据范围是“输入文件的长度不超过 $1100000$ 字节”，所以我也不知道时间复杂度是多少</p><p>关于处理 $len_i$ ，我想的是先把文本串全都连起来（中间用 \$ 隔开），建一个SAM或者SA，然后对于每个询问直接暴力跑一遍，好像会挂</p><p>发现可以用类似AC自动机的想法，直接扫描匹配，就是建一个SAM，开始像Trie一样匹配，失配就用parent tree向上跳，大概应该也许可能是 $O(n)$ 的……吧？</p><p>还有一个实现的时候卡了的地方是单调队列维护时，区间长度是在变化的，解决办法是每次入队不是让 $i$ 入队，而是让 $i - L0$ 入队，这样可以保证队列中节点一定在区间内</p><p>结果SAM打挂了，调了好久才过样例，对这些东西还不是很熟悉啊</p><p>慢的一比的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1.1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">namespace</span> SAM</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span>, last = <span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> len, fa;</span><br><span class="line">        <span class="keyword">int</span> ch[<span class="number">3</span>];</span><br><span class="line">    &#125; nd[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_v</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch == <span class="string">&#x27;$&#x27;</span> ? <span class="number">2</span> : ch - <span class="string">&#x27;0&#x27;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="built_in">get_v</span>(ch);</span><br><span class="line">        <span class="keyword">int</span> p = last, np = last = ++tot;</span><br><span class="line">        <span class="keyword">for</span> (; p &amp;&amp; !nd[p].ch[x]; p = nd[p].fa)</span><br><span class="line">            nd[p].ch[x] = np;</span><br><span class="line">        <span class="keyword">if</span> (!p)</span><br><span class="line">            nd[np].fa = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> q = nd[p].ch[x];</span><br><span class="line">            <span class="keyword">if</span> (nd[q].len == nd[p].len + <span class="number">1</span>)</span><br><span class="line">                nd[np].fa = q;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> nq = ++tot;</span><br><span class="line">                nd[nq] = nd[q], nd[nq].len = nd[p].len + <span class="number">1</span>;</span><br><span class="line">                nd[q].fa = nd[np].fa = nq;</span><br><span class="line">                <span class="keyword">for</span> (; p &amp;&amp; nd[p].ch[x] == q; p = nd[p].fa)</span><br><span class="line">                    nd[p].ch[x] = nq;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">1</span>, now = <span class="number">0</span>, t, len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            t = <span class="built_in">get_v</span>(s[i]);</span><br><span class="line">            <span class="keyword">if</span> (nd[p].ch[t])</span><br><span class="line">                ++now, p = nd[p].ch[t];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (; p &amp;&amp; !nd[p].ch[t]; p = nd[p].fa);</span><br><span class="line">                <span class="keyword">if</span> (!p)</span><br><span class="line">                    p = <span class="number">1</span>, now = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    now = nd[p].len + <span class="number">1</span>, p = nd[p].ch[t];</span><br><span class="line">            &#125;</span><br><span class="line">            x[i] = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len[N];</span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> sl)</span> <span class="comment">//x就是L0</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> q[N];</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; ++i)</span><br><span class="line">        f[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= sl; ++i)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="comment">//由于i-L0可以跟新i,所以要先入队</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r &amp;&amp; f[q[r]] - q[r] &lt;= f[i - x] - (i - x))</span><br><span class="line">            --r;</span><br><span class="line">        q[++r] = i - x;</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r &amp;&amp; q[l] &lt; i - len[i])</span><br><span class="line">            ++l;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= r)</span><br><span class="line">            f[i] = <span class="built_in">max</span>(f[i], f[q[l]] + i - q[l]);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[sl] * <span class="number">10</span> &gt;= sl * <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SAM::<span class="built_in">find</span>(s, len);</span><br><span class="line">    <span class="keyword">int</span> sl = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = sl, mid, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid, sl))</span><br><span class="line">        &#123;</span><br><span class="line">            res = mid;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    STC <span class="keyword">char</span> s[N];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">        t = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= t; ++j)</span><br><span class="line">            SAM::<span class="built_in">ins</span>(s[j]);</span><br><span class="line">        SAM::<span class="built_in">ins</span>(<span class="string">&#x27;$&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">work</span>(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; shit，不是水题了&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="单调队列" scheme="https://dyd-true.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
    <category term="二分" scheme="https://dyd-true.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="后缀自动机,SAM" scheme="https://dyd-true.github.io/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA-SAM/"/>
    
  </entry>
  
  <entry>
    <title>luoguP3906 Geodetic集合</title>
    <link href="https://dyd-true.github.io/2022/01/02/luoguP3906-Geodetic%E9%9B%86%E5%90%88/"/>
    <id>https://dyd-true.github.io/2022/01/02/luoguP3906-Geodetic%E9%9B%86%E5%90%88/</id>
    <published>2022-01-02T02:18:15.000Z</published>
    <updated>2022-01-02T02:20:28.195Z</updated>
    
    <content type="html"><![CDATA[<p> 大水题</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P3906">Geodetic集合</a></p><p>水题（主要是 $n$ 太小了），直接给代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">40</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, que;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Que</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Que &amp;t) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> u == t.u ? u &lt; t.u : v &lt; t.v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; qq[N * N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans[N * N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[(N * N) &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> h[N], idx = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = (Edge)&#123;h[x], y&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> star)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        dis[i] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    dis[star] = <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(star);</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        x = q.<span class="built_in">front</span>(), q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">            <span class="keyword">if</span> (!dis[y = e[i].ver])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y] = dis[x] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> star)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(star);</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">    ans[id].<span class="built_in">push_back</span>(star);</span><br><span class="line">    vis[star] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        x = q.<span class="built_in">front</span>(), q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">            <span class="keyword">if</span> (!vis[y = e[i].ver] &amp;&amp; dis[y] == dis[x] - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[id].<span class="built_in">push_back</span>(y);</span><br><span class="line">                vis[y] = <span class="literal">true</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        h[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a, b; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a, b), <span class="built_in">add</span>(b, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;que);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= que; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;qq[i].u, &amp;qq[i].v);</span><br><span class="line">        qq[i].id = i;</span><br><span class="line">        <span class="keyword">if</span> (qq[i].u &gt; qq[i].v)</span><br><span class="line">            <span class="built_in">swap</span>(qq[i].u, qq[i].v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(qq + <span class="number">1</span>, qq + <span class="number">1</span> + que);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, now = <span class="number">0</span>; i &lt;= que; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (now != qq[i].u)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">bfs</span>(qq[i].u);</span><br><span class="line">            now = qq[i].u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">work</span>(qq[i].id, qq[i].v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= que; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(<span class="built_in">all</span>(ans[i]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j : ans[i])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, j);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 大水题&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="STL" scheme="https://dyd-true.github.io/tags/STL/"/>
    
    <category term="搜索" scheme="https://dyd-true.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
    <category term="bfs" scheme="https://dyd-true.github.io/tags/bfs/"/>
    
  </entry>
  
  <entry>
    <title>奇妙的数学知识</title>
    <link href="https://dyd-true.github.io/2022/01/02/%E5%A5%87%E5%A6%99%E7%9A%84%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
    <id>https://dyd-true.github.io/2022/01/02/%E5%A5%87%E5%A6%99%E7%9A%84%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/</id>
    <published>2022-01-02T01:32:02.000Z</published>
    <updated>2022-01-02T01:43:33.444Z</updated>
    
    <content type="html"><![CDATA[<p> 奇奇怪怪</p><span id="more"></span><ul><li><p> $gcd(x, y, z) = gcd(x, y - x, z - y)$ ，这启发我们，对于已知数列 $\{a\}$ 及其差分数列 $\{b\}$ ， $gcd(a_i, a_{i+1}, …, a_j) = gcd(a_i, b_{i+1}, …, b_j)$ </p></li><li><p>$C_{a}^{b}=C_{a-1}^{b-1}+C_{a-1}^{b}$ ，这启发我们可以用递推求组合数</p></li><li><p>自然数次幂求和：<br>$$<br>\begin{aligned}<br>&amp; \sum_{i = 1}^{n} i = \frac{1}{2} n (n + 1) \\<br>&amp; \sum_{i = 1}^{n} i^2 = \frac{1}{6} n (n + 1) (2n + 1) \\<br>&amp; \sum_{i = 1}^{n} i^3 = \frac{1}{4} n^2 (n + 1)^2 \\<br>&amp; \sum_{i = 1}^{n} i^4 = \frac{1}{30} n (n + 1) (2n + 1) (3n^2 + 3n - 1) \\<br>&amp; \sum_{i = 1}^{n} i^5 = \frac{1}{12} n^2 (n + 1)^2 (2n^2 + 2n - 1) \\<br>&amp; \sum_{i = 1}^{n} i^6 = \frac{1}{42} n (n + 1) (2n + 1) (3n^4 + 6n^3 - 3n + 1) \\<br>\end{aligned}<br>$$</p><p>对于自然数 $k$ 次幂求和，明显其结果是一个关于 $n$ 的 $k + 1$ 次多项式，可以待定系数法求解</p></li><li></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt; 奇奇怪怪&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="其它" scheme="https://dyd-true.github.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>luoguP4927 [1007]梦美与线段树</title>
    <link href="https://dyd-true.github.io/2022/01/02/luoguP4927-1007-%E6%A2%A6%E7%BE%8E%E4%B8%8E%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>https://dyd-true.github.io/2022/01/02/luoguP4927-1007-%E6%A2%A6%E7%BE%8E%E4%B8%8E%E7%BA%BF%E6%AE%B5%E6%A0%91/</id>
    <published>2022-01-02T00:36:02.000Z</published>
    <updated>2022-01-02T01:35:10.136Z</updated>
    
    <content type="html"><![CDATA[<p> 出题人我谢谢您</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4927">梦美与线段树</a></p><p>很快手玩了一下答案，设 $\{a_i\}$ 为序列， $\{v_i\}$ 为线段树节点的权值，答案就是 $Ans = \frac{\sum v_i^2}{\sum a_i}$ </p><p>下面的分母好解决，问题在上面的平方和</p><p>考虑线段树维护节点权值平方和（同时可以很自然的维护序列和），当区间加 $d$ 的时候，设该节点对应区间长度为 $len_i$ ，则 $v_i^2 \rightarrow (v_i + len_i * d)^2 = v_i^2 + v_i * len_i * 2d + len_i^2 * d$ ，发现节点的改变量和它的权值与长度都有关，考虑维护系数，即维护 $v_i * len_i$ 的和与 $len_i^2$ 和</p><p>具体地，设 $s2$ 表示节点权值示平方和， $sl2$ 表示节点长度平方和（它只用算一次，是不变的）， $sm$ 是 $v_i * len_i$ 的和有：<br>$$<br>\begin{aligned}<br>pushup : \\<br>&amp; v_i = v_{lc} + v_{rc} \\<br>&amp; s2_i = v_i^2 + s2_{lc} + s2_{rc} \\<br>&amp; sl2_i = len_i^2 + sl2_{lc} + sl2_{rc} \\<br>&amp; sm_i = len_i * v_i + sm_{lc} + sm_{rc} \\<br>pushdown : \\<br>&amp; s2_i = sl2_i * d^2 + 2d * sm_i + s2_i \\<br>&amp; v_i = len_i * d + v_i \\<br>&amp; sm_i = sl2_i * d + sm_i \\<br>\end{aligned}<br>$$<br>打好懒标记，调了一下，一交……WA90？！</p><p>一看，输出了个 $0$ 以为爆精度了，就 <code>#define int long long</code> 结果不变，一看讨论区，有人说这题要用高精（或者不要脸的 <code>__int128</code> ），我看了一遍，每一步都模了 $P = 998244353$ ，连 <code>long long</code> 会不会炸都怀疑，但还是改成 <code>__int128</code> 试了试，结果不变……</p><p>对 <code>__int128</code> 不是很熟悉，我以为自己用错了，还手打了快读快输，结果还是不变</p><p>忍无可忍看题解，发现问题在于题目说“令答案化成最简分数为 $\frac{p}{q}$ （保证 $q$ 不是 $998244353$ 的倍数”，也就是说答案可能是 $\frac{k * P}{r * P}$ 的形式，所以<strong>中间的过程中不能取模</strong>，只能开 <code>__int128</code> 硬存最后约分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int __int128</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, P = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LineTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="comment">//值,平方和,长度平方和,长度与值的积的和</span></span><br><span class="line">    <span class="keyword">int</span> v, s2, sl2, sm;</span><br><span class="line">    <span class="keyword">int</span> add;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(x) tr[(x)].l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(x) tr[(x)].r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> v(x) tr[(x)].v</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> s2(x) tr[(x)].s2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sl2(x) tr[(x)].sl2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sm(x) tr[(x)].sm</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ad(x) tr[(x)].add</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (u &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc (u &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mid (tr[u].l + tr[u].r &gt;&gt; 1)</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">gh</span>(), t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        t |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="number">48</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">        x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = res * x % P;</span><br><span class="line">        x = x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_init</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">r</span>(u) - <span class="built_in">l</span>(u) + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">v</span>(u) = (<span class="built_in">v</span>(lc) + <span class="built_in">v</span>(rc));</span><br><span class="line">    <span class="built_in">s2</span>(u) = (<span class="built_in">v</span>(u) * <span class="built_in">v</span>(u) + <span class="built_in">s2</span>(lc) + <span class="built_in">s2</span>(rc));</span><br><span class="line">    <span class="built_in">sl2</span>(u) = (len * len + <span class="built_in">sl2</span>(lc) + <span class="built_in">sl2</span>(rc));</span><br><span class="line">    <span class="built_in">sm</span>(u) = ((<span class="built_in">r</span>(u) - <span class="built_in">l</span>(u) + <span class="number">1</span>) * <span class="built_in">v</span>(u)+ <span class="built_in">sm</span>(lc) + <span class="built_in">sm</span>(rc));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">v</span>(u) = (<span class="built_in">v</span>(lc) + <span class="built_in">v</span>(rc));</span><br><span class="line">    <span class="built_in">s2</span>(u) = (<span class="built_in">v</span>(u) * <span class="built_in">v</span>(u) + <span class="built_in">s2</span>(lc) + <span class="built_in">s2</span>(rc));</span><br><span class="line">    <span class="built_in">sm</span>(u) = ((<span class="built_in">r</span>(u) - <span class="built_in">l</span>(u) + <span class="number">1</span>) * <span class="built_in">v</span>(u) + <span class="built_in">sm</span>(lc) + <span class="built_in">sm</span>(rc));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_tag</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">s2</span>(u) = (<span class="built_in">sl2</span>(u) * d * d +d * <span class="number">2</span> * <span class="built_in">sm</span>(u) + <span class="built_in">s2</span>(u));</span><br><span class="line">    <span class="built_in">v</span>(u) = ((<span class="built_in">r</span>(u) - <span class="built_in">l</span>(u) + <span class="number">1</span>) * d + <span class="built_in">v</span>(u));</span><br><span class="line">    <span class="built_in">sm</span>(u) = (<span class="built_in">sl2</span>(u) * d + <span class="built_in">sm</span>(u));</span><br><span class="line">    <span class="built_in">ad</span>(u) = (<span class="built_in">ad</span>(u) + d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ad</span>(u))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add_tag</span>(lc, <span class="built_in">ad</span>(u));</span><br><span class="line">        <span class="built_in">add_tag</span>(rc, <span class="built_in">ad</span>(u));</span><br><span class="line">        <span class="built_in">ad</span>(u) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">l</span>(u) = l, <span class="built_in">r</span>(u) = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">v</span>(u) = <span class="built_in">sm</span>(u) = a[l];</span><br><span class="line">        <span class="built_in">s2</span>(u) = a[l] * a[l];</span><br><span class="line">        <span class="built_in">sl2</span>(u) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = Mid;</span><br><span class="line">    <span class="built_in">build</span>(lc, l, mid), <span class="built_in">build</span>(rc, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">push_init</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">l</span>(u) &gt;= l &amp;&amp; <span class="built_in">r</span>(u) &lt;= r)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">add_tag</span>(u, d);</span><br><span class="line">    <span class="built_in">push_down</span>(u);</span><br><span class="line">    <span class="keyword">int</span> mid = Mid;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">        <span class="built_in">modify</span>(lc, l, r, d);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid)</span><br><span class="line">        <span class="built_in">modify</span>(rc, l, r, d);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = __gcd(<span class="built_in">s2</span>(<span class="number">1</span>), <span class="built_in">v</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">int</span> A = <span class="built_in">s2</span>(<span class="number">1</span>) / t, B = <span class="built_in">v</span>(<span class="number">1</span>) / t;</span><br><span class="line">    <span class="keyword">return</span> A % P * <span class="built_in">qpow</span>(B, P - <span class="number">2</span>) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">int</span> op, l, r, v;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(op);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(l), <span class="built_in">read</span>(r), <span class="built_in">read</span>(v);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, l, r, v);   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">write</span>(<span class="built_in">ask</span>()), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 出题人我谢谢您&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="线段树" scheme="https://dyd-true.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="STL" scheme="https://dyd-true.github.io/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>luoguP5389 [Cnoi2019]数学课</title>
    <link href="https://dyd-true.github.io/2022/01/01/luoguP5389-Cnoi2019-%E6%95%B0%E5%AD%A6%E8%AF%BE/"/>
    <id>https://dyd-true.github.io/2022/01/01/luoguP5389-Cnoi2019-%E6%95%B0%E5%AD%A6%E8%AF%BE/</id>
    <published>2022-01-01T03:08:53.000Z</published>
    <updated>2022-01-01T06:33:22.502Z</updated>
    
    <content type="html"><![CDATA[<p> 神仙数学，想复杂了</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P5389">数学课</a></p><p>最近感觉不在状态（可能是快期末考试了吧），所以随机跳了一题，肉眼可见的数学题</p><p>由于 $a, b$ 产生方式相同，所以 $P(a &gt; b) = P(a &lt; b)$ ，因此只需要计算 $P(a = b)$ 即可</p><p>考虑 $a = x_k$ 的概率：</p><p>设数列为 $\{x_i\}$ ，明显 $x_i = \frac{i (i + 1)}{2}$ ，选出  $x_i, (i \ge k)$ 的概率有 $P(x_i) = \frac{3 i (i + 1)}{n (n + 1)(n + 2)}$ ，再得 $a = x_k$ 的概率有：<br>$$<br>\begin{aligned}<br>P(a = x_k)<br>&amp; = \sum_{i \ge k} P(x_i) \times \frac{1}{x_i} \\<br>&amp; = \sum_{i \ge k} \frac{6}{n (n + 1)(n + 2)} \\<br>&amp; =\frac{6 (n - k + 1)}{n (n + 1)(n + 2)} \\<br>\end{aligned}<br>$$<br>所以：<br>$$<br>\begin{aligned}<br>P(a = b)<br>&amp; = \sum_{i = 1}^n i \times P(a = x_i)^2 \\<br>&amp; = \sum_{i = 1}^n i \times (\frac{6 (n - i + 1)}{n (n + 1) (n + 2)})^2 \\<br>&amp; = \frac{36}{(n (n + 1)(n + 2))^2} \sum_{i = 1}^n i(n - i + 1)^2 \\<br>&amp; = \frac{3}{n (n + 2)}<br>\end{aligned}<br>$$<br>注意数据范围 $n$ 要开 <code>long long</code> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> LL P = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = (LL)res * x % P;</span><br><span class="line">        x = (LL)x * x %P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    n %= P;</span><br><span class="line">    <span class="keyword">if</span> (!n)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">qpow</span>(<span class="number">2</span>, P - <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        LL a = ((LL)(n + <span class="number">2</span>) * n % P - <span class="number">3</span> + P) % P;</span><br><span class="line">        LL b = (LL)(n + <span class="number">2</span>) * n % P * <span class="number">2</span> % P;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, (LL)<span class="built_in">qpow</span>(b , P - <span class="number">2</span>) * a % P);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 神仙数学，想复杂了&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="概率" scheme="https://dyd-true.github.io/tags/%E6%A6%82%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>多项式</title>
    <link href="https://dyd-true.github.io/2021/12/27/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    <id>https://dyd-true.github.io/2021/12/27/%E5%A4%9A%E9%A1%B9%E5%BC%8F/</id>
    <published>2021-12-27T09:23:05.000Z</published>
    <updated>2022-01-01T01:55:27.091Z</updated>
    
    <content type="html"><![CDATA[<p> 多项式没家桶</p><span id="more"></span><h1 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><ul><li>NTT</li><li>FFT</li><li>一定的数学</li></ul><h2 id="多项式乘法"><a href="#多项式乘法" class="headerlink" title="多项式乘法"></a>多项式乘法</h2><p>NTT/FFT即可</p><p>毒瘤卡常之预处理原根（然鹅不开O2有可能反向优化，慎用）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VIT vector<span class="meta-string">&lt;int&gt;</span>::iterator</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; g[N], _g[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span>, gn, mid, i, _gn, t, <span class="keyword">_t</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (P - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        _gn = <span class="built_in">qpow</span>(gn, P - <span class="number">2</span>);</span><br><span class="line">        t = <span class="keyword">_t</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; mid; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            g[mid].<span class="built_in">push_back</span>(t);</span><br><span class="line">            _g[mid].<span class="built_in">push_back</span>(<span class="keyword">_t</span>);</span><br><span class="line">            t = (LL)t * gn % P;</span><br><span class="line">            <span class="keyword">_t</span> = (LL)<span class="keyword">_t</span> * _gn % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> tot, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, mid, len, a, b;</span><br><span class="line">    VIT gn;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; r[i])</span><br><span class="line">            <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line">    <span class="keyword">for</span> (mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        gn = (op == <span class="number">1</span> ? g[mid].<span class="built_in">begin</span>() : _g[mid].<span class="built_in">begin</span>());</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; i += len)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; mid; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                a = x[i + j], b = (LL)gn[j] * x[i + j + mid] % P;</span><br><span class="line">                x[i + j] = (a + b) % P;</span><br><span class="line">                x[i + j + mid] = (a - b + P) % P;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    a = <span class="built_in">qpow</span>(tot, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        x[i] = (LL)x[i] * a % P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a>多项式求逆</h2><p>问题：</p><p><a href="https://www.luogu.com.cn/problem/P4238">板子</a></p><p>对于给定 $F (x)$ ，求出 $G(x)$ 使得 $ G(x)F(x) \equiv 1 \pmod {x^n}$ ，其中 $A(x) \equiv 1 \pmod {x^n}$ 指 $A(x)$ 次数低于 $n$ 的项只有常数为1，其余都为0，即 $A(x) =  1 + 0x + 0x^2 + 0x^3 + … + 0x^{n - 1} + a_nx^n + a_{n + 1}x^{n + 1} + …$ </p><p>做法：</p><p>考虑倍增，变形：<br>$$<br>\begin{aligned}<br>设G_0(x)满足:\\<br>&amp; G_0(x)F(x) \equiv 1 \pmod {x^{\lceil \frac{n}{2} \rceil}}\\<br>故:\\<br>&amp; G(x) - G_0(x) \equiv 0 \pmod {x^{\lceil \frac{n}{2} \rceil}}\\<br>&amp; (G(x) - G_0(x))^2 \equiv 0 \pmod {x^n}\\<br>&amp; G^2(x) - 2G(x)G_0(x) + G_0^2(x) \equiv 0 \pmod {x^n}\\<br>\because &amp; G(x)F(x) \equiv 1 \pmod {x^n}\\<br>\therefore &amp; G(x) - 2G_0(x) + G_0^2(x)F(x) \equiv 0 \pmod {x^n}\\<br> &amp; G(x) \equiv (2 - G_0(x)F(x))G_0(x) \pmod {x^n}<br>\end{aligned}<br>$$<br>注意特判常数项要有逆，然后倍增即可，时间 $O(n \log n)$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>, P = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> r[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = (LL)res * x % P;</span><br><span class="line">        x = (LL)x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> tot, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; r[i])</span><br><span class="line">            <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line">    <span class="keyword">int</span> mid, i, j, len, gn, g, a, b;</span><br><span class="line">    <span class="keyword">for</span> (mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (P - <span class="number">1</span>) / len);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">-1</span>)</span><br><span class="line">            gn = <span class="built_in">qpow</span>(gn, P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; i += len)</span><br><span class="line">        &#123;</span><br><span class="line">            g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; mid; ++j, g = (LL)g * gn % P)</span><br><span class="line">            &#123;</span><br><span class="line">                a = x[i + j], b = (LL)g * x[i + j + mid] % P;</span><br><span class="line">                x[i + j] = (a + b) % P;</span><br><span class="line">                x[i + j + mid] = (a - b + P) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">//逆变换记得除</span></span><br><span class="line">    gn = <span class="built_in">qpow</span>(tot, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        x[i] = (LL)x[i] * gn % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyinv</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> x[], <span class="keyword">int</span> y[])</span> <span class="comment">//将x求逆,答案为y</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="built_in">qpow</span>(x[<span class="number">0</span>], P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">polyinv</span>((len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, x, y);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ((len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>); i &lt; tot; i++)</span><br><span class="line">y[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = x[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        y[i] = (<span class="number">2</span> - (LL)t[i] * y[i] % P + P) % P * y[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    --n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] = (a[i] + P) % P;</span><br><span class="line">    <span class="built_in">polyinv</span>(n + <span class="number">1</span>, a, b); <span class="comment">//是长度,要加1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式除法和取模"><a href="#多项式除法和取模" class="headerlink" title="多项式除法和取模"></a>多项式除法和取模</h2><p>问题：</p><p><a href="https://www.luogu.com.cn/problem/P4512">板子</a></p><p>对于给定 $F(x), G(x)$ ，其中 $deg(F) \ge deg(G)$ ，不妨设 $deg(F) = n, deg(G) = m$ ，求 $Q(x), R(x)$ 使得 $F(x) = Q(x)G(x) + R(x)$ ，且 $deg(Q) = n - m, deg(R) = m - 1$ ，其中 $R(x)$ 最高位可以为0</p><p>做法：</p><p>对于多项式 $A(x)$ ，记 $A_r(x) = x^{deg(A)}A(\frac{1}{x})$ （其实就是把 $A$ 的系数翻转）</p><p>变形：<br>$$<br>\begin{aligned}<br>&amp; F(\frac{1}{x}) = Q(\frac{1}{x}) G(\frac{1}{x}) + R(\frac{1}{x})\\<br>&amp; x^n F(\frac{1}{x}) = x^{n -m} Q(\frac{1}{x}) x^m G(\frac{1}{x}) + x^{n - m + 1} x^{m - 1} R(\frac{1}{x})\\<br>&amp; F_r(x) = Q_r(x) G_r(x) + x^{n - m + 1} R_r(x)\\<br>&amp; F_r(x) \equiv Q_r(x) G_r(x) \pmod {x^{n - m + 1}}\\<br>&amp; Q_r(x) \equiv F_r(x) G_r^{-1}(x) \pmod {x^{n - m + 1}}<br>\end{aligned}<br>$$<br>多项式求逆得 $G_r^{-1}(x)$ ，多项式乘法得 $Q_r(x)$ ，计算即可得 $Q(x), R(x)$ ，时间还是 $O(n \log n)$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>, P = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> r[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = (LL)res * x % P;</span><br><span class="line">        x = (LL)x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> tot, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; r[i])</span><br><span class="line">            <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line">    <span class="keyword">int</span> mid, i, j, len, gn, g, a, b;</span><br><span class="line">    <span class="keyword">for</span> (mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (P - <span class="number">1</span>) / len);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">-1</span>)</span><br><span class="line">            gn = <span class="built_in">qpow</span>(gn, P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; i += len)</span><br><span class="line">        &#123;</span><br><span class="line">            g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; mid; ++j, g = (LL)g * gn % P)</span><br><span class="line">            &#123;</span><br><span class="line">                a = x[i + j], b = (LL)g * x[i + j + mid] % P;</span><br><span class="line">                x[i + j] = (a + b) % P;</span><br><span class="line">                x[i + j + mid] = (a - b + P) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    gn = <span class="built_in">qpow</span>(tot, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        x[i] = (LL)x[i] * gn % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyinv</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="built_in">qpow</span>(x[<span class="number">0</span>], P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">polyinv</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ((len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>); i &lt; tot; i++)</span><br><span class="line">y[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = x[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        y[i] = (<span class="number">2</span> - (LL)y[i] * t[i] % P + P) * y[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polydiv</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> n, <span class="keyword">int</span> y[], <span class="keyword">int</span> m, <span class="keyword">int</span> a[], <span class="keyword">int</span> b[])</span> <span class="comment">//x除以y,商a余b</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> ta[N], tb[N];</span><br><span class="line">    <span class="keyword">int</span> dt = n - m + <span class="number">1</span>, tot = <span class="number">1</span>, bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (n &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        ta[i] = tb[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//求逆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        ta[i] = y[m - i - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">polyinv</span>(dt, ta, tb); <span class="comment">//这里就不加1了</span></span><br><span class="line">    <span class="comment">//求乘积</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        ta[i] = x[n - i - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">ntt</span>(ta, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(tb, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        ta[i] = (LL)ta[i] * tb[i] %P;</span><br><span class="line">    <span class="built_in">ntt</span>(ta, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dt; ++i)</span><br><span class="line">        a[i] = ta[dt - i - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//求余式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        ta[i] = tb[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dt; ++i)</span><br><span class="line">        ta[i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        tb[i] = y[i];</span><br><span class="line">    <span class="built_in">ntt</span>(ta, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(tb, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        ta[i] = (LL)ta[i] * tb[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(ta, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; ++i)</span><br><span class="line">        b[i] = (x[i] - ta[i] + P) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N], as1[N], as2[N];</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] = (a[i] + P) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]), b[i] = (b[i] + P) % P;</span><br><span class="line">    <span class="built_in">polydiv</span>(a, n + <span class="number">1</span>, b, m + <span class="number">1</span>, as1, as2); <span class="comment">//多项式注意+1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - m; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, as1[i]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m - <span class="number">1</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, as2[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式开根"><a href="#多项式开根" class="headerlink" title="多项式开根"></a>多项式开根</h2><p>问题：</p><p><a href="https://www.luogu.com.cn/problem/P5205">板子</a></p><p>给定 $F(x)$ ，求 $G(x)$ 满足 $G^2(x) \equiv F(x) \pmod {x^n}$ </p><p>做法：</p><p>当然可以多项式快速幂求 $F^{\frac{1}{2}}(x)$ </p><p>也可以考虑倍增，变形：<br>$$<br>\begin{aligned}<br>设G_0(x)满足:\\<br>&amp; G_0^2(x) \equiv F(x) \pmod {x^{\lceil \frac{n}{2} \rceil}}\\<br>故:\\<br>&amp; G^2(x) - G_0^2(x) \equiv 0 \pmod {x^{\lceil \frac{n}{2} \rceil}}\\<br>&amp; (G(x) + G_0(x)) (G(x) - G_0(x)) \equiv 0 \pmod {x^{\lceil \frac{n}{2} \rceil}}\\<br>&amp; G(x) - G_0(x) \equiv 0 \pmod {x^{\lceil \frac{n}{2} \rceil}}\\<br>&amp; G^2(x) - 2G(x)G_0(x) + G_0^2(x) \equiv 0 \pmod {x^n}\\<br>&amp; F(x) - 2G(x) G_0(x) + G_0^2(x) \equiv 0 \pmod {x^n}\\<br> &amp; G(x) \equiv \frac{G_0^2(x) + F(x)}{2G_0(x)} \pmod {x^n}<br>\end{aligned}<br>$$<br>边界条件是常数项必须是模 $P$ 的二次剩余，时间 $O(n \log n)$ </p><p>代码懒得打了，反正<strong>次幂也行</strong></p><h2 id="牛顿迭代"><a href="#牛顿迭代" class="headerlink" title="牛顿迭代"></a>牛顿迭代</h2><p>牛顿是一种思考的方法，多项式的题很多都用倍增，但每一道题都手推式子太过痛苦，于是，我们可以（<del>更痛苦的</del>）推出式子</p><p>问题：</p><p>对于给定 $F(x)$ ，求 $G(x)$ ，使 $F(G(x)) \equiv 0 \pmod {x^n}$ </p><p>做法：</p><p>推式子（<del>啊啊啊我要疯了</del>）：</p><p>呃……突然发现<strong>康托展开</strong>我不会，推个寂寞，直接给结论：<br>$$<br>G(x) \equiv G_0(x) - \frac{F(G_0(x))}{F’(G_0(x))} \pmod {x^n}<br>$$</p><h2 id="多项式求导和积分"><a href="#多项式求导和积分" class="headerlink" title="多项式求导和积分"></a>多项式求导和积分</h2><p>来两个简单的，直接算就行了</p><p>求导：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">    res[i - <span class="number">1</span>] = (LL)x[i] * i % P;</span><br><span class="line">res[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>积分：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逆元可以预处理</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    res[i] = (LL)x[i - <span class="number">1</span>] * <span class="built_in">inv</span>(i) % P;</span><br><span class="line">res[<span class="number">0</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="多项式对数"><a href="#多项式对数" class="headerlink" title="多项式对数"></a>多项式对数</h2><p>问题：</p><p><a href="https://www.luogu.com.cn/problem/P4725">板子</a></p><p>对于给定 $F(x)$ ，求出 $G(x)$ 使得 $G(x) \equiv \ln(F(x)) \pmod {x^n}$ </p><p>做法：</p><p>求导，有 $G’(x) \equiv \frac{F’(x)}{F(x)} \pmod {x^n}$ </p><p>多项式求导得 $F’(x)$ ，求逆得 $\frac{1}{F(x)}$ ，乘法得 $G’(x)$ ，积分出 $G(x)$ ，时间 $O(n \log n)$ ，注意要保证常数项 $f_0 = 1$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>, P = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> r[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = (LL)res * x % P;</span><br><span class="line">        x = (LL)x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> tot, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, mid, len, gn, g, a, b;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; r[i])</span><br><span class="line">            <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line">    <span class="keyword">for</span> (mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (P - <span class="number">1</span>) / len);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">-1</span>)</span><br><span class="line">            gn = <span class="built_in">qpow</span>(gn, P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; i += len)</span><br><span class="line">        &#123;</span><br><span class="line">            g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; mid; ++j, g = (LL)g * gn % P)</span><br><span class="line">            &#123;</span><br><span class="line">                a = x[i + j], b = (LL)g * x[i + j + mid] % P;</span><br><span class="line">                x[i + j] = (a + b) % P;</span><br><span class="line">                x[i + j + mid] = (a - b + P) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    gn = <span class="built_in">qpow</span>(tot, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        x[i] = (LL)x[i] * gn % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyinv</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="built_in">qpow</span>(x[<span class="number">0</span>], P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">polyinv</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ((len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>); i &lt; tot; i++)</span><br><span class="line">y[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = x[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        y[i] = (<span class="number">2</span> - (LL)y[i] * t[i] % P + P) * y[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polydif</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span> <span class="comment">//differentiate</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        y[i - <span class="number">1</span>] = (LL)x[i] * i % P;</span><br><span class="line">    y[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyint</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span> <span class="comment">//integral</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = (LL)x[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, P - <span class="number">2</span>) % P;</span><br><span class="line">    y[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyln</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N];</span><br><span class="line">    <span class="built_in">polydif</span>(x, a, len);</span><br><span class="line">    <span class="built_in">polyinv</span>(x, b, len);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(b, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        a[i] = (LL)a[i] * b[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">polyint</span>(a, y, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> n, a[N], b[N];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] = (a[i] + P) % P;</span><br><span class="line">    <span class="built_in">polyln</span>(a, b, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项指数"><a href="#多项指数" class="headerlink" title="多项指数"></a>多项指数</h2><p>问题：</p><p><a href="https://www.luogu.com.cn/problem/P4726">板子</a></p><p>对于给定 $F(x)$ ，求 $G(x)$ 使得 $G(x) \equiv e^{F(x)} \pmod {x^n}$ </p><p>做法：</p><p>两边取对数得， $\ln(G(x)) \equiv F(x) \pmod {x^n}$ </p><p>由牛顿迭代：<br>$$<br>\begin{aligned}<br>G(x) \equiv G_0(x) - \frac{\ln(G_0(x)) - F(x)}{\frac{1}{G_0(x)}} \pmod {x^n}\\<br>G(x) \equiv (1 - \ln(G_0(x)) + F(x)) G_0(x) \pmod {x^n}\\<br>\end{aligned}<br>$$</p><p>时间 $O(n \log n)$ ，注意一定要有 $f_0 = 0$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>, P = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> r[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = (LL)res * x % P;</span><br><span class="line">        x = (LL)x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> tot, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, mid, len, gn, g, a, b;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; r[i])</span><br><span class="line">            <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line">    <span class="keyword">for</span> (mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (P - <span class="number">1</span>) / len);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">-1</span>)</span><br><span class="line">            gn = <span class="built_in">qpow</span>(gn, P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; i += len)</span><br><span class="line">        &#123;</span><br><span class="line">            g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; mid; ++j, g = (LL)g * gn % P)</span><br><span class="line">            &#123;</span><br><span class="line">                a = x[i + j], b = (LL)g * x[i + j + mid] % P;</span><br><span class="line">                x[i + j] = (a + b) % P;</span><br><span class="line">                x[i + j + mid] = (a - b + P) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    gn = <span class="built_in">qpow</span>(tot, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        x[i] = (LL)x[i] * gn % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyinv</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="built_in">qpow</span>(x[<span class="number">0</span>], P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">polyinv</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ((len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>); i &lt; tot; i++)</span><br><span class="line">y[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = x[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        y[i] = (<span class="number">2</span> - (LL)y[i] * t[i] % P + P) * y[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polydif</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        y[i - <span class="number">1</span>] = (LL)x[i] * i % P;</span><br><span class="line">    y[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyint</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = (LL)x[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, P - <span class="number">2</span>) % P;</span><br><span class="line">    y[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyln</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N];</span><br><span class="line">    <span class="built_in">polydif</span>(x, a, len);</span><br><span class="line">    <span class="built_in">polyinv</span>(x, b, len);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">a[i] = b[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(b, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        a[i] = (LL)a[i] * b[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">a[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyint</span>(a, y, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyexp</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="built_in">polyexp</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyln</span>(y, t, len);</span><br><span class="line">    t[<span class="number">0</span>] = (x[<span class="number">0</span>] + <span class="number">1</span> - t[<span class="number">0</span>] + P) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = (x[i] - t[i] + P) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        y[i] = (LL)y[i] * t[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> n, a[N], b[N];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] = (a[i] + P) % P;</span><br><span class="line">    <span class="built_in">polyexp</span>(a, b, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式次幂"><a href="#多项式次幂" class="headerlink" title="多项式次幂"></a>多项式次幂</h2><p>问题：</p><p><a href="https://www.luogu.com.cn/problem/P5273">板子</a></p><p>对于给定 $F(x), k$ ，求 $G(x)$ 使得 $G(x) \equiv F^k(x) \pmod {x^n}$ </p><p>做法：</p><p>推式子：<br>$$<br>\begin{aligned}<br>&amp; G(x) \equiv F^k(x) \pmod {x^n}\\<br>&amp; \ln(G(x)) \equiv k \ln(F(x)) \pmod {x^n}\\<br>\end{aligned}<br>$$<br>对 $F(x)$ 取 $\ln$ ，乘 $k$ 以后 $\exp$ 即可</p><p>但是并不保证常数项为1，则求 $\exp$ 时边界不一定为1了，不能直接取对数，所以提公因式，设 $r$ 为 $F(x)$ 的第一个非0项次数，提取公因式 $a_rx^r$ 就可以保证最低位是1了</p><p>考虑提公因式对答案的影响：我们提了公因式后，最后答案的前 $k * r$ 项都为0，后面的项就是我们求出来的，最后一起乘一个 $a_r^m$ 即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>, P = <span class="number">998244353</span>, K = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> r[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = (LL)res * x % P;</span><br><span class="line">        x = (LL)x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> tot, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, mid, len, gn, g, a, b;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; r[i])</span><br><span class="line">            <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line">    <span class="keyword">for</span> (mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (P - <span class="number">1</span>) / len);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">-1</span>)</span><br><span class="line">            gn = <span class="built_in">qpow</span>(gn, P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; i += len)</span><br><span class="line">        &#123;</span><br><span class="line">            g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; mid; ++j, g = (LL)g * gn % P)</span><br><span class="line">            &#123;</span><br><span class="line">                a = x[i + j], b = (LL)g * x[i + j + mid] % P;</span><br><span class="line">                x[i + j] = (a + b) % P;</span><br><span class="line">                x[i + j + mid] = (a - b + P) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    gn = <span class="built_in">qpow</span>(tot, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        x[i] = (LL)x[i] * gn % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyinv</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="built_in">qpow</span>(x[<span class="number">0</span>], P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">polyinv</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ((len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>); i &lt; tot; i++)</span><br><span class="line">y[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = x[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        y[i] = (<span class="number">2</span> - (LL)y[i] * t[i] % P + P) * y[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polydif</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        y[i - <span class="number">1</span>] = (LL)x[i] * i % P;</span><br><span class="line">    y[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyint</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = (LL)x[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, P - <span class="number">2</span>) % P;</span><br><span class="line">    y[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyln</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N];</span><br><span class="line">    <span class="built_in">polydif</span>(x, a, len);</span><br><span class="line">    <span class="built_in">polyinv</span>(x, b, len);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">a[i] = b[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(b, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        a[i] = (LL)a[i] * b[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">a[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyint</span>(a, y, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyexp</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="built_in">polyexp</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyln</span>(y, t, len);</span><br><span class="line">    t[<span class="number">0</span>] = (x[<span class="number">0</span>] + <span class="number">1</span> - t[<span class="number">0</span>] + P) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = (x[i] - t[i] + P) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        y[i] = (LL)y[i] * t[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    k1是模P后的次数</span></span><br><span class="line"><span class="comment">    k2是模P-1的,用欧拉定理求第r项系数的k次幂</span></span><br><span class="line"><span class="comment">    k3存真实的k的一部分,若r*k3 &gt;= n说明前n项全是0</span></span><br><span class="line"><span class="comment">    num记录r</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polypow</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> k1, <span class="keyword">int</span> k2, <span class="keyword">int</span> k3, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!x[num] &amp;&amp; num &lt; len)</span><br><span class="line">        ++num;</span><br><span class="line">    <span class="keyword">if</span> ((LL)num * k3 &gt;= len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            y[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">int</span> x0 = x[num], inv = <span class="built_in">qpow</span>(x0, P - <span class="number">2</span>);</span><br><span class="line">    len -= num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        x[i] = (LL)x[i + num] * inv % P;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        x[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyln</span>(x, t, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = (LL)t[i] * k1 % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyexp</span>(t, y, len);</span><br><span class="line">    len += num;</span><br><span class="line">    x0 = <span class="built_in">qpow</span>(x0, k2);</span><br><span class="line">    num = num * k3;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= num; --i)</span><br><span class="line">        y[i] = (LL)y[i - num] * x0 % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = num - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N];</span><br><span class="line">    STC <span class="keyword">char</span> k[K];</span><br><span class="line">    <span class="keyword">int</span> n, k1, k2, k3;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>, &amp;n, k + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] = (a[i] + P) % P;</span><br><span class="line">    k1 = k2 = k3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="built_in">strlen</span>(k + <span class="number">1</span>); i &lt;= l; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        k1 = ((LL)k1 * <span class="number">10</span> + (k[i] ^ <span class="number">48</span>)) % P;</span><br><span class="line">        k2 = ((LL)k2 * <span class="number">10</span> + (k[i] ^ <span class="number">48</span>)) % (P - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ((LL)k3 * <span class="number">10</span> + (k[i] ^ <span class="number">48</span>) &lt;= P)</span><br><span class="line">            k3 = (LL)k3 * <span class="number">10</span> + (k[i] ^ <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">polypow</span>(a, b, k1, k2, k3, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式开根2"><a href="#多项式开根2" class="headerlink" title="多项式开根2"></a>多项式开根2</h2><p>前置：Cipolla算法</p><p>如果 $y^2 \equiv x \pmod P$ ，则称 $x$ 为模 $P$ 的二次剩余（然鹅我们要求的是 $y$ ）</p><p>而对于不保证 $f_0 = 0$ 的开根，我们必须要求出 $f_0$ 做 $x$ 时的 $y$ </p><p>下面是一堆我听不懂的思路</p><p>可以找一个 $t$ ，使得 $t^2 - x$ 为非二次剩余，设 $w = t^2 - x$ ，则 $y = (t + \sqrt{w})^{\frac{P + 1}{2}}$ ，这里考虑把 $w$ 定义为负数中的 $i$ ，随机选 $t$ 尝试即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRG default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID uniform_int_distribution</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>, P = <span class="number">998244353</span>, K = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">namespace</span> Cipolla</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    DRG e&#123;<span class="number">114514</span>&#125;;</span><br><span class="line">    <span class="function">UID&lt;<span class="keyword">int</span>&gt; <span class="title">u</span><span class="params">(<span class="number">1</span>, P - <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex t) <span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (Complex)&#123;((LL)x * t.x % P + (LL)y * t.y % P * w % P) % P, ((LL)x * t.y % P + (LL)y * t.x % P) % P&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">Complex <span class="title">Cqpow</span><span class="params">(Complex x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Complex res = (Complex)&#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span> (y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                res = res * x;</span><br><span class="line">            x = x * x;</span><br><span class="line">            y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Csqrt</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">qpow</span>(x, (P - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) == P - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">233</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t = <span class="built_in">u</span>(e);</span><br><span class="line">            w = ((LL)t * t % P - x + P) % P;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">qpow</span>(w, (P - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) == P - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="built_in">Cqpow</span>((Complex)&#123;t, <span class="number">1</span>&#125;, (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>).x;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(res, P - res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Cipolla::Csqrt;</span><br><span class="line"><span class="keyword">int</span> r[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = (LL)res * x % P;</span><br><span class="line">        x = (LL)x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> tot, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, mid, len, gn, g, a, b;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; r[i])</span><br><span class="line">            <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line">    <span class="keyword">for</span> (mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (P - <span class="number">1</span>) / len);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">-1</span>)</span><br><span class="line">            gn = <span class="built_in">qpow</span>(gn, P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; i += len)</span><br><span class="line">        &#123;</span><br><span class="line">            g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; mid; ++j, g = (LL)g * gn % P)</span><br><span class="line">            &#123;</span><br><span class="line">                a = x[i + j], b = (LL)g * x[i + j + mid] % P;</span><br><span class="line">                x[i + j] = (a + b) % P;</span><br><span class="line">                x[i + j + mid] = (a - b + P) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    gn = <span class="built_in">qpow</span>(tot, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        x[i] = (LL)x[i] * gn % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyinv</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="built_in">qpow</span>(x[<span class="number">0</span>], P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">polyinv</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ((len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>); i &lt; tot; i++)</span><br><span class="line">y[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = x[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        y[i] = (<span class="number">2</span> - (LL)y[i] * t[i] % P + P) * y[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polydif</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        y[i - <span class="number">1</span>] = (LL)x[i] * i % P;</span><br><span class="line">    y[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyint</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = (LL)x[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, P - <span class="number">2</span>) % P;</span><br><span class="line">    y[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyln</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N];</span><br><span class="line">    <span class="built_in">polydif</span>(x, a, len);</span><br><span class="line">    <span class="built_in">polyinv</span>(x, b, len);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">a[i] = b[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(b, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        a[i] = (LL)a[i] * b[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">a[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyint</span>(a, y, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyexp</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="built_in">polyexp</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyln</span>(y, t, len);</span><br><span class="line">    t[<span class="number">0</span>] = (x[<span class="number">0</span>] + <span class="number">1</span> - t[<span class="number">0</span>] + P) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = (x[i] - t[i] + P) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        y[i] = (LL)y[i] * t[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polypow</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> k1, <span class="keyword">int</span> k2, <span class="keyword">int</span> k3, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!x[num] &amp;&amp; num &lt; len)</span><br><span class="line">        ++num;</span><br><span class="line">    <span class="keyword">if</span> ((LL)num * k3 &gt;= len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            y[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">int</span> x0 = x[num], inv = <span class="built_in">qpow</span>(x0, P - <span class="number">2</span>);</span><br><span class="line">    len -= num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        x[i] = (LL)x[i + num] * inv % P;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        x[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyln</span>(x, t, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = (LL)t[i] * k1 % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyexp</span>(t, y, len);</span><br><span class="line">    len += num;</span><br><span class="line">    x0 = <span class="built_in">qpow</span>(x0, k2);</span><br><span class="line">    num = num * k3;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= num; --i)</span><br><span class="line">        y[i] = (LL)y[i - num] * x0 % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = num - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polysqrt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sq = <span class="built_in">Csqrt</span>(x[<span class="number">0</span>]), inv = <span class="built_in">qpow</span>(x[<span class="number">0</span>], P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        x[i] = (LL)x[i] * inv % P;</span><br><span class="line">    <span class="built_in">polypow</span>(x, y, (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, <span class="number">1</span>, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = (LL)y[i] * sq % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] = (a[i] + P) % P;</span><br><span class="line">    <span class="built_in">polysqrt</span>(a, b, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式三角函数"><a href="#多项式三角函数" class="headerlink" title="多项式三角函数"></a>多项式三角函数</h2><p>问题：</p><p><a href="https://www.luogu.com.cn/problem/P5264">板子？</a></p><p>对于给定 $F(x)$ ，求 $\sin F(x), \cos F(x), \tan F(x)$ </p><p>做法：<br>$$<br>\begin{aligned}<br>考虑欧拉公式： \\<br>&amp; e^{i \theta} = \cos \theta + i \sin \theta \\<br>故: \\<br>&amp; e^{i x} = \cos x + i \sin x \\<br>&amp; e^{i (-x)} = \cos (-x) + i \sin (-x) = \cos x - i \sin x \\<br>所以: \\<br>&amp; \cos x = \frac{e^{i x} + e^{-i x}}{2} \\<br>&amp; \sin x = \frac{e^{i x} - e^{-i x}}{2i} \\<br>待入f(x): \\<br>&amp; \cos F(x) = \frac{\exp(i F(x)) + \exp(-iF(x))}{2} \\<br>&amp; \sin F(x) = \frac{\exp(i F(x)) - \exp(-iF(x))}{2i} \\<br>又因为: \\<br>&amp; i^2 \equiv -1 \pmod P \\<br>所以: \\<br>&amp; i^2 \equiv P - 1 \pmod P<br>\end{aligned}<br>$$<br>做一遍二次剩余求出 $i$ ，照着计算即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRG default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID uniform_int_distribution</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>, P = <span class="number">998244353</span>, K = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> img = <span class="number">86583718</span>; <span class="comment">//直接计算出了二次剩余</span></span><br><span class="line"><span class="comment">//封装时记得清空数组，要重复使用</span></span><br><span class="line"><span class="keyword">namespace</span> Cipolla</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    DRG e&#123;<span class="number">114514</span>&#125;;</span><br><span class="line">    <span class="function">UID&lt;<span class="keyword">int</span>&gt; <span class="title">u</span><span class="params">(<span class="number">1</span>, P - <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex t) <span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (Complex)&#123;((LL)x * t.x % P + (LL)y * t.y % P * w % P) % P, ((LL)x * t.y % P + (LL)y * t.x % P) % P&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">Complex <span class="title">Cqpow</span><span class="params">(Complex x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Complex res = (Complex)&#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span> (y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                res = res * x;</span><br><span class="line">            x = x * x;</span><br><span class="line">            y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Csqrt</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">qpow</span>(x, (P - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) == P - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">233</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t = <span class="built_in">u</span>(e);</span><br><span class="line">            w = ((LL)t * t % P - x + P) % P;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">qpow</span>(w, (P - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) == P - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="built_in">Cqpow</span>((Complex)&#123;t, <span class="number">1</span>&#125;, (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>).x;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(res, P - res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Cipolla::Csqrt;</span><br><span class="line"><span class="keyword">int</span> r[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = (LL)res * x % P;</span><br><span class="line">        x = (LL)x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> tot, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, mid, len, gn, g, a, b;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; r[i])</span><br><span class="line">            <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line">    <span class="keyword">for</span> (mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (P - <span class="number">1</span>) / len);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">-1</span>)</span><br><span class="line">            gn = <span class="built_in">qpow</span>(gn, P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; i += len)</span><br><span class="line">        &#123;</span><br><span class="line">            g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; mid; ++j, g = (LL)g * gn % P)</span><br><span class="line">            &#123;</span><br><span class="line">                a = x[i + j], b = (LL)g * x[i + j + mid] % P;</span><br><span class="line">                x[i + j] = (a + b) % P;</span><br><span class="line">                x[i + j + mid] = (a - b + P) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    gn = <span class="built_in">qpow</span>(tot, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        x[i] = (LL)x[i] * gn % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyinv</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="built_in">qpow</span>(x[<span class="number">0</span>], P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">polyinv</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ((len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>); i &lt; tot; i++)</span><br><span class="line">y[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = x[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        y[i] = (<span class="number">2</span> - (LL)y[i] * t[i] % P + P) * y[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polydif</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        y[i - <span class="number">1</span>] = (LL)x[i] * i % P;</span><br><span class="line">    y[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyint</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = (LL)x[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, P - <span class="number">2</span>) % P;</span><br><span class="line">    y[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyln</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N];</span><br><span class="line">    <span class="built_in">polydif</span>(x, a, len);</span><br><span class="line">    <span class="built_in">polyinv</span>(x, b, len);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">a[i] = b[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(b, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        a[i] = (LL)a[i] * b[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">a[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyint</span>(a, y, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyexp</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="built_in">polyexp</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyln</span>(y, t, len);</span><br><span class="line">    t[<span class="number">0</span>] = (x[<span class="number">0</span>] + <span class="number">1</span> - t[<span class="number">0</span>] + P) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = (x[i] - t[i] + P) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        y[i] = (LL)y[i] * t[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polypow</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> k1, <span class="keyword">int</span> k2, <span class="keyword">int</span> k3, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!x[num] &amp;&amp; num &lt; len)</span><br><span class="line">        ++num;</span><br><span class="line">    <span class="keyword">if</span> ((LL)num * k3 &gt;= len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            y[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">int</span> x0 = x[num], inv = <span class="built_in">qpow</span>(x0, P - <span class="number">2</span>);</span><br><span class="line">    len -= num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        x[i] = (LL)x[i + num] * inv % P;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        x[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyln</span>(x, t, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = (LL)t[i] * k1 % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyexp</span>(t, y, len);</span><br><span class="line">    len += num;</span><br><span class="line">    x0 = <span class="built_in">qpow</span>(x0, k2);</span><br><span class="line">    num = num * k3;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= num; --i)</span><br><span class="line">        y[i] = (LL)y[i - num] * x0 % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = num - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polysqrt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sq = <span class="built_in">Csqrt</span>(x[<span class="number">0</span>]), inv = <span class="built_in">qpow</span>(x[<span class="number">0</span>], P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        x[i] = (LL)x[i] * inv % P;</span><br><span class="line">    <span class="built_in">polypow</span>(x, y, (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, <span class="number">1</span>, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = (LL)y[i] * sq % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意模数不为998244353是要重新算img</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polycos</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> t[N], a[N], b[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = (LL)x[i] * img % P;</span><br><span class="line">    <span class="built_in">polyexp</span>(t, a, len);</span><br><span class="line">    <span class="built_in">polyinv</span>(a, b, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        a[i] = (a[i] + b[i]) % P;</span><br><span class="line">    <span class="keyword">int</span> inv = <span class="built_in">qpow</span>(<span class="number">2</span>, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = (LL)a[i] * inv % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polysin</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> t[N], a[N], b[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = (LL)x[i] * img % P;</span><br><span class="line">    <span class="built_in">polyexp</span>(t, a, len);</span><br><span class="line">    <span class="built_in">polyinv</span>(a, b, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        a[i] = (a[i] - b[i] + P) % P;</span><br><span class="line">    <span class="keyword">int</span> inv = <span class="built_in">qpow</span>(img &lt;&lt; <span class="number">1</span>, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = (LL)a[i] * inv % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polytan</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> t[N], a[N], b[N];</span><br><span class="line">    <span class="built_in">polysin</span>(x, a, len);</span><br><span class="line">    <span class="built_in">polycos</span>(x, b, len);</span><br><span class="line">    <span class="built_in">polyinv</span>(b, t, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = a[i] * t[i] % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N];</span><br><span class="line">    <span class="keyword">int</span> n, op;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;op);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] = (a[i] + P) % P;</span><br><span class="line">    op ? <span class="built_in">polycos</span>(a, b, n) : <span class="built_in">polysin</span>(a, b, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式反三角函数"><a href="#多项式反三角函数" class="headerlink" title="多项式反三角函数"></a>多项式反三角函数</h2><p>问题：</p><p><a href="https://www.luogu.com.cn/problem/P5265">板子？</a></p><p>对于给定 $F(x)$ ，求 $\arcsin F(x), \arccos F(x), \arctan F(x)$ </p><p>做法：</p><p>直接积分得<br>$$<br>\begin{aligned}<br>&amp; \arcsin F(x) =\int \frac{F’(x)}{\sqrt{1 - F^2(x)}} dx \\<br>&amp; \arccos F(x) = - \int \frac{F’(x)}{\sqrt{1 - F^2(x)}} dx \\<br>&amp; \arctan F(x) = \int \frac{F’(x)}{1 + F^2(x)} dx \\<br>\end{aligned}<br>$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRG default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID uniform_int_distribution</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>, P = <span class="number">998244353</span>, K = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> img = <span class="number">86583718</span>; <span class="comment">//直接计算出了二次剩余</span></span><br><span class="line"><span class="comment">//封装时记得清空数组，要重复使用</span></span><br><span class="line"><span class="keyword">namespace</span> Cipolla</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    DRG e&#123;<span class="number">114514</span>&#125;;</span><br><span class="line">    <span class="function">UID&lt;<span class="keyword">int</span>&gt; <span class="title">u</span><span class="params">(<span class="number">1</span>, P - <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex t) <span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (Complex)&#123;((LL)x * t.x % P + (LL)y * t.y % P * w % P) % P, ((LL)x * t.y % P + (LL)y * t.x % P) % P&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">Complex <span class="title">Cqpow</span><span class="params">(Complex x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Complex res = (Complex)&#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span> (y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                res = res * x;</span><br><span class="line">            x = x * x;</span><br><span class="line">            y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Csqrt</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">qpow</span>(x, (P - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) == P - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">233</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t = <span class="built_in">u</span>(e);</span><br><span class="line">            w = ((LL)t * t % P - x + P) % P;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">qpow</span>(w, (P - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) == P - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="built_in">Cqpow</span>((Complex)&#123;t, <span class="number">1</span>&#125;, (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>).x;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(res, P - res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Cipolla::Csqrt;</span><br><span class="line"><span class="keyword">int</span> r[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = (LL)res * x % P;</span><br><span class="line">        x = (LL)x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> tot, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, mid, len, gn, g, a, b;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; r[i])</span><br><span class="line">            <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line">    <span class="keyword">for</span> (mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (P - <span class="number">1</span>) / len);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">-1</span>)</span><br><span class="line">            gn = <span class="built_in">qpow</span>(gn, P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; i += len)</span><br><span class="line">        &#123;</span><br><span class="line">            g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; mid; ++j, g = (LL)g * gn % P)</span><br><span class="line">            &#123;</span><br><span class="line">                a = x[i + j], b = (LL)g * x[i + j + mid] % P;</span><br><span class="line">                x[i + j] = (a + b) % P;</span><br><span class="line">                x[i + j + mid] = (a - b + P) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    gn = <span class="built_in">qpow</span>(tot, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        x[i] = (LL)x[i] * gn % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polymul</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(x, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        x[i] = (LL)x[i] * y[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(x, tot, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyinv</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="built_in">qpow</span>(x[<span class="number">0</span>], P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">polyinv</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ((len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>); i &lt; tot; i++)</span><br><span class="line">y[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = x[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        y[i] = (<span class="number">2</span> - (LL)y[i] * t[i] % P + P) * y[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polydif</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        y[i - <span class="number">1</span>] = (LL)x[i] * i % P;</span><br><span class="line">    y[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyint</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = (LL)x[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, P - <span class="number">2</span>) % P;</span><br><span class="line">    y[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyln</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N];</span><br><span class="line">    <span class="built_in">polydif</span>(x, a, len);</span><br><span class="line">    <span class="built_in">polyinv</span>(x, b, len);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">a[i] = b[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(b, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        a[i] = (LL)a[i] * b[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">a[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyint</span>(a, y, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; i++)</span><br><span class="line">y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyexp</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="built_in">polyexp</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyln</span>(y, t, len);</span><br><span class="line">    t[<span class="number">0</span>] = (x[<span class="number">0</span>] + <span class="number">1</span> - t[<span class="number">0</span>] + P) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = (x[i] - t[i] + P) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        y[i] = (LL)y[i] * t[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polypow</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> k1, <span class="keyword">int</span> k2, <span class="keyword">int</span> k3, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!x[num] &amp;&amp; num &lt; len)</span><br><span class="line">        ++num;</span><br><span class="line">    <span class="keyword">if</span> ((LL)num * k3 &gt;= len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            y[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    STC <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">int</span> x0 = x[num], inv = <span class="built_in">qpow</span>(x0, P - <span class="number">2</span>);</span><br><span class="line">    len -= num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        x[i] = (LL)x[i + num] * inv % P;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        x[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyln</span>(x, t, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = (LL)t[i] * k1 % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        t[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyexp</span>(t, y, len);</span><br><span class="line">    len += num;</span><br><span class="line">    x0 = <span class="built_in">qpow</span>(x0, k2);</span><br><span class="line">    num = num * k3;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= num; --i)</span><br><span class="line">        y[i] = (LL)y[i - num] * x0 % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = num - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polysqrt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sq = <span class="built_in">Csqrt</span>(x[<span class="number">0</span>]), inv = <span class="built_in">qpow</span>(x[<span class="number">0</span>], P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        x[i] = (LL)x[i] * inv % P;</span><br><span class="line">    <span class="built_in">polypow</span>(x, y, (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, <span class="number">1</span>, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = (LL)y[i] * sq % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意模数不为998244353是要重新算img</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polycos</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> t[N], a[N], b[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = (LL)x[i] * img % P;</span><br><span class="line">    <span class="built_in">polyexp</span>(t, a, len);</span><br><span class="line">    <span class="built_in">polyinv</span>(a, b, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        a[i] = (a[i] + b[i]) % P;</span><br><span class="line">    <span class="keyword">int</span> inv = <span class="built_in">qpow</span>(<span class="number">2</span>, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = (LL)a[i] * inv % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polysin</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> t[N], a[N], b[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        t[i] = (LL)x[i] * img % P;</span><br><span class="line">    <span class="built_in">polyexp</span>(t, a, len);</span><br><span class="line">    <span class="built_in">polyinv</span>(a, b, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        a[i] = (a[i] - b[i] + P) % P;</span><br><span class="line">    <span class="keyword">int</span> inv = <span class="built_in">qpow</span>(img &lt;&lt; <span class="number">1</span>, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = (LL)a[i] * inv % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polytan</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> t[N], a[N], b[N];</span><br><span class="line">    <span class="built_in">polysin</span>(x, a, len);</span><br><span class="line">    <span class="built_in">polycos</span>(x, b, len);</span><br><span class="line">    <span class="built_in">polyinv</span>(b, t, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = a[i] * t[i] % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyasin</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N], c[N];</span><br><span class="line">    <span class="built_in">polydif</span>(x, a, len);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(x, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        b[i] = (<span class="number">1</span> - (LL)x[i] * x[i]% P + P) % P;</span><br><span class="line">    <span class="built_in">ntt</span>(b, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        b[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polysqrt</span>(b, c, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        b[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyinv</span>(c, b, len);</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(b, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        a[i] = (LL)a[i] * b[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">polyint</span>(a, y, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyacos</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">polyasin</span>(x, y, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        y[i] = y[i] ? P - y[i] : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polyatan</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N], c[N];</span><br><span class="line">    <span class="built_in">polydif</span>(x, a, len);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(x, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        b[i] = (<span class="number">1</span> + (LL)x[i] * x[i]% P) % P;</span><br><span class="line">    <span class="built_in">ntt</span>(b, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++i)</span><br><span class="line">        b[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">polyinv</span>(b, c, len);</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(c, tot, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        a[i] = (LL)a[i] * c[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(a, tot, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">polyint</span>(a, y, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N], b[N];</span><br><span class="line">    <span class="keyword">int</span> n, op;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;op);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] = (a[i] + P) % P;</span><br><span class="line">    op ? <span class="built_in">polyatan</span>(a, b, n) : <span class="built_in">polyasin</span>(a, b, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拉格朗日反演"><a href="#拉格朗日反演" class="headerlink" title="拉格朗日反演"></a>拉格朗日反演</h2><p>不造有啥用，给个式子吧：</p><p>若两个多项式 $F(x), G(x)$ 满足常数项为0且1次项不为0，且两者互为复合</p><p>逆，即 $G(F(x)) = x$ （或者 $F(G(x)) = x$ ，它们是等价的），则有：<br>$$<br>\begin{aligned}<br>[x^n] F(x)<br>&amp; = \frac{1}{n} [x^{-1}] \frac{1}{G^n(x)} \\<br>&amp; = \frac{1}{n} [x^{n - 1}] (\frac{x}{G(x)})^n<br>\end{aligned}<br>$$<br>简证：<br>$$<br>\begin{aligned}<br>\sum_{i = 0}^{n - 1} a_i G^i(x) &amp; = x \\<br>\sum_{i = 0}^{n - 1} a_i i G^{i - 1}(x) G’(x) &amp; = 1 \\<br>\sum_{i = 0}^{n - 1} a_i i G^{i - n - 1}(x) G’(x) &amp; = \frac{1}{G^n(x)} \\<br>[x^{-1}] \sum_{i = 0}^{n - 1} a_i i G^{i - n - 1}(x) G’(x) &amp; = [x^{-1}] \frac{1}{G^n(x)} \\<br>对于 i \ne n : \\<br>G^{i - n - 1}(x) G’(x) &amp; = \frac{1}{i - n} (G^{i - n}(x))’ \\<br>求导, x^{-1} 系数为 0, 所以只考虑 i = n : \\<br>[x^{-1}] G^{-1}(x) G’(x) &amp; = 1 \\<br>[x^n] F(x) &amp; = \frac{1}{n} [x^{-1}] \frac{1}{G^n(x)} \\<br>\end{aligned}<br>$$</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>由于那么多东西烦的很，于是封装了</p><p>千万别打 <code>class</code> 和shit一样，我用的 <code>namespace</code> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRG default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID uniform_int_distribution</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">mod, quadratic residue, original root</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Remember const int is faster than int</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">If you want to change, remember</span></span><br><span class="line"><span class="comment">I = min&#123;qpow(G, (P - 1) / 4), P - qpow(G, (P - 1) / 4)&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>, I = <span class="number">86583718</span>, G = <span class="number">3</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">This is a class for solving polynomial problems</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Its default data type is int32, However, when multiplication is</span></span><br><span class="line"><span class="comment">out of range, it will conversion is enforced</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Its default modulus is 998244353, but it can also be changed</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Note that when changing the modulus, remember to change the</span></span><br><span class="line"><span class="comment">original root at the same time, and the modulus should not be</span></span><br><span class="line"><span class="comment">too large, if the modulus exceeding int32 </span></span><br><span class="line"><span class="comment">may exceed int64 (that is, long long) when multiplying.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">And you should note that N is defined outside the class,</span></span><br><span class="line"><span class="comment">it represents the longest possible length of the polynomial,</span></span><br><span class="line"><span class="comment">generally 3 to 4 times the original length </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This is a class written by Dyd on December 30, 2021,</span></span><br><span class="line"><span class="comment">and hopes to help you</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> Poly</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//This is for fast exponentiation </span></span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">res = (LL)res * x % P;</span><br><span class="line">x = (LL)x * x % P;</span><br><span class="line">y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//This is Cipolla</span></span><br><span class="line">    <span class="keyword">namespace</span> Cipolla</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> w;</span><br><span class="line">        DRG e&#123;<span class="number">114514</span>&#125;;</span><br><span class="line">        <span class="function">UID&lt;<span class="keyword">int</span>&gt; <span class="title">u</span><span class="params">(<span class="number">1</span>, P - <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="keyword">int</span> x, y;</span><br><span class="line">            IL Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex t) <span class="keyword">const</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (Complex)&#123;((LL)x * t.x % P + (LL)y * t.y % P * w % P) % P, ((LL)x * t.y % P + (LL)y * t.x % P) % P&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function">IL Complex <span class="title">Cqpow</span><span class="params">(Complex x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Complex res = (Complex)&#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">while</span> (y)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">                    res = res * x;</span><br><span class="line">                x = x * x;</span><br><span class="line">                y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">int</span> <span class="title">Csqrt</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">qpow</span>(x, (P - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) == P - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">int</span> t;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">233</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                t = <span class="built_in">u</span>(e);</span><br><span class="line">                w = ((LL)t * t % P - x + P) % P;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">qpow</span>(w, (P - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) == P - <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> res = <span class="built_in">Cqpow</span>((Complex)&#123;t, <span class="number">1</span>&#125;, (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>).x;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>(res, P - res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//It records the flip subscript </span></span><br><span class="line">    <span class="keyword">int</span> r[N];</span><br><span class="line">    <span class="comment">//Fill x with y</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; r; ++i)</span><br><span class="line">            x[i] = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; r; ++i)</span><br><span class="line">            x[i] = y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Ready bit and tot </span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">ready</span><span class="params">(<span class="keyword">int</span> &amp;bit, <span class="keyword">int</span> &amp;tot, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tot = <span class="number">1</span>, bit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (tot &lt; (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">            tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//preprocess the flip subscript</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">get_r</span><span class="params">(<span class="keyword">int</span> bit, <span class="keyword">int</span> tot)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//NTT, remember to preprocess the flip subscript </span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> tot, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; r[i])</span><br><span class="line">                <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line">        <span class="keyword">int</span> mid, i, j, len, gn, g, a, b;</span><br><span class="line">        <span class="keyword">for</span> (mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (P - <span class="number">1</span>) / len);</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">-1</span>)</span><br><span class="line">                gn = <span class="built_in">qpow</span>(gn, P - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; i += len)</span><br><span class="line">            &#123;</span><br><span class="line">                g = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; mid; ++j, g = (LL)g * gn % P)</span><br><span class="line">                &#123;</span><br><span class="line">                    a = x[i + j], b = (LL)g * x[i + j + mid] % P;</span><br><span class="line">                    x[i + j] = (a + b) % P;</span><br><span class="line">                    x[i + j + mid] = (a - b + P) % P;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        gn = <span class="built_in">qpow</span>(tot, P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            x[i] = (LL)x[i] * gn % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Polynomial multiplication</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polymul</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bit, tot;</span><br><span class="line">        <span class="built_in">ready</span>(bit, tot, len);</span><br><span class="line">        <span class="built_in">get_r</span>(bit, tot);</span><br><span class="line">        <span class="built_in">ntt</span>(x, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            x[i] = (LL)x[i] * y[i] % P;</span><br><span class="line">        <span class="built_in">ntt</span>(x, tot, <span class="number">-1</span>);</span><br><span class="line">        <span class="comment">//Remember to clear the number of bits that x does not need to 0 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Polynomial inversion</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polyinv</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y[<span class="number">0</span>] = <span class="built_in">qpow</span>(x[<span class="number">0</span>], P - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">polyinv</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">        STC <span class="keyword">int</span> t[N];</span><br><span class="line">        <span class="built_in">ready</span>(bit, tot, len);</span><br><span class="line">        <span class="built_in">get_r</span>(bit, tot);</span><br><span class="line">        <span class="built_in">fill</span>(y, <span class="number">0</span>, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, tot);</span><br><span class="line">        <span class="built_in">fill</span>(t, x, <span class="number">0</span>, len);</span><br><span class="line">        <span class="built_in">fill</span>(t, <span class="number">0</span>, len, tot);</span><br><span class="line">        <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            y[i] = (<span class="number">2</span> - (LL)t[i] * y[i] % P + P) % P * y[i] % P;</span><br><span class="line">        <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fill</span>(y, <span class="number">0</span>, len, tot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Polynomial Derivative</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polydif</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">            y[i - <span class="number">1</span>] = (LL)x[i] * i % P;</span><br><span class="line">        y[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Polynomial integral</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polyint</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">            y[i] = (LL)x[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, P - <span class="number">2</span>) % P;</span><br><span class="line">        y[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Polynomial natural logarithm</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polyln</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        STC <span class="keyword">int</span> a[N], b[N];</span><br><span class="line">        <span class="built_in">polydif</span>(x, a, len);</span><br><span class="line">        <span class="built_in">polyinv</span>(x, b, len);</span><br><span class="line">        <span class="keyword">int</span> bit, tot;</span><br><span class="line">        <span class="built_in">ready</span>(bit, tot, len);</span><br><span class="line">        <span class="built_in">get_r</span>(bit,tot);</span><br><span class="line">        <span class="built_in">fill</span>(a, <span class="number">0</span>, len, tot);</span><br><span class="line">        <span class="built_in">fill</span>(b, <span class="number">0</span>, len, tot);</span><br><span class="line">        <span class="built_in">ntt</span>(a, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(b, tot, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            a[i] = (LL)a[i] * b[i] % P;</span><br><span class="line">        <span class="built_in">ntt</span>(a, tot, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fill</span>(a, <span class="number">0</span>, len, tot);</span><br><span class="line">        <span class="built_in">polyint</span>(a, y, len);</span><br><span class="line">        <span class="built_in">fill</span>(y, <span class="number">0</span>, len, tot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Polynomial natural index</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polyexp</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">polyexp</span>(x, y, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> bit, tot;</span><br><span class="line">        STC <span class="keyword">int</span> t[N];</span><br><span class="line">        <span class="built_in">ready</span>(bit, tot, len);</span><br><span class="line">        <span class="built_in">fill</span>(t, <span class="number">0</span>, <span class="number">0</span>, tot);</span><br><span class="line">        <span class="built_in">polyln</span>(y, t, len);</span><br><span class="line">        <span class="built_in">get_r</span>(bit, tot);</span><br><span class="line">        t[<span class="number">0</span>] = (x[<span class="number">0</span>] + <span class="number">1</span> - t[<span class="number">0</span>] + P) % P;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">            t[i] = (x[i] - t[i] + P) % P;</span><br><span class="line">        <span class="built_in">fill</span>(t, <span class="number">0</span>, len, tot);</span><br><span class="line">        <span class="built_in">ntt</span>(t, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(y, tot, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            y[i] = (LL)y[i] * t[i] % P;</span><br><span class="line">        <span class="built_in">ntt</span>(y, tot, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fill</span>(y, <span class="number">0</span>, len, tot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Polynomial power function</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    k1 is the real power(it could be modulo)</span></span><br><span class="line"><span class="comment">    k2 is for Euler&#x27;s theorem(it&#x27;s modulo by P - 1)</span></span><br><span class="line"><span class="comment">    k3 is to determine how many leading 0 there are</span></span><br><span class="line"><span class="comment">    we use them as the power is too large</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polypow</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> k1, <span class="keyword">int</span> k2, <span class="keyword">int</span> k3, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!x[num] &amp;&amp; num &lt; len)</span><br><span class="line">            ++num;</span><br><span class="line">        <span class="keyword">if</span> ((LL)num * k3 &gt;= len)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">fill</span>(y, <span class="number">0</span>, <span class="number">0</span>, len);</span><br><span class="line">        STC <span class="keyword">int</span> t[N];</span><br><span class="line">        <span class="keyword">int</span> x0 = x[num], inv = <span class="built_in">qpow</span>(x0, P - <span class="number">2</span>);</span><br><span class="line">        len -= num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            x[i] = (LL)x[i + num] * inv % P;</span><br><span class="line">        <span class="keyword">int</span> bit, tot;</span><br><span class="line">        <span class="built_in">ready</span>(bit, tot, len);</span><br><span class="line">        <span class="built_in">fill</span>(t, <span class="number">0</span>, <span class="number">0</span>, tot);</span><br><span class="line">        <span class="built_in">fill</span>(x, <span class="number">0</span>, len, tot);</span><br><span class="line">        <span class="built_in">polyln</span>(x, t, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            t[i] = (LL)t[i] * k1 % P;</span><br><span class="line">        <span class="built_in">fill</span>(t, <span class="number">0</span>, len, tot);</span><br><span class="line">        <span class="built_in">polyexp</span>(t, y, len);</span><br><span class="line">        len += num;</span><br><span class="line">        x0 = <span class="built_in">qpow</span>(x0, k2);</span><br><span class="line">        num = num * k3;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= num; --i)</span><br><span class="line">            y[i] = (LL)y[i - num] * x0 % P;</span><br><span class="line">        <span class="built_in">fill</span>(y, <span class="number">0</span>, <span class="number">0</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    This is to get k1, k2, k3 for the k which is too large too be</span></span><br><span class="line"><span class="comment">    used in polypow</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">ready_for_pow</span><span class="params">(<span class="keyword">char</span> *k, <span class="keyword">int</span> &amp;k1, <span class="keyword">int</span> &amp;k2, <span class="keyword">int</span> &amp;k3)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        k1 = k2 = k3 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="built_in">strlen</span>(k + <span class="number">1</span>); i &lt;= l; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            k1 = ((LL)k1 * <span class="number">10</span> + (k[i] ^ <span class="number">48</span>)) % P;</span><br><span class="line">            k2 = ((LL)k2 * <span class="number">10</span> + (k[i] ^ <span class="number">48</span>)) % (P - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> ((LL)k3 * <span class="number">10</span> + (k[i] ^ <span class="number">48</span>) &lt;= P)</span><br><span class="line">                k3 = (LL)k3 * <span class="number">10</span> + (k[i] ^ <span class="number">48</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Polynomial rooting</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polysqrt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sq = Cipolla::<span class="built_in">Csqrt</span>(x[<span class="number">0</span>]), inv = <span class="built_in">qpow</span>(x[<span class="number">0</span>], P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            x[i] = (LL)x[i] * inv % P;</span><br><span class="line">        <span class="built_in">polypow</span>(x, y, (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, <span class="number">1</span>, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            y[i] = (LL)y[i] * sq % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Polynomial trigonometric function</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Note that if the modulus is not</span></span><br><span class="line"><span class="comment">    998244353 I should be recalculated</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polysin</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        STC <span class="keyword">int</span> a[N], b[N], c[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            a[i] = (LL)x[i] * I % P;</span><br><span class="line">        <span class="built_in">polyexp</span>(a, b, len);</span><br><span class="line">        <span class="built_in">polyinv</span>(b, c, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            b[i] = (b[i] - c[i] + P) % P;</span><br><span class="line">        <span class="keyword">int</span> inv = <span class="built_in">qpow</span>((I &lt;&lt; <span class="number">1</span>) % P, P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            y[i] = (LL)b[i] * inv % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polycos</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        STC <span class="keyword">int</span> a[N], b[N], c[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            a[i] = (LL)x[i] * I % P;</span><br><span class="line">        <span class="built_in">polyexp</span>(a, b, len);</span><br><span class="line">        <span class="built_in">polyinv</span>(b, c, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            b[i] = (b[i] + c[i]) % P;</span><br><span class="line">        <span class="keyword">int</span> inv = <span class="built_in">qpow</span>(<span class="number">2</span>, P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            y[i] = (LL)b[i] * inv % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polytan</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        STC <span class="keyword">int</span> a[N], b[N], c[N];</span><br><span class="line">        <span class="built_in">polysin</span>(x, a, len);</span><br><span class="line">        <span class="built_in">polycos</span>(x, b, len);</span><br><span class="line">        <span class="built_in">polyinv</span>(b, c, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            y[i] = a[i] * c[i] % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Polynomial inverse trigonometric function</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polyasin</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        STC <span class="keyword">int</span> a[N], b[N], c[N];</span><br><span class="line">        <span class="built_in">polydif</span>(x, a, len);</span><br><span class="line">        <span class="keyword">int</span> bit, tot;</span><br><span class="line">        <span class="built_in">ready</span>(bit, tot, len);</span><br><span class="line">        <span class="built_in">get_r</span>(bit, tot);</span><br><span class="line">        <span class="built_in">ntt</span>(x, tot, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            b[i] = (<span class="number">1</span> - (LL)x[i] * x[i]% P + P) % P;</span><br><span class="line">        <span class="built_in">ntt</span>(b, tot, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fill</span>(b, <span class="number">0</span>, len, tot);</span><br><span class="line">        <span class="built_in">polysqrt</span>(b, c, len);</span><br><span class="line">        <span class="built_in">fill</span>(b, <span class="number">0</span>, <span class="number">0</span>, tot);</span><br><span class="line">        <span class="built_in">polyinv</span>(c, b, len);</span><br><span class="line">        <span class="built_in">ntt</span>(a, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(b, tot, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            a[i] = (LL)a[i] * b[i] % P;</span><br><span class="line">        <span class="built_in">ntt</span>(a, tot, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">polyint</span>(a, y, len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polyacos</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">polyasin</span>(x, y, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            y[i] = y[i] ? P - y[i] : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">polyatan</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        STC <span class="keyword">int</span> a[N], b[N], c[N];</span><br><span class="line">        <span class="built_in">polydif</span>(x, a, len);</span><br><span class="line">        <span class="keyword">int</span> bit, tot;</span><br><span class="line">        <span class="built_in">ready</span>(bit, tot, len);</span><br><span class="line">        <span class="built_in">get_r</span>(bit, tot);</span><br><span class="line">        <span class="built_in">ntt</span>(x, tot, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            b[i] = (<span class="number">1</span> + (LL)x[i] * x[i]% P) % P;</span><br><span class="line">        <span class="built_in">ntt</span>(b, tot, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fill</span>(b, <span class="number">0</span>, len, tot);</span><br><span class="line">        <span class="built_in">polyinv</span>(b, c, len);</span><br><span class="line">        <span class="built_in">ntt</span>(a, tot, <span class="number">1</span>), <span class="built_in">ntt</span>(c, tot, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            a[i] = (LL)a[i] * c[i] % P;</span><br><span class="line">        <span class="built_in">ntt</span>(a, tot, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">polyint</span>(a, y, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    works</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 多项式没家桶&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="快速傅里叶变换,FFT" scheme="https://dyd-true.github.io/tags/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2-FFT/"/>
    
    <category term="多项式" scheme="https://dyd-true.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
    <category term="快速数论变换,NTT" scheme="https://dyd-true.github.io/tags/%E5%BF%AB%E9%80%9F%E6%95%B0%E8%AE%BA%E5%8F%98%E6%8D%A2-NTT/"/>
    
  </entry>
  
  <entry>
    <title>快速数论变换</title>
    <link href="https://dyd-true.github.io/2021/12/26/%E5%BF%AB%E9%80%9F%E6%95%B0%E8%AE%BA%E5%8F%98%E6%8D%A2/"/>
    <id>https://dyd-true.github.io/2021/12/26/%E5%BF%AB%E9%80%9F%E6%95%B0%E8%AE%BA%E5%8F%98%E6%8D%A2/</id>
    <published>2021-12-26T06:40:03.000Z</published>
    <updated>2021-12-27T14:24:45.686Z</updated>
    
    <content type="html"><![CDATA[<p> 不给好质数的出题人都***</p><span id="more"></span><h1 id="快速数论变换"><a href="#快速数论变换" class="headerlink" title="快速数论变换"></a>快速数论变换</h1><p>众所周知，FFT有两个缺陷：虚数常数大、无法支持取模</p><p>而NTT就巧妙的把这两个缺陷（<del>转化成另外的缺陷</del>）解决了</p><p>思路大体和FFT一样，不同的是，NTT不用虚数的单位根了，而用的是数论中的<strong>原根</strong></p><h2 id="原根"><a href="#原根" class="headerlink" title="原根"></a>原根</h2><p>设 $a \in \mathbb{Z}, p \in \mathbb{N_+}$ ，且 $gcd(a, p) = 1$ ，设 $d$ 为使 $a^d \equiv 1 \pmod p$ 成立的最小正整数，则称 $d$ 为 $a$ 在模 $p$ 意义下的<strong>阶</strong>，若 $d = \varphi(p)$ ，则称 $a$ 为 $p$ 的一个<strong>原根</strong></p><p>可以证明，<strong>奇质数一定存在原根</strong></p><p>原根有一个关键性质：**若 $g$ 是 $p$ 的原根，则 $g^i \mod p(i \in [1, p - 1])$ 两两不同且取遍 $[1, p - 1]$**，则让我们可以取原根做点值表达式的点</p><p>下面用 $g_n$ 表示 $g^{\frac{p - 1}{n}}$ </p><p>而原根也和虚数一样满足折半引理、消去引理和求和引理，即（以下都在模 $p$ 意义下）：</p><ul><li>  $g_n^n = 1$ </li><li> $g_n^{k + \frac{n}{2}} = -g_n^k$ </li><li> $g_{dn}^{dk} = g_{n}^k$ </li><li> $(g_n^{k + \frac{n}{2}})^2 = g_n^{2k + n} = g_n^{2k}$ </li></ul><p>也就是说，在FFT中用到的虚数的性质原根都有，而且原根支持取模</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e6</span> + <span class="number">5</span>, P = <span class="number">998244353</span>; <span class="comment">//注意N要大于二倍n</span></span><br><span class="line"><span class="keyword">int</span> r[N], bit, tot;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = (LL)res * x % P;</span><br><span class="line">        x = (LL)x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; r[i])</span><br><span class="line">            <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line">    <span class="keyword">int</span> mid, i, j, len, gn, g, a, b;</span><br><span class="line">    <span class="keyword">for</span> (mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这里可以预处理3和inv的次幂卡常</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (P - <span class="number">1</span>) / len); <span class="comment">//3是998244353的原根</span></span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">-1</span>) <span class="comment">//负数的bool值是true!</span></span><br><span class="line">            gn = <span class="built_in">qpow</span>(gn, P - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; i += len)</span><br><span class="line">        &#123;</span><br><span class="line">            g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; mid; ++j, g = (LL)g * gn % P)</span><br><span class="line">            &#123;</span><br><span class="line">                a = x[i + j], b = (LL)g * x[i + j + mid] % P;</span><br><span class="line">                x[i + j] = (a + b) % P;</span><br><span class="line">                x[i + j + mid] = (a - b + P) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] = (a[i] + P) % P; <span class="comment">//一定要保证是正数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]), b[i] = (b[i] + P) % P;</span><br><span class="line">    bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tot &lt;= n + m)</span><br><span class="line">        tot &lt;&lt;= <span class="number">1</span>, ++bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">ntt</span>(a, <span class="number">1</span>), <span class="built_in">ntt</span>(b, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        a[i] = (LL)a[i] * b[i] % P;</span><br><span class="line">    <span class="built_in">ntt</span>(a, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> inv = <span class="built_in">qpow</span>(tot, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, (LL)a[i] * inv % P);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于质数"><a href="#关于质数" class="headerlink" title="关于质数"></a>关于质数</h2><p>模数必须是 $2^n + 1$ 的形式且 $n$ 要足够大常见的有998244353，1004535809，469762049它们的原根都是3</p><p>具体的，见表：</p><p>设 $P = k2^r + 1$ ，原根为 $g$ </p><table><thead><tr><th>P</th><th>r</th><th>k</th><th>g</th></tr></thead><tbody><tr><td>81788929</td><td>21</td><td>39</td><td>7</td></tr><tr><td>104857601</td><td>21</td><td>50</td><td>3</td></tr><tr><td>104857601</td><td>22</td><td>25</td><td>3</td></tr><tr><td>113246209</td><td>21</td><td>54</td><td>7</td></tr><tr><td>113246209</td><td>22</td><td>27</td><td>7</td></tr><tr><td>132120577</td><td>21</td><td>63</td><td>5</td></tr><tr><td>136314881</td><td>21</td><td>65</td><td>3</td></tr><tr><td>138412033</td><td>21</td><td>66</td><td>5</td></tr><tr><td>155189249</td><td>21</td><td>74</td><td>6</td></tr><tr><td>167772161</td><td>23</td><td>20</td><td>3</td></tr><tr><td>249561089</td><td>21</td><td>119</td><td>3</td></tr><tr><td>377487361</td><td>21</td><td>180</td><td>7</td></tr><tr><td>377487361</td><td>22</td><td>90</td><td>7</td></tr><tr><td>383778817</td><td>21</td><td>183</td><td>5</td></tr><tr><td>415236097</td><td>22</td><td>99</td><td>5</td></tr><tr><td>415236097</td><td>21</td><td>198</td><td>5</td></tr><tr><td>469762049</td><td>24</td><td>28</td><td>3</td></tr><tr><td>469762049</td><td>21</td><td>224</td><td>3</td></tr><tr><td>469762049</td><td>23</td><td>56</td><td>3</td></tr><tr><td>469762049</td><td>22</td><td>112</td><td>3</td></tr><tr><td>576716801</td><td>21</td><td>275</td><td>6</td></tr><tr><td>645922817</td><td>22</td><td>154</td><td>3</td></tr><tr><td>645922817</td><td>21</td><td>308</td><td>3</td></tr><tr><td>666894337</td><td>21</td><td>318</td><td>5</td></tr><tr><td>683671553</td><td>22</td><td>163</td><td>3</td></tr><tr><td>740294657</td><td>21</td><td>353</td><td>3</td></tr><tr><td>897581057</td><td>22</td><td>214</td><td>3</td></tr><tr><td>897581057</td><td>21</td><td>428</td><td>3</td></tr><tr><td>918552577</td><td>22</td><td>219</td><td>5</td></tr><tr><td>935329793</td><td>22</td><td>223</td><td>3</td></tr><tr><td>935329793</td><td>21</td><td>446</td><td>3</td></tr><tr><td>950009857</td><td>21</td><td>453</td><td>7</td></tr><tr><td>962592769</td><td>21</td><td>459</td><td>7</td></tr><tr><td>998244353</td><td>23</td><td>119</td><td>3</td></tr><tr><td>1004535809</td><td>21</td><td>479</td><td>3</td></tr><tr><td>1107296257</td><td>23</td><td>132</td><td>10</td></tr><tr><td>1107296257</td><td>24</td><td>66</td><td>10</td></tr><tr><td>1107296257</td><td>21</td><td>528</td><td>10</td></tr><tr><td>1138753537</td><td>21</td><td>543</td><td>5</td></tr><tr><td>1161822209</td><td>22</td><td>277</td><td>3</td></tr><tr><td>1161822209</td><td>21</td><td>554</td><td>3</td></tr><tr><td>1205862401</td><td>21</td><td>575</td><td>3</td></tr><tr><td>1212153857</td><td>22</td><td>289</td><td>3</td></tr><tr><td>1212153857</td><td>21</td><td>578</td><td>3</td></tr><tr><td>1214251009</td><td>21</td><td>579</td><td>7</td></tr><tr><td>1218445313</td><td>21</td><td>581</td><td>3</td></tr><tr><td>1224736769</td><td>22</td><td>292</td><td>3</td></tr><tr><td>1224736769</td><td>21</td><td>584</td><td>3</td></tr><tr><td>1281359873</td><td>21</td><td>611</td><td>3</td></tr><tr><td>1300234241</td><td>23</td><td>155</td><td>3</td></tr><tr><td>1300234241</td><td>21</td><td>620</td><td>3</td></tr><tr><td>1306525697</td><td>21</td><td>623</td><td>3</td></tr><tr><td>1327497217</td><td>21</td><td>633</td><td>5</td></tr><tr><td>1438646273</td><td>21</td><td>686</td><td>3</td></tr><tr><td>1484783617</td><td>21</td><td>708</td><td>5</td></tr><tr><td>1570766849</td><td>21</td><td>749</td><td>3</td></tr><tr><td>1709178881</td><td>21</td><td>815</td><td>3</td></tr><tr><td>1835008001</td><td>21</td><td>875</td><td>6</td></tr><tr><td>1866465281</td><td>22</td><td>445</td><td>3</td></tr><tr><td>1866465281</td><td>21</td><td>890</td><td>3</td></tr><tr><td>1893728257</td><td>21</td><td>903</td><td>5</td></tr><tr><td>1931476993</td><td>21</td><td>921</td><td>5</td></tr><tr><td>2088763393</td><td>22</td><td>498</td><td>5</td></tr><tr><td>2113929217</td><td>22</td><td>504</td><td>5</td></tr><tr><td>2113929217</td><td>25</td><td>63</td><td>5</td></tr><tr><td>2113929217</td><td>23</td><td>252</td><td>5</td></tr><tr><td>2130706433</td><td>22</td><td>508</td><td>3</td></tr><tr><td>2130706433</td><td>23</td><td>254</td><td>3</td></tr><tr><td>2281701377</td><td>27</td><td>17</td><td>3</td></tr><tr><td>2483027969</td><td>23</td><td>296</td><td>3</td></tr><tr><td>2483027969</td><td>25</td><td>74</td><td>3</td></tr><tr><td>2533359617</td><td>24</td><td>151</td><td>3</td></tr><tr><td>2533359617</td><td>23</td><td>302</td><td>3</td></tr><tr><td>2558525441</td><td>23</td><td>305</td><td>3</td></tr><tr><td>2671771649</td><td>22</td><td>637</td><td>3</td></tr><tr><td>2680160257</td><td>22</td><td>639</td><td>7</td></tr><tr><td>2717908993</td><td>22</td><td>648</td><td>5</td></tr><tr><td>2717908993</td><td>24</td><td>162</td><td>5</td></tr><tr><td>2722103297</td><td>22</td><td>649</td><td>3</td></tr><tr><td>2780823553</td><td>22</td><td>663</td><td>10</td></tr><tr><td>2885681153</td><td>24</td><td>172</td><td>3</td></tr><tr><td>2885681153</td><td>26</td><td>43</td><td>3</td></tr><tr><td>2910846977</td><td>22</td><td>694</td><td>3</td></tr><tr><td>2998927361</td><td>22</td><td>715</td><td>3</td></tr><tr><td>3112173569</td><td>22</td><td>742</td><td>2</td></tr><tr><td>3221225473</td><td>24</td><td>192</td><td>3</td></tr><tr><td>3221225473</td><td>25</td><td>96</td><td>3</td></tr><tr><td>3221225473</td><td>26</td><td>48</td><td>3</td></tr><tr><td>3238002689</td><td>22</td><td>772</td><td>2</td></tr><tr><td>3238002689</td><td>23</td><td>386</td><td>2</td></tr><tr><td>3313500161</td><td>22</td><td>790</td><td>2</td></tr><tr><td>3414163457</td><td>23</td><td>407</td><td>3</td></tr><tr><td>3435134977</td><td>22</td><td>819</td><td>2</td></tr><tr><td>3451912193</td><td>22</td><td>823</td><td>2</td></tr><tr><td>3489660929</td><td>23</td><td>416</td><td>2</td></tr><tr><td>3489660929</td><td>25</td><td>104</td><td>2</td></tr><tr><td>3489660929</td><td>22</td><td>832</td><td>2</td></tr><tr><td>3510632449</td><td>22</td><td>837</td><td>2</td></tr><tr><td>3577741313</td><td>22</td><td>853</td><td>2</td></tr><tr><td>3615490049</td><td>23</td><td>431</td><td>2</td></tr><tr><td>3615490049</td><td>22</td><td>862</td><td>2</td></tr><tr><td>3628072961</td><td>22</td><td>865</td><td>2</td></tr><tr><td>3665821697</td><td>23</td><td>437</td><td>2</td></tr><tr><td>3686793217</td><td>22</td><td>879</td><td>2</td></tr><tr><td>3749707777</td><td>23</td><td>447</td><td>2</td></tr><tr><td>3892314113</td><td>23</td><td>464</td><td>2</td></tr><tr><td>3892314113</td><td>25</td><td>116</td><td>2</td></tr><tr><td>3892314113</td><td>24</td><td>232</td><td>2</td></tr><tr><td>3892314113</td><td>22</td><td>928</td><td>2</td></tr><tr><td>3938451457</td><td>22</td><td>939</td><td>2</td></tr><tr><td>3942645761</td><td>23</td><td>470</td><td>2</td></tr><tr><td>3942645761</td><td>24</td><td>235</td><td>2</td></tr><tr><td>3942645761</td><td>22</td><td>940</td><td>2</td></tr><tr><td>4013948929</td><td>22</td><td>957</td><td>2</td></tr><tr><td>4194304001</td><td>24</td><td>250</td><td>2</td></tr><tr><td>4253024257</td><td>23</td><td>507</td><td>2</td></tr><tr><td>4630511617</td><td>26</td><td>69</td><td>2</td></tr><tr><td>4630511617</td><td>25</td><td>138</td><td>2</td></tr><tr><td>4882169857</td><td>24</td><td>291</td><td>2</td></tr><tr><td>4882169857</td><td>23</td><td>582</td><td>2</td></tr><tr><td>5158993921</td><td>23</td><td>615</td><td>2</td></tr><tr><td>5175771137</td><td>23</td><td>617</td><td>2</td></tr><tr><td>5251268609</td><td>23</td><td>626</td><td>2</td></tr><tr><td>5528092673</td><td>23</td><td>659</td><td>2</td></tr><tr><td>5536481281</td><td>24</td><td>330</td><td>2</td></tr><tr><td>5578424321</td><td>23</td><td>665</td><td>2</td></tr><tr><td>5788139521</td><td>24</td><td>345</td><td>2</td></tr><tr><td>5788139521</td><td>23</td><td>690</td><td>2</td></tr><tr><td>5838471169</td><td>25</td><td>174</td><td>2</td></tr><tr><td>5838471169</td><td>26</td><td>87</td><td>2</td></tr><tr><td>6014631937</td><td>23</td><td>717</td><td>2</td></tr><tr><td>6165626881</td><td>23</td><td>735</td><td>2</td></tr><tr><td>6333399041</td><td>23</td><td>755</td><td>2</td></tr><tr><td>6434062337</td><td>23</td><td>767</td><td>2</td></tr><tr><td>6534725633</td><td>23</td><td>779</td><td>2</td></tr><tr><td>6593445889</td><td>24</td><td>393</td><td>2</td></tr><tr><td>6660554753</td><td>23</td><td>794</td><td>2</td></tr><tr><td>6719275009</td><td>23</td><td>801</td><td>2</td></tr><tr><td>6811549697</td><td>25</td><td>203</td><td>2</td></tr><tr><td>6811549697</td><td>23</td><td>812</td><td>2</td></tr><tr><td>6996099073</td><td>23</td><td>834</td><td>2</td></tr><tr><td>6996099073</td><td>24</td><td>417</td><td>2</td></tr><tr><td>7096762369</td><td>24</td><td>423</td><td>2</td></tr><tr><td>7348420609</td><td>24</td><td>438</td><td>2</td></tr><tr><td>7348420609</td><td>25</td><td>219</td><td>2</td></tr><tr><td>7474249729</td><td>23</td><td>891</td><td>2</td></tr><tr><td>7566524417</td><td>23</td><td>902</td><td>2</td></tr><tr><td>7717519361</td><td>26</td><td>115</td><td>2</td></tr><tr><td>7717519361</td><td>25</td><td>230</td><td>2</td></tr><tr><td>7717519361</td><td>23</td><td>920</td><td>2</td></tr><tr><td>7818182657</td><td>23</td><td>932</td><td>2</td></tr><tr><td>7843348481</td><td>23</td><td>935</td><td>2</td></tr><tr><td>7918845953</td><td>27</td><td>59</td><td>2</td></tr><tr><td>8170504193</td><td>24</td><td>487</td><td>2</td></tr><tr><td>8220835841</td><td>25</td><td>245</td><td>2</td></tr><tr><td>8220835841</td><td>23</td><td>980</td><td>2</td></tr><tr><td>8279556097</td><td>23</td><td>987</td><td>2</td></tr><tr><td>8858370049</td><td>26</td><td>132</td><td>2</td></tr><tr><td>8858370049</td><td>27</td><td>66</td><td>2</td></tr><tr><td>9177137153</td><td>24</td><td>547</td><td>2</td></tr><tr><td>9227468801</td><td>25</td><td>275</td><td>2</td></tr><tr><td>9865003009</td><td>24</td><td>588</td><td>2</td></tr><tr><td>10267656193</td><td>24</td><td>612</td><td>2</td></tr><tr><td>10267656193</td><td>26</td><td>153</td><td>2</td></tr><tr><td>10267656193</td><td>25</td><td>306</td><td>2</td></tr><tr><td>10619977729</td><td>24</td><td>633</td><td>2</td></tr><tr><td>10871635969</td><td>26</td><td>162</td><td>2</td></tr><tr><td>10871635969</td><td>24</td><td>648</td><td>2</td></tr><tr><td>10871635969</td><td>25</td><td>324</td><td>2</td></tr><tr><td>11123294209</td><td>24</td><td>663</td><td>2</td></tr><tr><td>11173625857</td><td>25</td><td>333</td><td>2</td></tr><tr><td>11173625857</td><td>24</td><td>666</td><td>2</td></tr><tr><td>11341398017</td><td>26</td><td>169</td><td>2</td></tr><tr><td>11341398017</td><td>25</td><td>338</td><td>2</td></tr><tr><td>11693719553</td><td>24</td><td>697</td><td>2</td></tr><tr><td>12297699329</td><td>24</td><td>733</td><td>2</td></tr><tr><td>12348030977</td><td>27</td><td>92</td><td>2</td></tr><tr><td>12348030977</td><td>25</td><td>368</td><td>2</td></tr><tr><td>12348030977</td><td>26</td><td>184</td><td>2</td></tr><tr><td>13186891777</td><td>25</td><td>393</td><td>2</td></tr><tr><td>13757317121</td><td>26</td><td>205</td><td>2</td></tr><tr><td>13857980417</td><td>25</td><td>413</td><td>2</td></tr><tr><td>13857980417</td><td>24</td><td>826</td><td>2</td></tr><tr><td>14042529793</td><td>24</td><td>837</td><td>2</td></tr><tr><td>14092861441</td><td>26</td><td>210</td><td>2</td></tr><tr><td>14092861441</td><td>27</td><td>105</td><td>2</td></tr><tr><td>14092861441</td><td>24</td><td>840</td><td>2</td></tr><tr><td>15065939969</td><td>24</td><td>898</td><td>2</td></tr><tr><td>15065939969</td><td>25</td><td>449</td><td>2</td></tr><tr><td>15619588097</td><td>24</td><td>931</td><td>2</td></tr><tr><td>15653142529</td><td>24</td><td>933</td><td>2</td></tr><tr><td>15854469121</td><td>24</td><td>945</td><td>2</td></tr><tr><td>16475226113</td><td>24</td><td>982</td><td>2</td></tr><tr><td>16575889409</td><td>24</td><td>988</td><td>2</td></tr><tr><td>16626221057</td><td>24</td><td>991</td><td>2</td></tr><tr><td>17314086913</td><td>26</td><td>258</td><td>2</td></tr><tr><td>17314086913</td><td>25</td><td>516</td><td>2</td></tr><tr><td>17314086913</td><td>27</td><td>129</td><td>2</td></tr><tr><td>18387828737</td><td>26</td><td>274</td><td>2</td></tr><tr><td>19998441473</td><td>26</td><td>298</td><td>2</td></tr><tr><td>19998441473</td><td>25</td><td>596</td><td>2</td></tr><tr><td>20501757953</td><td>25</td><td>611</td><td>2</td></tr></tbody></table><h2 id="三模数NTT"><a href="#三模数NTT" class="headerlink" title="三模数NTT"></a>三模数NTT</h2><p>对于模数不符合要求的，可以用这三个质数分别NTT，用中国剩余定理合并（要求答案小于它们的积），一般来说可以应付系数不超过 $10^{23}$ 的情况</p><p>然鹅，拆系数FFT跑得比它快……</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 不给好质数的出题人都***&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="多项式" scheme="https://dyd-true.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
    <category term="快速数论变换,NTT" scheme="https://dyd-true.github.io/tags/%E5%BF%AB%E9%80%9F%E6%95%B0%E8%AE%BA%E5%8F%98%E6%8D%A2-NTT/"/>
    
  </entry>
  
  <entry>
    <title>文章密码</title>
    <link href="https://dyd-true.github.io/2021/12/24/%E6%96%87%E7%AB%A0%E5%AF%86%E7%A0%81/"/>
    <id>https://dyd-true.github.io/2021/12/24/%E6%96%87%E7%AB%A0%E5%AF%86%E7%A0%81/</id>
    <published>2021-12-24T13:51:32.000Z</published>
    <updated>2021-12-26T06:50:04.952Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b572895a584fab6d7a2a75073aa07caa0200c2b91ea314150080ed513312b269">fb7f687860606098f1ad1cb36041d4e3ac537c2c4647f3d67e3b11a8c7ee588e1c7ca94440e71812a71af5c098d2f09cb95d70bfa129432469064c7c37a746ac9e48dd7a73101584b7db912bb8fc955c587e056548a9972225090ed57b1ad9b2c39bac7b4465451af25420f3a38931f70ac021a27ff02591a413abdfedcdfd824e700fd50dc0f63c859e4956529889f2a9d94b605d7510b5f091e10a4400a6438a8e95def3b721e3651ca534691c334d1dcf733169f11e9e2d642644156dcce4d57f90ef0a44e88684f48e0a6172cdd4e2707fbc0b8563e15597d99e044f8f1fb27c941524582e91594e3275d0a8c5b82c37a7eaffaab23edf2379378a627f9cc72af3b96cdf1a541bdb79df12b5c4c8bc78dab851a8a19a07e90ca504c4c8ee43a50d9b182dde1ea29e58372b5cf510d7b3c2d5b38936934a34e1008cfa61f2ed9cfa7da4cf86b8f1523918ffe90e6e53ab2b86f25e23e3eedef8c7b8dba566cfe61fc678bacdc6d1949cdac7eb812a4b7ddc1f7396b73bca4963ec2ffb8b288a3d4c0a1eb71f8d4b3c92d33676059f05de3ecd5297a41123e7b254fc49f6ab0eda5f22fa36e4b992110387a422e8f23a8460651deec85efdf17b6a39d7742fd0186e91e59db1f789b109fbb61c6a17a883ce119498d8c89d6461c7f44126171b38e5465889e7c7916bdcfb7e00aa933ef8db9df4e971cfc9ec43c9e1bae758c725642d596b0b6b969f9f69c8e29330ec2bfaec28a0578130dc2516a089c7dcbbcd74e9313e5c184daf3322cf6592db3cff2cd61beacf318977b9b8ef0fc3a2a06f1eb46b9970856cdb1e10cd791bcc5fed520a185f740085d7544ddcdd933a90df89c9416a5c826aa9d4c509ca2fd10a2ad6f93a739ebceff8313350e12006b2523f161c28087f9a9b17e3f73da08d486288852f91d5f111a99d9205ee361ce9498963d24769b38f3d365a4c3de2e57d874e4db7fdcd21c7cfdef147ce2fd1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Dydは、パスワードを入力するように求められます</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">防止我忘了</summary>
    
    
    
    <category term="others" scheme="https://dyd-true.github.io/categories/others/"/>
    
    
    <category term="其它" scheme="https://dyd-true.github.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>后缀自动机</title>
    <link href="https://dyd-true.github.io/2021/12/23/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>https://dyd-true.github.io/2021/12/23/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/</id>
    <published>2021-12-23T10:53:28.000Z</published>
    <updated>2021-12-24T14:19:07.352Z</updated>
    
    <content type="html"><![CDATA[<p> 自动机/鸡/姬，到底那个好</p><span id="more"></span><h1 id="后缀自动机"><a href="#后缀自动机" class="headerlink" title="后缀自动机"></a>后缀自动机</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>后缀自动机</strong>（SAM）是一个<strong>状态机</strong>，他有<strong>一个起点</strong>，<strong>若干终点</strong>，原串的所有本质不同子串和从SAM起点开始的所有路径<strong>一一对应，不重不漏</strong>，所以终点就是包含后缀的点</p><p>简单来说就是用一个边上有字符的DAG存储下了一个字符串的所有子串（当然Trie也可以做到，但是Trie的点数和边数都是 $O(n^2)$ 而SAM的点数和边数都是 $O(n)$ 的）</p><h2 id="一些性质"><a href="#一些性质" class="headerlink" title="一些性质"></a>一些性质</h2><p>再继续讨论SAM前，我们必须先知道一些东西</p><h3 id="endpos"><a href="#endpos" class="headerlink" title="endpos"></a>endpos</h3><p>定义函数 $endpos(S)$ 表示<strong>子串 $S$ 在原串中出现的位置的尾字母下标集合</strong>，如对于字符串“abcbabc”，有 $endpos(ab) = \{2, 6\}$ </p><p>endpos有以下结论（<strong>较常用</strong>）：</p><ol><li><p>对于两个子串 $s_1, s_2$ ，有：<br>$$<br>\begin{aligned}<br>&amp; s_1是s_2的后缀 \Leftrightarrow endpos(s_2) \subseteq endpos(s_1) \\<br>&amp; s_1不是是s_2的后缀 \Leftrightarrow endpos(s_2) \wedge endpos(s_1) = \phi \\<br>\end{aligned}<br>$$<br>正确性可以感性理解一下</p></li><li><p>两个不同子串的endpos，要么有包含关系，要么没有交集，可以理解为，它们要么有后缀关系，要么没有</p></li></ol><p>对于endpos相同的子串，我们将它们归为一个<strong>endpos等价类</strong>，对于任意一个endpos等价类，将包含在其中的所有子串依长度从大到小排序，则每一个子串的长度均为上一个子串的长度减1，且为上一个子串的后缀（简单来说，一个endpos等价类内的串的长度连续）</p><p>定义  $longest(st), shortest(st)$ ，表示endpos等价类 $st$ 中最长，最短的子串，由以上定义可知：对于 $longest(st)$ 的任意后缀 $s$ ，如果 $| shortest(st) | \le | s | \le | longsest(st) |$ ，则 $s \in st$  </p><p>而我们还有一个结论：</p><p><strong>endpos等价类个数的级别为 $O(n)$</strong> </p><p>对于一个类（endpos等价类） $st$ ，在 $longest(st)$ 前添加任意一个字符（满足新形成的字符串为原串子串），得到的字符串必然不属于此类，因此会得到若干个新的类，得到新形成的字符串的endpos必然为 $endpos(longest(st))$ 的子集，并且分别添加两个不同的字符，所得到的两个字符串的endpos必然完全不相交，所以对于此操作（添加一个字符），我们可以认为是对一个原集合进行分割，分割得到几个新的集合，且保留原集合，新的集合还可以继续分割，但是总的分割的次数不会超过原集合的大小，所以最终形成的集合个数也不会超过 $2n$ </p><h3 id="parent-tree"><a href="#parent-tree" class="headerlink" title="parent tree"></a>parent tree</h3><p>考虑上面类的划分过程，将一个串前面添加字符，得到新的类，这种关系可以构成一棵<strong>树</strong>，如对于串“aababa”（图中红色串为每个类的最长串）：</p><p><img src="https://s2.loli.net/2021/12/23/ycUCONS1Aa2fvVd.png" alt="pt"></p><p>于是，类之间就有了父子关系，我们称这棵树为<strong>parent tree</strong>，记类 $a$ 的父节点为 $fa(a)$ </p><p>也有个结论：<br>$$<br>|longest(fa(a))| + 1 = |shortest(a)|<br>$$<br>正确性很显然，从建树的步骤中就可以看出，在一个类中的最长子串前再添加一个字符，形成的字符串就必然属于其儿子中的一类，且这个新形成的字符串肯定是它所属的类中最短的一个，所以我们只需储存 $|longest(a)|$ </p><p>那么定义那么多有什么用呢？其实，<strong>SAM的节点就是parent tree中的节点</strong>，只不过二者的边不同，其中空串所属的节点（parent tree的根）就是后缀自动机的源点，而最大子串（整个原串）所属于的节点，以及其在parent tree上的祖先就是终点，如图即是一个SAM，蓝色为SAM的边，橘色为终点：</p><p><img src="https://s2.loli.net/2021/12/23/3iyroqBa6Fw1MId.png" alt="SAM"></p><p>根据定义，SAM的边应该满足：<strong>从源点出发到达点 $i$ 的任意一条路径形成的字符串均属于节点  $i$ 所代表的类</strong></p><p>二者边的主要区别为，延parent tree的边往下走是在字符串<strong>前面</strong>添加字符，延自动机的边往下走是在字符串<strong>后面</strong>添加字符，故parent tree主要用来求节点（即各个字符串）的性质，而后缀自动机本身则主要用来直接跑字符串</p><h3 id="数量级"><a href="#数量级" class="headerlink" title="数量级"></a>数量级</h3><p>前面证过，<strong>SAM的点数为 $O(n)$</strong></p><p>下面证明：<strong>SAM的边数为 $O(n)$</strong> </p><p>先取<strong>后缀自动机的任意一棵生成树</strong>（不是parent tree），这棵树一定与点数同级，即 $O(n)$ ，那么我们考虑向这棵生成树中加边</p><p>对于每个终止节点，我们按一定顺序跑遍属于它的子串（跑的时候逆着边的方向），如果能顺利跑回源点，则跑下一个子串；否则，说明我们需要加边，每次连上本应该跑回的边，沿它跑回下一个节点（这里若干次加边后得到一条回源点的路可能不是对于的当前串，但没关系，因为它一定对于终点的某一个子串，我们下次跑那个子串的时候就不必加边了，之后重跑我们原本希望跑的子串，直到真正顺利跑完这个子串）</p><p>这样，当跑完所有终止节点时，在原本的生成树上增加的边不会超过后缀的个数，即 $n$ 个，故总的边数是 $O(n)$ 级的</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>那么如何构造SAM呢？</p><p>先看看构造好的长啥样（这个SAM比较特殊，只有一个终点）：</p><p><img src="https://s2.loli.net/2021/12/23/n1TRXCxIJgzH95q.jpg" alt="SAM2"></p><p>那整齐的一行节点表示的就是各个前缀所属的节点，显然，对于任意一个前缀，它在它所属的类中长度是最长的（不能再在其前面添加字符）</p><p>而相邻两个前缀所属点之间也肯定有连边，当然，不相邻的节点之间也会有一些边</p><p>上面那些零零散散的节点则是不包含任意一个前缀的节点</p><p>而蓝色的边就是SAM中正常的边，绿色的边是parent tree</p><p>SAM的构造是在线的，即我们通过不断添加单个字符的方式构建后缀自动机，时刻调整其状态</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//1为空节点</span></span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">1</span>, last = <span class="number">1</span>; <span class="comment">//last:未加入此字符前最长的前缀所属的节点的编号</span></span><br><span class="line"><span class="comment">//这里的节点只维护了最长的串,因为所有长度小于它但同结尾的串一定被它的祖先维护了</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> len, fa; <span class="comment">//最长长度,父节点</span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">26</span>]; <span class="comment">//类似于Trie</span></span><br><span class="line">&#125; nd[N &lt;&lt; <span class="number">1</span>]; <span class="comment">//开2倍</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last, np = last = ++tot;</span><br><span class="line">nd[np].len = nd[p].len + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; p &amp;&amp; !nd[p].ch[x]; p = nd[p].fa) <span class="comment">//遍历所有长度小于它但同结尾的串,加字符</span></span><br><span class="line">nd[p].ch[x] = np;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果最后形成的新字符串没有旧串里出现过,</span></span><br><span class="line"><span class="comment">说明x实际上是一个在旧串中没有出现过的字符</span></span><br><span class="line"><span class="comment">因此不可能存在除节点1以外的祖先</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line">nd[np].fa = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q = nd[p].ch[x];</span><br><span class="line"><span class="keyword">if</span> (nd[q].len == nd[p].len + <span class="number">1</span>) <span class="comment">//判断np是否为q的子节点</span></span><br><span class="line">nd[np].fa = q;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//不是就说明q含了不该含的子串,直接新建节点为np的父节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nq = ++tot;</span><br><span class="line">nd[nq] = nd[q], nd[nq].len = nd[p].len + <span class="number">1</span>; <span class="comment">//这里就相当于去掉不该含的串</span></span><br><span class="line">nd[q].fa = nd[np].fa = nq;</span><br><span class="line"><span class="keyword">for</span> (; p &amp;&amp; nd[p].ch[x] == q; p = nd[p].fa) <span class="comment">//同理跟新</span></span><br><span class="line">nd[p].ch[x] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; sam;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 自动机/鸡/姬，到底那个好&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="后缀自动机,SAM" scheme="https://dyd-true.github.io/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA-SAM/"/>
    
  </entry>
  
  <entry>
    <title>行列式和基尔霍夫矩阵</title>
    <link href="https://dyd-true.github.io/2021/12/22/%E8%A1%8C%E5%88%97%E5%BC%8F%E5%92%8C%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E7%9F%A9%E9%98%B5/"/>
    <id>https://dyd-true.github.io/2021/12/22/%E8%A1%8C%E5%88%97%E5%BC%8F%E5%92%8C%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E7%9F%A9%E9%98%B5/</id>
    <published>2021-12-22T12:39:40.000Z</published>
    <updated>2021-12-24T14:18:36.049Z</updated>
    
    <content type="html"><![CDATA[<p>  神仙数学，一起递归式学的，就写在一起吧</p><span id="more"></span><h1 id="行列式和基尔霍夫矩阵"><a href="#行列式和基尔霍夫矩阵" class="headerlink" title="行列式和基尔霍夫矩阵"></a>行列式和基尔霍夫矩阵</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>给定一个无向图 $G(V, E)$ </p><ul><li><p>度数矩阵 $D$ ：当 $i \ne j$ 时，  $D[i][j] = 0$ ，否则  $D[i][j] = 点 i(j) 的度数$ </p></li><li><p>邻接矩阵 $A$ ：当 $(u, v) \in E$ 时， $A[u][v] = 1$ ，否则 $A[u][v] = 0$ </p></li><li><p><strong>基尔霍夫矩阵</strong>(Kirchhoff)  $K$ ，也称<strong>拉普拉斯算子</strong>：定义为 $K = D - A$ ，如图：</p><p><img src="https://s2.loli.net/2021/12/22/VatPLREvlyDocXh.png" alt="K"></p></li><li><p><a href="https://baike.baidu.com/item/%E8%A1%8C%E5%88%97%E5%BC%8F/2010180"><strong>行列式</strong></a>：对于一个 $n \times n$ 的矩阵 $X$ ，其行列式定义为 $\det(X) = \mid X \mid = \sum_{p} (-1)^{\tau(p)} \prod_{i = 1}^n a_{i, p_i}$ ，其中 $p$ 取遍 $1 \sim n$ 的全排列， $\tau(p)$ 表示<strong>排列 $p$ 的逆序对个数</strong>，行列式可以理解为所有列向量所夹的几何体的有向体积，这样可以结合从几何直观出发理解为线性变换的伸缩因子（没有屁用）</p></li><li><p><strong>排列的奇偶性</strong>：定义排列 $p$ 的奇偶性为 $\tau(p)$ 的奇偶性</p></li><li><p><strong>对换</strong>：交换一个排列 $p$ 中的两个元素 $p_i, p_j (i \ne j)$ ，其它元素不变</p></li></ul><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><p>我们来看如何快速求出行列式</p><h3 id="关于排列的奇偶性"><a href="#关于排列的奇偶性" class="headerlink" title="关于排列的奇偶性"></a>关于排列的奇偶性</h3><p>关于排列的奇偶性，有两个性质：</p><ol><li><strong>对于 $n(n \ge 2)$ 阶排列的所有排列情况，奇排列和偶排列各占一半</strong></li><li><strong>一个排列可以通过若干次对换变成一个元素严格递增的自然排列，对换次数的奇偶性与原排列的奇偶性相同</strong></li></ol><h3 id="关于行列式的性质"><a href="#关于行列式的性质" class="headerlink" title="关于行列式的性质"></a>关于行列式的性质</h3><ol><li><p>交换对应矩阵的2行（列），行列式取反</p></li><li><p>交换对应矩阵的1行和1列（进行一次<strong>矩阵转置</strong>），行列式不变</p></li><li><p>行列式的行（列）所有元素等比例变化，则行列式也等比例变化，如图：</p><p><img src="https://s2.loli.net/2021/12/22/Mj3HBxZNmVEyDhz.png" alt="行列k"></p></li><li><p>如果行列式对应矩阵 $A$ 中有一行（列），是对应2个矩阵 $B, C$ 中分别的2行（列）所有元素之和，且 $B, C$ 中其它元素都等于 $A$ 中对于元素，则有  $\mid A \mid = \mid B \mid + \mid C \mid$ ，如图：</p><p><img src="https://s2.loli.net/2021/12/22/aGZFo8zKqbBiefm.png" alt="行列式1"></p></li><li><p>如果一个矩阵存在两行（列）成比例则 $\mid A \mid = 0$ ，如图：</p><p><img src="https://s2.loli.net/2021/12/22/SFQXY2w85KWeJtZ.png" alt="行列式2"></p></li><li><p>把一个矩阵的一行（列）的值全部乘一个常数加到另一行（列）上，行列式值不变，如图：</p><p><img src="https://s2.loli.net/2021/12/22/W31fApMycDaFo5B.png" alt="行列式3"></p></li></ol><h3 id="关于代数余子式"><a href="#关于代数余子式" class="headerlink" title="关于代数余子式"></a>关于代数余子式</h3><p>由于<strong>代数余子式</strong>的定义过于复杂，所以在这里定义：</p><p>在一个 $n$ 阶行列式 $D$ 中选定 $k$ 行 $k$ 列可以组成一个 **$k$ 阶子行列式 $A$**，而删除在 $k$ 行 $k$ 列后剩下的 $n−k$ 阶行列式称为 $A$ 对应的 <strong>$n−k$ 阶余子式 $M$</strong></p><p>设 $A$ 在 $D$ 中的下标集合为 $\{ \mathbb{I}, \mathbb{J} \}$ ，其中 $\mathbb{I} = \{i_k\}$ ， $\mathbb{J} = \{j_k\}$ ，则定义 $(-1)^{(\sum \mathbb{I})(\sum \mathbb{J})} \times \mid M \mid$ 为 $n$ 阶行列式 $D$ 的 $k$ 阶子式 $A$ 的<strong>代数余子式</strong></p><p>对于单一元素 $a_{i,j}$ 我们令其代数余子式为 $A_{i,j}$ ，余子式为 $M_{i,j}$ ，有 $A_{i,j}=(-1)^{i+j}M_{i,j}$ </p><p>那么有如下性质：</p><ol><li><p>$n$ 阶行列式 $D$ 等于其任意一行（列）所有元素与其对应代数余子式的乘积之和，即<br>$$<br>\begin{aligned}<br>D = \sum_{j = 1}^n a_{i, j} \times A_{i, j}, (i \in [1, n]) \\<br>D = \sum_{i = 1}^n a_{i, j} \times A_{i, j}, (j \in [1, n]) \\<br>\end{aligned}<br>$$</p></li><li><p>$n$ 阶行列式 $D$ 的任意一行（列）余另不同的一行（列）对应元素的代数余子式之和为0<br> $$<br> \begin{aligned}<br> \sum_{k = 1}^n a_{i, k} \times A_{j, k} = 0, (i, j \in [1, n] \wedge i \ne j) \\<br> \sum_{k = 1}^n a_{k, i} \times A_{k, j} = 0, (i, j \in [1, n] \wedge i \ne j) \\<br> \end{aligned}<br> $$</p></li></ol><p>以上所有麻烦的要死的性质都不用证明，太好了！</p><h3 id="消元"><a href="#消元" class="headerlink" title="消元"></a>消元</h3><p>我们考虑一个情况，当一个矩阵任意一个位置出现0，看公式中的 $\prod_{i = 1}^n a_{i, p_i}$ ，发现只有有一个0，整个排列就没有贡献了，所以我们的思路就是利用上面（<del>讨厌至极的</del>）性质，让矩阵中出现0</p><p>我们现在考虑将矩阵一行（列）消成只有最后一个元素非0该怎么做，即实现图中变化：</p><p><img src="https://s2.loli.net/2021/12/22/xQysulI6frHmAdc.png" alt="非0"></p><p>利用行列式的性质6，对于1到第 $n−1$ 列中的第 $i$ 列，我们只需要让第 $i$ 列整列加上第 $n$ 列的 $\frac{a_{n,i}}{a_{n,n}}$ 倍就可以在 $\mid A \mid$ 不变的情况下使得整行前 $n−1$ 个元素被消掉</p><p>将最后一行消成只有 $a_{n, n}$ 非0后，由代数余子式的性质1可知 $D = a_{n, n} \times A_{n, n}$ ，其中 $A_{n, n}$ 就是红色矩阵：</p><p><img src="https://s2.loli.net/2021/12/22/lMVqvp7KU6jrifg.png" alt="A"></p><p>然后我们对于这个红色矩阵 $A_{n, n}$ 又消元，有 $A_{n, n} = a_{n - 1, n - 1} \times A_{n - 1, n - 1}$ </p><p>如此一直消元下去，得到的就是一个下三角行列式：</p><p><img src="https://s2.loli.net/2021/12/22/CK8jT1EdYtX9f2g.png" alt="三角"> </p><p>我们就会发现这样一个矩阵的行列式是其对角线所有元素的乘积，也就是 $\prod_{i = 1}^n a_{i, i}$ </p><h3 id="其它细节"><a href="#其它细节" class="headerlink" title="其它细节"></a>其它细节</h3><ul><li>每次取新的余子式的时候需要注意奇偶性，及时变化正负，因为记得代数余子式是要乘上一个 $(-1)^{(\sum \mathbb{I})(\sum \mathbb{J})}$ </li><li>如果题目要求 $\mod p$ 情况下的行列式，有些数是不一定有逆元的，或者说消元的时候精度出问题，我们可以考虑对两行（列）做辗转相减消元</li></ul><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>消元是 $O(n^3)$ 的，辗转相除法是 $O(\log p)$ 的，因为辗转相除和消元每次必然使得数变小，势能只会减少，所以这个是均摊到 $O(n^2)$ 的（我也不懂为啥），总时间为 $O(n^2\log n + n^3) = O(n^3)$ </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.luogu.com.cn/problem/P7112">【模板】行列式求值</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">600</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> P;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">det</span><span class="params">(<span class="keyword">int</span> x[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>, w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (x[i][i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//对第i行和第j行做辗转相减</span></span><br><span class="line"><span class="keyword">int</span> div = x[j][i] / x[i][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= n; ++k)</span><br><span class="line">x[j][k] = (x[j][k] - (LL)div * x[i][k] % P + P) % P;</span><br><span class="line"><span class="built_in">swap</span>(x[i], x[j]);</span><br><span class="line">w = -w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(x[i], x[j]);</span><br><span class="line">w = -w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">res = (LL)x[i][i] * res % P;</span><br><span class="line">res *= w;</span><br><span class="line"><span class="keyword">return</span> (res + P) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">STC <span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;P);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">det</span>(a));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基尔霍夫矩阵"><a href="#基尔霍夫矩阵" class="headerlink" title="基尔霍夫矩阵"></a>基尔霍夫矩阵</h2><p>基尔霍夫矩阵 $K$ 有如下性质：</p><ol><li>基尔霍夫矩阵的每一行或每一列上的元素和都是0</li><li>基尔霍夫矩阵的行列式的值为0</li><li>基尔霍夫矩阵的任意一个代数余子式值都相同</li><li>如果图 $G$ 不连通，基尔霍夫矩阵 $K$ 的任意主子式行列式值为0</li><li>如果图 $G$ 是一棵树，基尔霍夫矩阵 $K$ 的任意一个 $n − 1$ 阶主子式的行列式为1</li></ol><h2 id="Matrix-Tree-定理"><a href="#Matrix-Tree-定理" class="headerlink" title="Matrix-Tree 定理"></a>Matrix-Tree 定理</h2><p><strong>对于已经得出的基尔霍夫矩阵，去掉其第 $k$ 行和第 $k$ 列得出的矩阵的行列式，其绝对值为生成树的个数</strong>，该定理被称为<strong>Matrix-Tree定理（矩阵树定理）</strong></p><p>因此，对于给定的图 $G$ ，若要求其生成树个数，可以先求其基尔霍夫矩阵，然后随意取其任意一个 $n − 1$ 阶行列式，然后求出行列式的值，其绝对值就是这个图中<strong>生成树的个数</strong></p><p>以上的定理适用于<strong>无向无权图无自环</strong>的图，下面是一些拓展</p><h3 id="加权"><a href="#加权" class="headerlink" title="加权"></a>加权</h3><p>如果图中边有边权，可以把<strong>度数矩阵 $D$ 变成边的权值和</strong>，直接用Matrix-Tree 定理，求得的就是<strong>所有生成树边权乘积的总和</strong></p><h3 id="有向"><a href="#有向" class="headerlink" title="有向"></a>有向</h3><p>首先要把邻接矩阵 $A$ 变成有向图的邻接矩阵，然后对于 $D$ ，如果它记录的是<strong>到该点入的边权总和</strong>，那么求得的就是<strong>外向树</strong> (从根向外)，即 $D[i][j] = \sum_{j = 1}^n A[j][i]$ ；类似的，如果它记录的是<strong>到该点出的边权总和</strong>，那么求得的就是<strong>内向树</strong> (从外向根)</p><p>关于如何保证根，巨佬们说：去掉第 $k$ 行 $k$ 列就是以 $k$ 为根</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.luogu.com.cn/problem/P6178">【模板】Matrix-Tree 定理</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300</span> + <span class="number">5</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">det</span><span class="params">(<span class="keyword">int</span> x[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>, w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">2</span>; i &lt;= n; ++i) <span class="comment">//以1为根,故删掉1行1列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (x[i][i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> div = x[j][i] / x[i][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= n; ++k)</span><br><span class="line">x[j][k] = (x[j][k] - (LL)div * x[i][k] % P + P) % P;</span><br><span class="line"><span class="built_in">swap</span>(x[i], x[j]);</span><br><span class="line">w = -w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(x[i], x[j]);</span><br><span class="line">w = -w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">res = (LL)x[i][i] * res % P;</span><br><span class="line">res *= w;</span><br><span class="line"><span class="keyword">return</span> (res + P) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">STC <span class="keyword">int</span> k[N][N];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;t);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line"><span class="keyword">if</span> (t)</span><br><span class="line">&#123;</span><br><span class="line">k[u][v] = (k[u][v] - w + P) % P;</span><br><span class="line">k[v][v] = (k[v][v] + w) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k[u][v] = (k[u][v] - w + P) % P;</span><br><span class="line">k[v][v] = (k[v][v] + w) % P;</span><br><span class="line">k[v][u] = (k[v][u] - w + P) % P;</span><br><span class="line">k[u][u] = (k[u][u] + w) % P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">det</span>(k));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;  神仙数学，一起递归式学的，就写在一起吧&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="图论" scheme="https://dyd-true.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="基尔霍夫矩阵" scheme="https://dyd-true.github.io/tags/%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E7%9F%A9%E9%98%B5/"/>
    
    <category term="矩阵" scheme="https://dyd-true.github.io/tags/%E7%9F%A9%E9%98%B5/"/>
    
    <category term="行列式" scheme="https://dyd-true.github.io/tags/%E8%A1%8C%E5%88%97%E5%BC%8F/"/>
    
    <category term="Matrix-Tree定理" scheme="https://dyd-true.github.io/tags/Matrix-Tree%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/21总结</title>
    <link href="https://dyd-true.github.io/2021/12/22/test2021-12-21%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/22/test2021-12-21%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-22T12:25:34.000Z</published>
    <updated>2021-12-26T06:49:17.035Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="87d7407f86e6de9e962175ddd0f634a1fa15e5b606050fd9b6f612ac84ff67a9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Dydは、パスワードを入力するように求められます</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">爆0了</summary>
    
    
    
    <category term="test" scheme="https://dyd-true.github.io/categories/test/"/>
    
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="基环树" scheme="https://dyd-true.github.io/tags/%E5%9F%BA%E7%8E%AF%E6%A0%91/"/>
    
    <category term="基尔霍夫矩阵" scheme="https://dyd-true.github.io/tags/%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E7%9F%A9%E9%98%B5/"/>
    
    <category term="生成树" scheme="https://dyd-true.github.io/tags/%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>后缀数组</title>
    <link href="https://dyd-true.github.io/2021/12/20/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    <id>https://dyd-true.github.io/2021/12/20/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</id>
    <published>2021-12-20T10:46:41.000Z</published>
    <updated>2021-12-24T14:18:55.528Z</updated>
    
    <content type="html"><![CDATA[<p> 字符串总是让人头疼</p><span id="more"></span><h1 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h1><h2 id="前置知识：基数排序"><a href="#前置知识：基数排序" class="headerlink" title="前置知识：基数排序"></a>前置知识：基数排序</h2><p>首先保证值域为 $[0, n] \wedge \mathbb{Z}$ </p><p>然后统计每个数有多少个，记作 $cnt[i]$ ，然后将 $cnt$ 求出前缀和，此时 $cnt[i]$ 就是“小于等于 $i$ 的数的个数”，倒序扫描每一个数（倒序是为了<strong>使排序稳定</strong>），扫到 $i$ 就令 $i$ 的排名为 $cnt[i]$ ，并 $–cnt[i]$ ，由此就可以做到<strong>单关键字基数排序</strong>，时间为 $O(n)$ </p><p>对于双关键字，我们先对第二关键字进行排序，然后不管第二关键字，只对第一关键字进行基数排序，由于基数排序是稳定的，所以当第一关键字相同时，第二关键字仍然是有序的</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>后缀数组是一种针对字符串的数据结构，为了方便，我们统一令字符串的<strong>下标从1开始</strong></p><ul><li>字符串：由字符组成的序列，用大写字母表示，如 $T = ababbcbac$ ，记其长度为 $len(T)$ </li><li>子串：一个字符串的某一段，记作 $T[2, 5] = babb$ ，其中 $[2, 5]$ 是下标区间</li><li>后缀：一个长度为 $len$ 的字符串有  $len$ 个后缀子串，为 $\{S \mid S = T[i, len], i \in [1, n]\}$ ，为了方便，称从 $i$ 开头的后缀为“第 $i$ 个后缀”，记作 $suf(i)$ （suffix），即 $suf(i) = T[i, len]$ </li><li>前缀：我们将串 $T$ 长度为 $len$ 的前缀 $T[1, len]$ 记为 $T^{len}$  </li><li>后缀数组 $SA[i]$ ：排名第 $i$ 的后缀是 $suf(SA[i])$ ，注意<strong>区别“排名为 $i$ ”和“第 $i$ 个后缀”</strong></li><li>排名数组 $rk[i]$ ：第 $i$ 个后缀的排名是 $rk[i]$ </li><li>$hei[i]$ （height）： $suf(SA[i])$ 与 $suf(SA[i - 1])$ 的LCP（最长公共前缀），<strong>可指字符串，也可指长度</strong></li><li>$lcp(i, j)$ ： $suf(SA[i])$ 和 $suf(SA[j])$ 的LCP</li><li> $h(i)$ ：第 $i$ 个后缀与排名在其前面的第一个后缀的LCP，即 $h(i) = height[rk[i]]$ </li></ul><h2 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h2><h3 id="SA-rk"><a href="#SA-rk" class="headerlink" title="SA/rk"></a>SA/rk</h3><p>求后缀数组 $SA$ 一般用<strong>倍增算法</strong>求出（同时 $rk$ 也就求出来了），时间复杂度为 $O(n \log n)$ </p><p>首先我们想如何对 $\{suf(i)\}$ 排序，由整数排序的方法我们知道，至少要进行 $n \log n$ 次比较，但是，字符串比较的时间复杂度为 $O(n)$ ，故直接比较时间为 $O(n^2 \log n)$ </p><p>不难想到，如果能让字符串对应上数字（且大小关系对应）不就可以直接比较了吗？倍增算法就基于此，其流程如下：</p><ol><li>假设我们要比较 $\{S_i[l, r]\}$ ，取 $mid = \frac{l + r}{2}$ ，递归比较 $\{S_i[l, mid]\}$ 和 $\{S_i[mid + 1, r]\}$ ；递归的边界是当 $S_i[l, r]$ 只有一个字符，可以直接排序</li><li>假设递归完毕，则 $\{S_i[l, mid]\}$ 和 $\{S_i[mid + 1, r]\}$ 已经有序，扫一遍可以把他们离散化到整数，设 $S_i[p, q] \rightarrow A_i[p, q]$ ，现在 $S_i[l, r]$ 被变成了整数二元组 $(A_i[l, mid], A_i[mid + 1, r])$ ，直接排序即可</li></ol><p>以上会递归 $\log n$ 层，每次基数排序为 $O(n)$ ，总时间复杂度为 $O(n \log n)$ 具体实现时常用循环代替递归</p><p>ps：其实有 $O(n)$ 的DC3算法，但不常用（常数大+难打），有时间再写吧（挖坑）</p><h3 id="hei"><a href="#hei" class="headerlink" title="hei"></a>hei</h3><p>首先证明三个引理：</p><p><strong>引理1</strong>：<br>$$<br>lcp(i, j) = \min(lcp(i, k), lcp(k, j)),i \le k \le j<br>$$<br>即对于任意的 $i \le k \le j$ ，排名第 $i$ 的后缀和排名第 $j$ 的后缀的LCP就是排名第 $k$ 的后缀和它们分别的LCP中较小值</p><p><img src="https://s2.loli.net/2021/12/20/fOrihaHRVncWGz6.png" alt="引理1"></p><p>证明：</p><p>排名为 $i$ 的后缀为 $S_i$ ，设 $T = \min(lcp(i, k), lcp(k, j)), R = lcp(i, j)$ </p><p>首先若 $R &lt; T$ ，那么由于 $lcp(i, k) \ge T$ ，所以 $i$ 的一定有前缀 $T$ ，而 $j$ 也有前缀 $T$ ，则 $lcp(i, j) = T$ ，矛盾，故 $lcp(i, j) \ge T$ </p><p>然后若 $R &gt; T$ ，那么因为 $S_i[1, R] = S_j[1, R]$ ，又z因为排名， $S_i[1, R] \le S_k[1, R] \le S_j[1, R]$ ，则 $S_i[1, R] = S_k[1, R] = S_j[1, R]$ ，则 $T = R$ ，矛盾</p><p>综上，$T = R$ 引理得证</p><p><strong>引理2</strong>：<br>$$<br>lcp(i, j) = \min(lcp(i, i + 1), lcp(i + 1, i + 2), …, lcp(j - 1, j)), i \le j<br>$$<br>即对于任意的 $i \le j$ 排名第 $i$ 的后缀和排名第 $j$ 的后缀的LCP就是它们之间的后缀（包括它们）中相邻两个的LCP的最小值</p><p>证明：</p><p>由引理1，有 $\min(lcp(i, i + 1), lcp(i + 1, i + 2)) = lcp(i, i + 2)$ 不断以此类推，即得引理2</p><p>这个引理也可以表示为：<br>$$<br>lcp(i, j) = \min_{i &lt; k \le j} \{ hei[k]\}<br>$$<br>用这个引理可以<strong>将后缀的LCP转化为RMQ</strong>，ST表可以做到 $O(1)$ </p><p><strong>引理3</strong>：<br>$$<br>hi(i) \ge hi(i - 1) - 1<br>$$<br> $hi(i - 1) \le 1$ 时显然成立</p><p>当 $hi(i - 1) &gt; 1$ 时，不妨设 $k = SA[rk[i - 1] - 1]$ ，即排名在第 $i$ 个后缀（不是排名为 $i$ 的后缀）前面的第一个后缀是第 $k$ 个后缀，同理设 $r = SA[rk[i] - 1]$ </p><p>有 $hi(i - 1) = lcp(suf(i - 1), suf(k))$ ，将这两个字符串各自去掉第一个字符，因为它们的LCP大于1，所以这个字符一定相等，则有 $lcp(suf(k + 1), suf(i)) = hi(i - 1) - 1$ 且 $suf(k + 1)$ 排在 $suf(i)$ 前面，则由引理1有<br>$$<br>\begin{aligned}<br>hi(i - 1) - 1<br>&amp;= lcp(suf(k + 1), suf(i))\\<br>&amp;= \min(lcp(suf(k + 1), suf(r)), lcp(suf(r), suf(i)))\\<br>&amp;\le lcp(suf(r), suf(i))\\<br>&amp;= hi(i)<br>\end{aligned}<br>$$<br>故 $hi(i) \ge hi(i - 1) - 1$ </p><p>有了上面三个引理，我们来看如何求 $hei$ </p><p>我们枚举 $1 \le i \le n$ ，计算 $hei[rk[i]]$ </p><p>对于 $rk[i] = 1$ ，不必管，因为 $hei[1] = 0$ ，否则令 $k = hi(i - 1) - 1$ （特别的，若 $hi(i - 1) \le 1$ ，就让 $k = 0$ ），然后暴力求 $k$ 还能向后走多少，易知时间为 $O(n)$  </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.acwing.com/problem/content/2717/">模板</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> sa[N], rk[N], hei[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">(<span class="keyword">int</span> _num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">STC <span class="keyword">int</span> x[N], y[N], c[N]; <span class="comment">//排序用,第一关键字,第二关键字,cnt</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">++c[x[i] = s[i]]; <span class="comment">//第一次只有一个字符,不必离散化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= _num; ++i)</span><br><span class="line">c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">sa[c[x[i]]--] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>, num; k &lt;= n; k &lt;&lt;= <span class="number">1</span>) <span class="comment">//k枚举关键字长度,合并后长度应为2k</span></span><br><span class="line">&#123;</span><br><span class="line">num = <span class="number">0</span>; <span class="comment">//记录离散化后的值域</span></span><br><span class="line"><span class="comment">//先以第二关键字排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">1</span>; i &lt;= n; ++i)  <span class="comment">//没有第二关键字的牌最前</span></span><br><span class="line">y[++num] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (sa[i] &gt; k)</span><br><span class="line">y[++num] = sa[i] - k;</span><br><span class="line"><span class="comment">//以第一关键字排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _num; ++i)</span><br><span class="line">c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">++c[x[i]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= _num; ++i)</span><br><span class="line">c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">sa[c[x[y[i]]]--] = y[i], y[i] = <span class="number">0</span>;  <span class="comment">//这里清空y实际上是清空x,因为后面交换了</span></span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="comment">//将排好序的字符串离散化</span></span><br><span class="line">x[sa[<span class="number">1</span>]] = num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">x[sa[i]] = (y[sa[i]] == y[sa[i - <span class="number">1</span>]] &amp;&amp; y[sa[i] + k] == y[sa[i - <span class="number">1</span>] + k]) ? num : ++num;</span><br><span class="line"><span class="keyword">if</span> (num == n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">_num = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">rk[sa[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_hei</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rk[i] == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (k)</span><br><span class="line">--k;</span><br><span class="line"><span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (i + k &lt;= n &amp;&amp; j + k &lt;= n &amp;&amp; s[i + k] == s[j + k])</span><br><span class="line">++k;</span><br><span class="line">hei[rk[i]] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">get_sa</span>(<span class="string">&#x27;z&#x27;</span>);</span><br><span class="line"><span class="built_in">get_hei</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, hei[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>SA的应用主要是通过引理2来实现的</p><h3 id="多模式串的匹配"><a href="#多模式串的匹配" class="headerlink" title="多模式串的匹配"></a>多模式串的匹配</h3><p>考虑如下问题：给定模式串 $P$ 和长度为 $n$ 的文本串 $T$ 询问 $P$ 在 $T$ 中出现的情况</p><p>当 $P$ 只有一个时，就是kmp，当有多个 $P$ 时，也可以AC自动机，以上算法都是 $O(n)$ 的，那么后缀数组如何比较好的解决该问题</p><p>首先不难想到， $T$ 的任意一个子串都一定可以对应到唯一一个后缀的前缀，具体的， $T[l, r] \leftrightarrow suf(l)^r$ </p><p>那么考虑构造出 $T$ 的后缀数组，由于 $T$ 的后缀已经被排好了序，可以二分查找每个后缀是否有前缀 $P$ ，具体的，若我们二分到了区间 $[l, r]$ ：</p><ol><li>如果 $P$ 是 $suf(SA[mid])$ 的前缀，说明这就是 $P$ 在 $T$ 中的出现，所有 $lcp(mid, j) \ge len(P)$ 的 $j$ 也是 $P$ 的出现</li><li>如果 $P \le suf(SA(mid))$ ，进入区间 $[l, mid - 1]$ ，否则进入 $[mid + 1, r]$ </li></ol><p>以上算法的时间复杂度为 $O(len(P) \log n)$ ，时间主要消耗在第二步的比较上，可以用 $hei$ 数组优化</p><p>假设到当前为止，获得的最大前缀匹配长度为 $maxlen$ ，其对应的后缀位置为 $SA[pos]$ ，即 $P^{maxlen} = suf(SA[pos])^{maxlen}$ ，对于当前位置 $mid$ ，求出 $len = lcp(mid, pos)$  （这可以ST表 $O(1)$ 求出），分类讨论：</p><ol><li> $len &lt; maxlen$ ，由匹配的最大性可知 $suf(SA[mid])$ 的第 $len + 1$ 个字符一定不同于 $P$ 的第 $len + 1$ 个字符，直接比较这两个字符即可</li><li> $len \ge maxlen$ ，从 $maxlen + 1$ 开始比较 $P$ 和 $suf(SA[mid])$ ，完成后更新 $maxlen$ 和 $pos$ </li><li>当 $maxlen = len(P)$ 时，匹配完成</li></ol><p>以上过程中， $maxlen$ 是不下降的，加上一个二分，在不考虑预处理的情况下，时间复杂度为 $O(len(P) + \log n)$ （然而，就算是用DC3 $O(n)$ 求出后缀数组，ST表预处理还是 $O(n \log n)$ ）</p><p>代码如下：</p><p><a href="https://www.luogu.com.cn/problem/P3808">【模板】AC自动机（简单版）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e6</span> + <span class="number">5</span>, D = <span class="number">30</span>; <span class="comment">//开大点</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> T[N], P[N], s[N];</span><br><span class="line"><span class="keyword">int</span> sa[N], rk[N], hei[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> mn[N][D];</span><br><span class="line"><span class="keyword">int</span> log_2[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prev</span><span class="params">(<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">log_2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">log_2[i] = log_2[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">mn[i][<span class="number">0</span>] = x[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= log_2[n] + <span class="number">1</span>; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; ++i)</span><br><span class="line">mn[i][j] = <span class="built_in">min</span>(mn[i][j - <span class="number">1</span>], mn[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t = log_2[r - l + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(mn[l][t], mn[r - (<span class="number">1</span> &lt;&lt; t) + <span class="number">1</span>][t]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; st;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">(<span class="keyword">int</span> _num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">STC <span class="keyword">int</span> x[N], y[N], c[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">++c[x[i] = T[i]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= _num; ++i)</span><br><span class="line">c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">sa[c[x[i]]--] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>, num; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">y[++num] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (sa[i] &gt; k)</span><br><span class="line">y[++num] = sa[i] - k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _num; ++i)</span><br><span class="line">c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">++c[x[i]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= _num; ++i)</span><br><span class="line">c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">sa[c[x[y[i]]]--] = y[i], y[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line">x[sa[<span class="number">1</span>]] = num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">x[sa[i]] = (y[sa[i]] == y[sa[i - <span class="number">1</span>]] &amp;&amp; y[sa[i] + k] == y[sa[i - <span class="number">1</span>] + k]) ? num : ++num;</span><br><span class="line"><span class="keyword">if</span> (num == n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">_num = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">rk[sa[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_hei</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rk[i] == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (k)</span><br><span class="line">--k;</span><br><span class="line"><span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (i + k &lt;= n &amp;&amp; j + k &lt;= n &amp;&amp; T[i + k] == T[j + k])</span><br><span class="line">++k;</span><br><span class="line">hei[rk[i]] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == y)</span><br><span class="line"><span class="keyword">return</span> n - sa[x] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; y)</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="keyword">return</span> st.<span class="built_in">ask</span>(x + <span class="number">1</span>, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">suf</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> T + x - <span class="number">1</span>; <span class="comment">//减1是为了让下标从1开始</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">2</span>, r = n, m = <span class="built_in">strlen</span>(x + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">1</span>, mxl = <span class="number">0</span>; <span class="comment">//pos初值不能为0,否则ST表会RE</span></span><br><span class="line"><span class="keyword">char</span> *t = <span class="built_in">suf</span>(sa[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">while</span> (mxl &lt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sa[<span class="number">1</span>] + mxl &gt; n || t[mxl + <span class="number">1</span>] != x[mxl + <span class="number">1</span>]) <span class="comment">//为防止越界</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">++mxl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mxl == m)</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">lcp</span>(mid, pos);</span><br><span class="line">t = <span class="built_in">suf</span>(sa[mid]); <span class="comment">//这里一定是sa[mid]不是mid</span></span><br><span class="line"><span class="keyword">if</span> (len &gt;= mxl)</span><br><span class="line">&#123;</span><br><span class="line">len = mxl;</span><br><span class="line">pos = mid;</span><br><span class="line"><span class="keyword">while</span> (len &lt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sa[mid] + len &gt; n || t[len + <span class="number">1</span>] != x[len + <span class="number">1</span>]) <span class="comment">//为防止越界</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">++len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (len == m)</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sa[mid] + len &gt; n || x[len + <span class="number">1</span>] &gt; t[len + <span class="number">1</span>])</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q, ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, cs = <span class="number">0</span>; i &lt;= q; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch &lt; <span class="string">&#x27;a&#x27;</span> || ch &gt; <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">s[++cs] = ch, ch = <span class="built_in">getchar</span>();</span><br><span class="line">s[++cs] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, T + <span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">strlen</span>(T + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">get_sa</span>(<span class="string">&#x27;z&#x27;</span>);</span><br><span class="line"><span class="built_in">get_hei</span>();</span><br><span class="line">st.<span class="built_in">prev</span>(hei);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, cs = <span class="number">1</span>, j; i &lt;= q; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; s[cs] != <span class="string">&#x27;$&#x27;</span>; ++cs, ++j)</span><br><span class="line">P[j] = s[cs];</span><br><span class="line">++cs;</span><br><span class="line">P[j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(P) != <span class="number">-1</span>)</span><br><span class="line">++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 字符串总是让人头疼&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="字符串" scheme="https://dyd-true.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="分治" scheme="https://dyd-true.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="数据结构" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="后缀数组,SA" scheme="https://dyd-true.github.io/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-SA/"/>
    
    <category term="LCP" scheme="https://dyd-true.github.io/tags/LCP/"/>
    
  </entry>
  
  <entry>
    <title>test2021/12/20总结</title>
    <link href="https://dyd-true.github.io/2021/12/20/test2021-12-20%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2021/12/20/test2021-12-20%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-20T07:52:30.000Z</published>
    <updated>2021-12-26T06:49:11.523Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ed335c3bf68d2a0fa54d6c7c13beac672c0e6ce951cdfbc3e932463d28cf8385"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Dydは、パスワードを入力するように求められます</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">死磕一道题是很危险的……</summary>
    
    
    
    <category term="test" scheme="https://dyd-true.github.io/categories/test/"/>
    
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="线段树" scheme="https://dyd-true.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="网络流" scheme="https://dyd-true.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="莫比乌斯反演" scheme="https://dyd-true.github.io/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
    <category term="二分" scheme="https://dyd-true.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="杜教筛" scheme="https://dyd-true.github.io/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
    <category term="优先队列" scheme="https://dyd-true.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
</feed>
