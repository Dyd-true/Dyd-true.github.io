<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dyd&#39;s Blog</title>
  
  <subtitle>He who has a strong enough why can bear almost any how.</subtitle>
  <link href="https://dyd-true.github.io/atom.xml" rel="self"/>
  
  <link href="https://dyd-true.github.io/"/>
  <updated>2022-01-26T03:27:55.094Z</updated>
  <id>https://dyd-true.github.io/</id>
  
  <author>
    <name>Dyd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>松氏基排</title>
    <link href="https://dyd-true.github.io/2022/01/26/%E6%9D%BE%E6%B0%8F%E5%9F%BA%E6%8E%92/"/>
    <id>https://dyd-true.github.io/2022/01/26/%E6%9D%BE%E6%B0%8F%E5%9F%BA%E6%8E%92/</id>
    <published>2022-01-26T03:01:38.000Z</published>
    <updated>2022-01-26T03:27:55.094Z</updated>
    
    <content type="html"><![CDATA[<p> 递归式学习3</p><span id="more"></span><h1 id="松氏基排"><a href="#松氏基排" class="headerlink" title="松氏基排"></a>松氏基排</h1><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>基数排序（Radix sort）是一种非比较型的排序算法，它的工作原理是将待排序的元素拆分为 $k$ 个关键字（比较两个元素时，先比较第一关键字，如果相同再比较第二关键字……），然后先对第 $k$ 关键字进行稳定排序，再对第 $k - 1$ 关键字进行稳定排序，再对第 $k - 2$ 关键字进行稳定排序……最后对第一关键字进行稳定排序，这样就完成了对整个待排序序列的稳定排序</p><p><img src="https://s2.loli.net/2022/01/26/FDZeXLCouKpSnWq.png" alt="radix sort"></p><p>如图，要对这些数字排序，我们以百位为第一关键字，十位为第二关键字，个位为第三关键字</p><p>先用第三关键字（个位）稳定排序，再用十位、百位，最后就得出答案</p><p>基数排序需要借助一种<strong>稳定算法</strong>完成内层对关键字的排序，一般是桶排</p><p>当然，一般来说可不会以 $10$ 为基数，因为这样一个 <code>int</code> 要排 $9$ 遍，太麻烦</p><h2 id="松式基排"><a href="#松式基排" class="headerlink" title="松式基排"></a>松式基排</h2><p>那基数取多少好呢？</p><p>一般基排取的是 $65536$ （ $2^{16}$ ），空间开的下，只用排两遍</p><p>可wys大佬说，取 $256$ ，用位运算把一个数拆成四部分，要排四遍，但这样的话 <code>cnt</code> 数组刚好能装进 $L1$ 高速缓存（我也不知道那是啥）</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> geted(x, d) (((x) &gt;&gt; ((d) * Bit)) &amp; (R - 1))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Bit = <span class="number">8</span>, R = <span class="number">256</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> cnt[R], t[N];</span><br><span class="line">    <span class="keyword">int</span> *x = a, *y = t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; <span class="number">4</span>; ++d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; ++i)</span><br><span class="line">            cnt[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            ++cnt[<span class="built_in">geted</span>(x[i], d)];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; R; ++i)</span><br><span class="line">            cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            y[--cnt[<span class="built_in">geted</span>(x[i], d)]] = x[i];</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        a[i] = x[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">radix_sort</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 递归式学习3&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="排序" scheme="https://dyd-true.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>jarvis步进法</title>
    <link href="https://dyd-true.github.io/2022/01/26/jarvis%E6%AD%A5%E8%BF%9B%E6%B3%95/"/>
    <id>https://dyd-true.github.io/2022/01/26/jarvis%E6%AD%A5%E8%BF%9B%E6%B3%95/</id>
    <published>2022-01-26T02:40:17.000Z</published>
    <updated>2022-01-26T03:03:33.806Z</updated>
    
    <content type="html"><![CDATA[<p> 递归式学习2</p><span id="more"></span><h1 id="jarvis步进法"><a href="#jarvis步进法" class="headerlink" title="jarvis步进法"></a>jarvis步进法</h1><p>又名卷包裹法，是一种求凸包的算法，时间为 $O(n H)$ （ $H$ 为凸包上的点数）</p><p>一般来说很不常用，但总有些毒瘤要考</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>卷包裹就行了，从左下角（一定在凸包内的点）开始，想象一条线，线的一端固定在当前点上，把线竖直向凸包外拉使其绷紧（此时线上只有左下角的点），再逆时针旋转直到碰到一个点，这个点就是新的当前点，一直下去直到线包裹整个图形</p><p>代码就咕了，反正也几乎用不到，我要回溯了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 递归式学习2&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算几何" scheme="https://dyd-true.github.io/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
    <category term="凸包" scheme="https://dyd-true.github.io/tags/%E5%87%B8%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>闵可夫斯基和</title>
    <link href="https://dyd-true.github.io/2022/01/26/%E9%97%B5%E5%8F%AF%E5%A4%AB%E6%96%AF%E5%9F%BA%E5%92%8C/"/>
    <id>https://dyd-true.github.io/2022/01/26/%E9%97%B5%E5%8F%AF%E5%A4%AB%E6%96%AF%E5%9F%BA%E5%92%8C/</id>
    <published>2022-01-25T23:53:25.000Z</published>
    <updated>2022-01-26T02:41:05.566Z</updated>
    
    <content type="html"><![CDATA[<p> 递归式学习</p><span id="more"></span><h1 id="闵可夫斯基和"><a href="#闵可夫斯基和" class="headerlink" title="闵可夫斯基和"></a>闵可夫斯基和</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>比较严谨的定义：两个图形 $A, B$ 的闵可夫斯基和 $C = \{a + b |a \in A, b \in B \}$ </p><p>我的李姐：对于图形 $A$ 中每个点和图形 $B$ 中每个点两两求和（ $(x_a, y_a) + (x_b, y_b) = (x_a + x_b, y_a + y_b)$ ）</p><p>盗张图：<img src="https://s2.loli.net/2022/01/26/LEFlZoq7YCzudve.png" alt="闵可夫斯基和"></p><p>粉色区域是三角形和一个不规则四边形的闵可夫斯基和</p><h2 id="有啥用"><a href="#有啥用" class="headerlink" title="有啥用"></a>有啥用</h2><p>当然说有用我才来递归式学习的了</p><p>一般用在求凸包上，就以我学这个东西的目的为例吧（顺便说说凸包有啥用）</p><p>比如，我们维护了区间和，区间最大后缀和，区间最大前缀和，区间最大子段和分别取名叫 $sum, lmx, rmx, mx$ </p><p>现在我们要区间加 $k$ ，怎么维护？最简单的是 $sum$  就不管了</p><p>较难的是 $lmx, rmx$ ，以 $rmx$ 为例（注意它是区间最大<strong>前缀和</strong>，取名为 $r$ 只是因为它在右子树），我们要维护函数 $y = pre(x) + k * x$ 的最大值，其中 $pre(x)$  代表 $[l, x]$ 的和（前缀和）；考虑斜率优化，我们将函数化为 $pre(x) = kx + y$ ，就是把 $(x, pre(x))$ 看做是一个个点，把斜率为 $k$ 的直线带入这一个个点中，最大化截距，不难发现这就是在凸包上二分切点，因为此时凸包中的所有点都在直线的一侧，自然是在直线上的点代进去之后截距最大</p><p>而最毒瘤的就是 $mx$ 了，仿造上面，写出式子： $y = as(x) + k * x$ ，其中 $as(x)$ 代表长度为 $x$ 的最大子段和，但是，求出 $as(x)$ 是 $n^2$ 的，有救吗？有救</p><p>考虑分治，我们关心的就是 $(x, as(x))$ 这个点集构成的凸包，不妨来看看 $mx$ 的推导式（在线段树上用过无数次的那个）： <code>mx[l][r] = max(mx[l][mid], mx[mid + 1][r], lmx[l][mid] + r[mid + 1][r])</code> ，发现前两个可以直接递归求 $[l, mid]$ 和 $[mid + 1, r]$ 的凸包解决，麻烦的是最后那个求和的式子，不难发现它代表的是“跨过 $mid$ 的区间”</p><p>考虑我们要求的是什么，是 $(x, as(x))$ 的凸包，将，每个跨过 $mid$ 的区间化作一个点 $(x, y)$ ， $x$ 代表区间长度， $y$  代表区间和，就是求这个点集（设为 $C$ ）的凸包</p><p>点集大小是 $O(n^2)$ 的，当然不能直接求，设点集 $A = \{(x, y) | x \in [l, mid], y = suf(x)\}$ ，其中 $suf(x)$ 表示区间 $[l, mid]$  的后缀和；再设 $B = \{(x, y) | x \in [mid + 1, r], y = pre(x)\}$ ，其中 $pre(x)$ 表示区间 $[mid + 1, r]$  的前缀和；那么， $C = \{(x, y) | x = x_A + x_B, y = y_A + y_B\}$ ，这就是闵可夫斯基和呀</p><p>而用闵可夫斯基和，我们可以 $O(n)$  归并出点集 $C$  的凸包</p><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>那怎么合并呢？再看图（回去翻那张）</p><p>我们（<del>baidu得</del>）发现发现新的凸包就是原来的两个凸包的边重新极角排序一边，证明？咕咕咕</p><p>于是我们得到了一个很有用的结论，求凸包只需要求原来的凸包，然后在一起重新排序就可以了。</p><p>但直接重排有点浪费，由于原来两个凸包都已经求好了，于是可以类似归并排序，重新归并一次</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>例题就不讲了，我要回溯去递归下一条路径了（dfs式学习，艹）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL x, y;</span><br><span class="line">    <span class="comment">//friend老香了</span></span><br><span class="line">    IL FR Point <span class="keyword">operator</span> + (Point x, Point y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x.x + y.x, x.y + y.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    IL FR Point <span class="keyword">operator</span> - (Point x, Point y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x.x - y.x, x.y - y.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    IL FR <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (Point x, Point y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x.y * y.x &lt;= x.x * y.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hull</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Point *st;</span><br><span class="line">    <span class="keyword">int</span> top, now;</span><br><span class="line">    IL Point&amp; <span class="keyword">operator</span> [] (<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> st[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">const</span> Point&amp; x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        st[x.x].y = <span class="built_in">max</span>(st[x.x].y, x.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> Point&amp; x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        st[++top] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">prev</span><span class="params">(<span class="keyword">int</span> len)</span> <span class="comment">//预处理,长度为x的答案对应其位置,方便ins</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">            st[i] = &#123;i, -INF&#125;;</span><br><span class="line">        top = len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">convex</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top &lt;= <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>, len = top, top = <span class="number">2</span>; i &lt;= len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (st[i].y == -INF)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span> (top &gt; <span class="number">1</span> &amp;&amp; (st[top] - st[top - <span class="number">1</span>]) &lt;= (st[i] - st[top - <span class="number">1</span>]))</span><br><span class="line">                --top;</span><br><span class="line">            st[++top] = st[i];</span><br><span class="line">        &#125;</span><br><span class="line">        now = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL LL <span class="title">maxv</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (now != top &amp;&amp; (-tag) * (st[now + <span class="number">1</span>].x - st[now].x) &lt; (st[now + <span class="number">1</span>].y - st[now].y))</span><br><span class="line">            ++now;</span><br><span class="line">        <span class="keyword">return</span> tag * st[now].x + st[now].y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">minkowski</span><span class="params">(Hull&amp; c, Hull&amp; a, Hull&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line">    c.<span class="built_in">ins</span>(a[i] + b[j]);</span><br><span class="line">    <span class="keyword">while</span> (i != a.top &amp;&amp; j != b.top)</span><br><span class="line">    &#123;</span><br><span class="line">        (a[i + <span class="number">1</span>] - a[i]) &lt;= (b[j + <span class="number">1</span>] - b[j]) ? ++j : ++i;</span><br><span class="line">        c.<span class="built_in">ins</span>(a[i] + b[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i != a.top)</span><br><span class="line">        c.<span class="built_in">ins</span>(a[++i] + b[j]);</span><br><span class="line">    <span class="keyword">while</span> (j != b.top)</span><br><span class="line">        c.<span class="built_in">ins</span>(a[i] + b[++j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个板子优点是快，缺点是指针需要人工分配内存</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 递归式学习&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算几何" scheme="https://dyd-true.github.io/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
    <category term="凸包" scheme="https://dyd-true.github.io/tags/%E5%87%B8%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>大力分块2</title>
    <link href="https://dyd-true.github.io/2022/01/25/%E5%A4%A7%E5%8A%9B%E5%88%86%E5%9D%972/"/>
    <id>https://dyd-true.github.io/2022/01/25/%E5%A4%A7%E5%8A%9B%E5%88%86%E5%9D%972/</id>
    <published>2022-01-25T13:54:00.000Z</published>
    <updated>2022-01-27T03:17:56.635Z</updated>
    
    <content type="html"><![CDATA[<p> 再续前缘</p><span id="more"></span><h1 id="大力分块2"><a href="#大力分块2" class="headerlink" title="大力分块2"></a>大力分块2</h1><p>又来找虐</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>可以见<a href="http://localhost:4000/2022/01/24/%E5%A4%A7%E5%8A%9B%E5%88%86%E5%9D%97/#more">大力分块</a>，这是它的续</p><p>开始之前，大喊一声：我爱lxl！</p><h2 id="第六分块"><a href="#第六分块" class="headerlink" title="第六分块"></a>第六分块</h2><p><strong>「深浅值藏的第六分块」</strong>（<del>让luogu臭名昭著的研究珂学最佳方式</del>）</p><p><a href="https://www.luogu.com.cn/problem/P4118">末日时在做什么？有没有空？可以来拯救吗？</a></p><p>维护一个序列，支持两种操作：把区间 $[l, r]$ 加 $x$ ；查询区间 $[l, r]$ 最大子段和， $n, m \le 10^5$ ，任意时刻 $|a| \le 2 \times 10^9$ ， $1s, 64MB$ </p><p>下面是我脑内的处理过程：</p><h3 id="dfs预处理"><a href="#dfs预处理" class="headerlink" title="dfs预处理"></a>dfs预处理</h3><p>额……前置知识有点多，等我去递归式学习一手</p><p>尴尬了，递归了一会发现自己爆栈了……我太弱了！！！</p><p>但硬着头皮想（he）一（ti）想（jie）吧</p><h3 id="弱化版"><a href="#弱化版" class="headerlink" title="弱化版"></a>弱化版</h3><p>先想一个弱化的问题：没有修改，求区间最大子段和，这就是猫树的板子（线段树也行），不管了</p><p>稍微强一点的：全局修改，求区间最大子段和</p><p>猫树直接爆炸，考虑线段树，线段树上维护 $sum, suf, pre, as$ ，表示区间和、区间最大后缀和、区间最大前缀和、区间最大子段和，在全局加的情况下，我们如何维护这几个数字呢？</p><p> $sum$ 直接加即可</p><p> $pre$ 可以维护一个凸函数 $f(x)$ 表示长度为 $x$ 的前缀和，最大化 $pre = f(x) + d * x$ ，改写为 $f(x) = d * x + pre$ ， $f(x)$ 可以 $O(n)$  求，然后斜率优化，二分凸包最大化截距即可； $suf$ 同理维护 $g(x)$ </p><p> $as$ 也尝试维护一个凸函数 $h(x)$ 表示长度为 $x$ 的大子段和，也去凸包二分……但 $h(x)$ 可没法 $O(n)$ 求啊</p><p>考虑用下一层节点的信息，取子节点的 $g_l, f_r, h_l, h_r$ ，有 $h(x + y) = \max(h_l(x + y), h_r(x + y), g_l(x) + f_r(y))$ ，前两项直接继承，第三项闵可夫斯基和解决，都是线性的</p><p>终于，我们有了 $O(n \log n)$ 建树，求答案时对线段树每一个凸包二分，是 $O(\log^2 n)$ </p><h3 id="TLE版"><a href="#TLE版" class="headerlink" title="TLE版"></a>TLE版</h3><p>好，那区间修改怎么办？我们上面的做法可不支持区间修改呀！</p><p>考虑分块暴力，对每一块建一棵线段树，整块直接修改，散点直接重构，查询时整块在根节点二分凸包，散点就当线段树查询</p><p>设块长为 $B$ ，整块修改 $O(1)$ ，散点重构 $O(B \log B)$ ，整块查询 $O(\log B)$ ，散点查询 $O(\log^2 B)$ ，每次操作最多涉及 $\frac{n}{B}$ 个整块和两个散点，取 $B = \sqrt{n}$ ，时间复杂度为 $O(m \sqrt{n} \log \sqrt{n})$ ，还有个大常数，这不T上天，而且空间也上天了</p><p>空间可以离线逐块处理，时间上，一看是lxl的题，当然选择保留 $\sqrt{n}$ ，优化掉 $\log \sqrt{n}$ ，发现复杂度的 $\log$ 存在于两个地方：散点的重构和整块的查询（散点查询每次操作最多做两次，不是瓶颈）</p><h3 id="散点优化"><a href="#散点优化" class="headerlink" title="散点优化"></a>散点优化</h3><p>重构整棵线段树当然是 $B \log B$ ，但真的需要重构整棵吗？</p><p>我们重构的原因是本题中线段树只支持整体修改，不支持某一段修改，那么，当我们递归到某一段 $[l ,r]$ 已经完全被修改区间包含，为什么不直接打懒标记呢？</p><p>为了让这个懒标记区别于原来的懒标记，我们把它打在凸包上<strong>不下放</strong>，取凸包内节点的时候考虑叠加的正比例函数对点的位置的影响即可，而把原来的不打在树上，开一个变量单独存</p><p>因为每层只有一个节点（最左or最右）没完全被包含，所以每层只有 $O(1)$ 的节点被重构，这层的 $1$ 个节点对应下面的 $2$ 个，再下面 $4$ 个……等比数列求和，总的是 $O(B)$ 的</p><h3 id="整块优化"><a href="#整块优化" class="headerlink" title="整块优化"></a>整块优化</h3><p>首先，整体查询一定是提取线段树根上面那个凸包，而因为整体修改的标记在一个全块共用的变量上，所以根上一定是没有标记的；其次由于我们逐块处理，两个修改间的查询顺序是任意的，综上，我们考虑把所有查询按照查询时整体加标记的值升序排序，然后转换成整体加只加正数（先把标记减了就好）</p><p>这里我不是很李姐，巨佬们说由于区间加的都是正数，可以维护一个当前的最优决策点 $p$ ，决策点只会向右移动，暴力的向右爬一下即可，散点修改重构凸包的时候，直接把指针重置</p><p>这样处理询问的均摊复杂度是 $O(B)$ ，简证（<del>口胡</del>）：</p><p>定义一个块的 $E$ 为根上面的指针距离块右端点的距离，显然最开始的时候，所以块的 $E$ 和 $sum_E = n$ ，每次操作，最多有 $2$ 个散点所在块被重构，导致这两个块指针重置， $sum_E$ 增加 $2B$ ，所以总的 $sum_E$ 在过程中增加最多 $2mB$ ，而让 $sum_E$ 减少的唯一方法就是爬指针，每次减少至少 $1$ ，当 $sum_E = 0$ 时指针显然不会再爬（都到了右端点，不能再往右了），所以指针最多移动 $\frac{n + 2mB}{1}$ 次，时间为 $O(mB)$ ，均摊到每一次操作，就是 $O(B)$ </p><p>一个小点：排序时用基数排序，把总排序时间从 $O(m B \log m)$ 优化到 $O(mB)$ </p><p>到此为止，散点修改 $O(B)$ ，散点查询 $O(\log^2 B)$ ，整块修改 $O(1)$ ，整块查询 $O(B)$ （这里整块查询指一次操作中的所有整块时间和），取  $B = \sqrt{n}$ ，时间复杂度为 $O(m \sqrt{n})$ ，似乎行了？可能吗，这可是lxl啊</p><h3 id="卡常"><a href="#卡常" class="headerlink" title="卡常"></a>卡常</h3><ol><li>快读快输</li><li>基数排序用松氏基排，个数较小时用快排</li><li>维护凸包时别开 <code>vector</code> ，自己分配内存（就像我闵可夫斯基和博客里写的一样）</li><li>由于在块长不变的时候内存分配情况一定不会变，所以只需要在第一个和最后一块分配一下内存，不需要每次都重新分配</li><li>最终优化，调块长吧，多试几次</li></ol><h3 id="受苦"><a href="#受苦" class="headerlink" title="受苦"></a>受苦</h3><p>啊啊啊不想打啊！</p><ul><li> $2022/1/26$ $7:30$ 开始本题</li><li> $2022/1/26$ $1:27$ 开打 </li><li> $2022/1/26$ $16:30$ 打完开调</li><li> $2022/1/26$ $18:17$ 过样例了 </li><li> $2022/1/26$ $18:30$ 第一次提交，TLE + RE $0pts$ </li><li> $2022/1/26$ $19:18$ 改过RE了（二分打挂了），TLE + WA $0pts$ </li><li> $2022/1/26$ $19:33$ 不WA了，TLE  $0pts$ </li><li> $2022/1/26$ $19:33$ 本着宁WA不T的原则卡块长，发现当 $B = 1148$ 时最好（然鹅还是TLE一个点）WA  $0pts$ </li><li> $2022/1/26$ $21:56$ 发现把 $bn$ 打成 $n$ 了，改了后TLE $80pts$ ，啊啊啊，我的打法常数大了！</li><li> $2022/1/27$ $9:45$ 把网上能找到的代码（包括所有的题解）都交了一遍，全TLE（好像lxl加强了），心态爆炸</li><li> $2022/1/27$ $10:00$ 猛然发现一篇分类讨论的 $36pts$ 的代码刚好AC了我TLE的点（他特别猛，就手玩），于是决定高素质……</li><li> $2022/1/27$ $10:37$  高素质过了！决定加点注释，压压行</li><li> $2022/1/27$ $11:08$  搞定</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>超长警告！不压行 $737$ 行，压了后 $649$ 行！lxl太毒瘤了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2022/1/27 11:08</span></span><br><span class="line"><span class="comment">by Dyd</span></span><br><span class="line"><span class="comment">由于代码很长,稍微压了一下行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max(x, y) ((x) &gt; (y) ? (x) : (y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Min(x, y) ((x) &lt; (y) ? (x) : (y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> got(x, len) (((x) - 1) / (len) + 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LB(x, len) (((x) - 1) * (len) + 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RB(x, len) Min(((x) * (len)), n)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> Fast</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> L = (<span class="number">1</span> &lt;&lt; <span class="number">20</span>) + <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[L], out[L], *iS, *iT;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> gh() (iT == iS ? iT = (iS = buf) + fread(buf, 1, L, stdin), (iT == iS ? EOF : *iS++) : *iS++)</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="built_in">gh</span>(), t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            t |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line">        <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">gh</span>();</span><br><span class="line">        <span class="keyword">if</span> (t)</span><br><span class="line">            x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">flus</span><span class="params">()</span> </span>&#123; <span class="built_in">fwrite</span>(out, <span class="number">1</span>, l, stdout), l = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">char</span> x)</span> </span>&#123; out[l++] = x; &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">putc</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">            <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">        out[l++] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Fast::flus;</span><br><span class="line"><span class="keyword">using</span> Fast::putc;</span><br><span class="line"><span class="keyword">using</span> Fast::read;</span><br><span class="line"><span class="keyword">using</span> Fast::write;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">1148</span>, N = <span class="number">1e5</span> + B + <span class="number">5</span>, R = <span class="number">256</span>, Bit = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> LL MINF = <span class="number">-0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Question</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> op = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    LL v = <span class="number">0</span>;</span><br><span class="line">&#125; que[N];</span><br><span class="line"><span class="comment">//我的程序(80pts,最后一个点会TLE)</span></span><br><span class="line"><span class="keyword">namespace</span> My</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//bl,br,pos卡常,记录LB,RB,got;tot:分配空间</span></span><br><span class="line">    <span class="keyword">int</span> bl[N / B + <span class="number">5</span>], br[N / B + <span class="number">5</span>], pos[N], tot;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        LL x, y;</span><br><span class="line">        IL Point <span class="keyword">operator</span> + (<span class="keyword">const</span> Point &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> &#123;x + b.x, y + b.y&#125;; &#125;</span><br><span class="line">        IL Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> &#123;x - b.x, y - b.y&#125;; &#125;</span><br><span class="line">        IL <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> Point &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x * b.y &gt;= y * b.x; &#125;</span><br><span class="line">    &#125; pool[N];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Hull</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        Point *vc;</span><br><span class="line">        <span class="keyword">int</span> si, mxid;</span><br><span class="line">        LL tag;</span><br><span class="line">        IL Point <span class="keyword">operator</span> [] (<span class="keyword">const</span> <span class="keyword">int</span> x) &#123; <span class="keyword">return</span> &#123;vc[x].x, vc[x].y + tag * vc[x].x&#125;; &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">ins</span><span class="params">(Point x)</span> </span>&#123; vc[x.x].y = <span class="built_in">Max</span>(vc[x.x].y, x.y); &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">push_back</span><span class="params">(Point x)</span> </span>&#123; vc[si++] = x; &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">prev</span><span class="params">(<span class="keyword">int</span> len)</span> <span class="comment">//预留len的空间(赋为MINF以待跟新)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            vc[<span class="number">0</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;, si = len + <span class="number">1</span>, tag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) vc[i] = &#123;i, MINF&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">jarvis</span><span class="params">()</span> <span class="comment">//求凸包</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (si &lt;= <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">int</span> top = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; si; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (vc[i].y == MINF) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">while</span> (top &gt;= <span class="number">1</span> &amp;&amp; (vc[top] - vc[top - <span class="number">1</span>]) &lt;= (vc[i] - vc[top - <span class="number">1</span>])) --top;</span><br><span class="line">                vc[++top] = vc[i];</span><br><span class="line">            &#125;</span><br><span class="line">            si = top + <span class="number">1</span>, tag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, LL addv)</span> </span>&#123; <span class="keyword">return</span> (vc[x + <span class="number">1</span>].x - vc[x].x) * (tag + addv) + vc[x + <span class="number">1</span>].y - vc[x].y &gt; <span class="number">0</span>; &#125;</span><br><span class="line">        <span class="function">IL LL <span class="title">maxv</span><span class="params">(LL addv)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (mxid &lt; si - <span class="number">1</span> &amp;&amp; <span class="built_in">check</span>(mxid, addv)) ++mxid;</span><br><span class="line">            <span class="keyword">return</span> vc[mxid].x * (tag + addv) + vc[mxid].y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL LL <span class="title">bs</span><span class="params">(LL addv)</span> <span class="comment">//凸包上二分</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">-1</span>, r = si - <span class="number">1</span>, mid;</span><br><span class="line">            <span class="keyword">for</span> (mid = l + r &gt;&gt; <span class="number">1</span>; l &lt; r - <span class="number">1</span>; mid = l + r &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(mid, addv)) l = mid;</span><br><span class="line">                <span class="keyword">else</span> r = mid;</span><br><span class="line">            mxid = r;</span><br><span class="line">            <span class="keyword">return</span> vc[mxid].x * (tag + addv) + vc[mxid].y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Ans</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        LL pre, suf, as, sum;</span><br><span class="line">        IL Ans <span class="keyword">operator</span> + (<span class="keyword">const</span> Ans &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> &#123;<span class="built_in">Max</span>(pre, sum + b.pre), <span class="built_in">Max</span>(suf + b.sum, b.suf), <span class="built_in">Max</span>(<span class="built_in">Max</span>(as, b.as), suf + b.pre), sum + b.sum&#125;; &#125;</span><br><span class="line">    &#125; ans[N];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LineTree</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        Hull pre[B &lt;&lt; <span class="number">2</span>], suf[B &lt;&lt; <span class="number">2</span>], as[B &lt;&lt; <span class="number">2</span>];</span><br><span class="line">        LL sum[B &lt;&lt; <span class="number">2</span>], tag[B &lt;&lt; <span class="number">2</span>];</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lc (u &lt;&lt; 1)</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rc (u &lt;&lt; 1 | 1)</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> Mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">prev</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> <span class="comment">//预分配空间</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            pre[u].vc = pool + tot, tot += r - l + <span class="number">3</span>;</span><br><span class="line">            suf[u].vc = pool + tot, tot += r - l + <span class="number">3</span>;</span><br><span class="line">            as[u].vc = pool + tot, tot += r - l + <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">int</span> mid = Mid;</span><br><span class="line">            <span class="built_in">prev</span>(lc, l, mid), <span class="built_in">prev</span>(rc, mid + <span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">pre_suf_merge</span><span class="params">(Hull &amp;c, Hull &amp;a, Hull &amp;b, Point addb)</span> <span class="comment">//普通合并</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = a.si; i &lt; t; ++i) c.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = b.si; i &lt; t; ++i) c.<span class="built_in">push_back</span>(addb + b[i]);</span><br><span class="line">            c.<span class="built_in">jarvis</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">minkowski</span><span class="params">(Hull &amp;c, Hull &amp;a, Hull &amp;b)</span> <span class="comment">//闵可夫斯基和</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, sa = a.si - <span class="number">1</span>, sb = b.si - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (c.<span class="built_in">ins</span>(a[i] + b[j]); i &lt; sa &amp;&amp; j &lt; sb; c.<span class="built_in">ins</span>(a[i] + b[j])) a[i + <span class="number">1</span>] - a[i] &lt;= b[j + <span class="number">1</span>] - b[j] ? ++j : ++i;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; sa) c.<span class="built_in">ins</span>(a[++i] + b[j]);</span><br><span class="line">            <span class="keyword">while</span> (j &lt; sb) c.<span class="built_in">ins</span>(a[i] + b[++j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = Mid;</span><br><span class="line">            <span class="built_in">pre_suf_merge</span>(pre[u], pre[lc], pre[rc], &#123;mid - l + <span class="number">1</span>, sum[lc]&#125;);</span><br><span class="line">            <span class="built_in">pre_suf_merge</span>(suf[u], suf[rc], suf[lc], &#123;r - mid, sum[rc]&#125;);</span><br><span class="line">            as[u].<span class="built_in">prev</span>(r - l + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = as[lc].si; i &lt; t; ++i) as[u].<span class="built_in">ins</span>(as[lc][i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = as[rc].si; i &lt; t; ++i) as[u].<span class="built_in">ins</span>(as[rc][i]);</span><br><span class="line">            <span class="built_in">minkowski</span>(as[u], suf[lc], pre[rc]);</span><br><span class="line">            as[u].<span class="built_in">jarvis</span>();</span><br><span class="line">            pre[u].mxid = suf[u].mxid = as[u].mxid = <span class="number">0</span>;</span><br><span class="line">            sum[u] = sum[lc] + sum[rc];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加标记,同时修改</span></span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, LL d)</span> </span>&#123; tag[u] += d, pre[u].tag += d, suf[u].tag += d, as[u].tag += d, sum[u] += d * (r - l + <span class="number">1</span>); &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l == r || !tag[u]) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">int</span> mid = Mid;</span><br><span class="line">            <span class="built_in">add</span>(lc, l, mid, tag[u]), <span class="built_in">add</span>(rc, mid + <span class="number">1</span>, r, tag[u]);</span><br><span class="line">            tag[u] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> bid)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l == r)</span><br><span class="line">            &#123;</span><br><span class="line">                sum[u] = a[l + bl[bid] - <span class="number">1</span>];</span><br><span class="line">                pre[u].<span class="built_in">push_back</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;), pre[u].<span class="built_in">push_back</span>(&#123;<span class="number">1</span>, sum[u]&#125;);</span><br><span class="line">                suf[u].<span class="built_in">push_back</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;), suf[u].<span class="built_in">push_back</span>(&#123;<span class="number">1</span>, sum[u]&#125;);</span><br><span class="line">                as[u].<span class="built_in">push_back</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;), as[u].<span class="built_in">push_back</span>(&#123;<span class="number">1</span>, sum[u]&#125;);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> mid = Mid;</span><br><span class="line">            <span class="built_in">build</span>(lc, l, mid, bid), <span class="built_in">build</span>(rc, mid + <span class="number">1</span>, r, bid);</span><br><span class="line">            <span class="built_in">up</span>(u, l, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            pre[u].si = suf[u].si = as[u].si = <span class="number">0</span>;</span><br><span class="line">            pre[u].mxid = suf[u].mxid = as[u].mxid = <span class="number">0</span>;</span><br><span class="line">            pre[u].tag = suf[u].tag = as[u].tag = <span class="number">0</span>;</span><br><span class="line">            tag[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">int</span> mid = Mid;</span><br><span class="line">            <span class="built_in">clear</span>(lc, l, mid), <span class="built_in">clear</span>(rc, mid + <span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, LL d)</span> <span class="comment">//散点修改</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l == ql &amp;&amp; r == qr) <span class="keyword">return</span> <span class="built_in">add</span>(u, l, r, d);</span><br><span class="line">            <span class="built_in">down</span>(u, l, r);</span><br><span class="line">            <span class="keyword">int</span> mid = Mid;</span><br><span class="line">            <span class="keyword">if</span> (qr &lt;= mid) <span class="built_in">change</span>(lc, l, mid, ql, qr, d);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid) <span class="built_in">change</span>(rc, mid + <span class="number">1</span>, r, ql, qr, d);</span><br><span class="line">            <span class="comment">//注意这里ql,qr改变了</span></span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">change</span>(lc, l, mid, ql, mid, d), <span class="built_in">change</span>(rc, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr, d);</span><br><span class="line">            pre[u].si = suf[u].si = as[u].si = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">up</span>(u, l, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//整块询问</span></span><br><span class="line">        <span class="function">IL Ans <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, LL addv)</span> </span>&#123; <span class="keyword">return</span> &#123;pre[<span class="number">1</span>].<span class="built_in">maxv</span>(addv), suf[<span class="number">1</span>].<span class="built_in">maxv</span>(addv), as[<span class="number">1</span>].<span class="built_in">maxv</span>(addv), sum[<span class="number">1</span>] + (r - l + <span class="number">1</span>) * addv&#125;; &#125;</span><br><span class="line">        <span class="function">IL Ans <span class="title">ask</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, LL addv)</span> <span class="comment">//散点询问</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l == ql &amp;&amp; r == qr) <span class="keyword">return</span> u == <span class="number">1</span> ? <span class="built_in">query</span>(ql, qr, addv) : (Ans)&#123;pre[u].<span class="built_in">bs</span>(addv), suf[u].<span class="built_in">bs</span>(addv), as[u].<span class="built_in">bs</span>(addv), sum[u] + (qr - ql + <span class="number">1</span>) * addv&#125;;</span><br><span class="line">            <span class="built_in">down</span>(u, l, r);</span><br><span class="line">            <span class="keyword">int</span> mid = Mid;</span><br><span class="line">            <span class="keyword">if</span> (qr &lt;= mid) <span class="keyword">return</span> <span class="built_in">ask</span>(lc, l, mid, ql, qr, addv);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid) <span class="keyword">return</span> <span class="built_in">ask</span>(rc, mid + <span class="number">1</span>, r, ql, qr, addv);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">ask</span>(lc, l, mid, ql, mid, addv) + <span class="built_in">ask</span>(rc, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr, addv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QuestionForBlock</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>, id = <span class="number">0</span>;</span><br><span class="line">        LL v = <span class="number">0</span>, typ = <span class="number">0</span>;</span><br><span class="line">        IL <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> QuestionForBlock &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt; b.v; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Block</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        LineTree lt;</span><br><span class="line">        <span class="comment">//cnt,tmp,val,valt都是基数排序用的,为了卡常在这里定</span></span><br><span class="line">        <span class="keyword">int</span> bid, bn, bm, cnt[R];</span><br><span class="line">        QuestionForBlock bq[N], tmp[N];</span><br><span class="line">        LL tag, valt[N], val[N];</span><br><span class="line">        <span class="comment">//整体修改</span></span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">modify</span><span class="params">(LL d)</span> </span>&#123; tag += d; &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, LL d)</span> <span class="comment">//散点修改</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (d == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (l == <span class="number">1</span> &amp;&amp; r == bn) <span class="keyword">return</span> tag += d, <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">            bq[bm++] = &#123;l, r, <span class="number">0</span>, tag, d&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//整体查询</span></span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> id)</span> </span>&#123; bq[bm++] = &#123;l, r, id, tag, <span class="number">0</span>&#125;; &#125;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> geted(x, d) (((x) &gt;&gt; ((d)*Bit)) &amp; (R - 1))</span></span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> <span class="comment">//松氏基排</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l &lt;= <span class="number">1500</span>) <span class="keyword">return</span> <span class="built_in">sort</span>(bq + l, bq + r); <span class="comment">//小优化</span></span><br><span class="line">            LL *x = val, *y = valt;</span><br><span class="line">            <span class="keyword">int</span> tt = r - l;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; r; ++i) x[i - l] = y[i - l] = bq[i].v | ((<span class="number">1ll</span> * i) &lt;&lt; <span class="number">35</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; <span class="number">4</span>; ++d)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; ++i) cnt[i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tt; ++i) ++cnt[<span class="built_in">geted</span>(x[i], d)];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; R; ++i) cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = tt - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) y[--cnt[<span class="built_in">geted</span>(x[i], d)]] = x[i];</span><br><span class="line">                <span class="built_in">swap</span>(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; r; ++i) tmp[i - l] = bq[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; r; ++i) bq[i] = tmp[(x[i - l] &gt;&gt; <span class="number">35</span>) - l];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">prev</span><span class="params">()</span> <span class="comment">//预处理(修改化为正数,建树,排序)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            LL mintag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bm; ++i) mintag = <span class="built_in">Min</span>(mintag, bq[i].v);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bm; ++i) bq[i].v -= mintag;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = bl[bid], t = br[bid]; i &lt;= t; ++i) a[i] += mintag;</span><br><span class="line">            lt.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, bn, bid);</span><br><span class="line">            <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bm; ++i) <span class="keyword">if</span> (bq[i].typ)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != last) <span class="built_in">radix_sort</span>(last, i);</span><br><span class="line">                last = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (last != bm) <span class="built_in">radix_sort</span>(last, bm);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bm; ++i)</span><br><span class="line">                <span class="keyword">if</span> (!bq[i].typ)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &amp;&amp; bq[i - <span class="number">1</span>].typ) lt.pre[<span class="number">1</span>].<span class="built_in">bs</span>(bq[i].v), lt.suf[<span class="number">1</span>].<span class="built_in">bs</span>(bq[i].v), lt.as[<span class="number">1</span>].<span class="built_in">bs</span>(bq[i].v);</span><br><span class="line">                    ans[bq[i].id] = ans[bq[i].id] + lt.<span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, bn, bq[i].l, bq[i].r, bq[i].v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> lt.<span class="built_in">change</span>(<span class="number">1</span>, <span class="number">1</span>, bn, bq[i].l, bq[i].r, bq[i].typ);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; bm = tag = <span class="number">0</span>, lt.<span class="built_in">clear</span>(<span class="number">1</span>, <span class="number">1</span>, bn); &#125;</span><br><span class="line">    &#125; blk;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">int</span> qcnt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) pos[i] = <span class="built_in">got</span>(i, B);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pos[n]; ++i) bl[i] = <span class="built_in">LB</span>(i, B), br[i] = <span class="built_in">RB</span>(i, B);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pos[n]; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            qcnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//这里一定要先加了在判continue,否则输出会不够</span></span><br><span class="line">                <span class="keyword">if</span> (que[j].op == <span class="number">2</span>) ++qcnt;</span><br><span class="line">                <span class="keyword">if</span> (que[j].l &gt; br[i] || que[j].r &lt; bl[i]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (que[j].op == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (que[j].l &lt;= bl[i] &amp;&amp; que[j].r &gt;= br[i]) blk.<span class="built_in">modify</span>(que[j].v);</span><br><span class="line">                    <span class="keyword">else</span> blk.<span class="built_in">change</span>(<span class="built_in">Max</span>(que[j].l, bl[i]) - bl[i] + <span class="number">1</span>, <span class="built_in">Min</span>(que[j].r, br[i]) - bl[i] + <span class="number">1</span>, que[j].v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> blk.<span class="built_in">query</span>(<span class="built_in">Max</span>(que[j].l, bl[i]) - bl[i] + <span class="number">1</span>, <span class="built_in">Min</span>(que[j].r, br[i]) - bl[i] + <span class="number">1</span>, qcnt);</span><br><span class="line">            &#125;</span><br><span class="line">            blk.bid = i, blk.bn = br[i] - bl[i] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> || i == pos[n]) tot = <span class="number">0</span>, blk.lt.<span class="built_in">prev</span>(<span class="number">1</span>, <span class="number">1</span>, blk.bn);</span><br><span class="line">            blk.<span class="built_in">prev</span>(), blk.<span class="built_in">solve</span>(), blk.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= qcnt; ++i) <span class="built_in">write</span>(ans[i].as), <span class="built_in">putc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//高素质嫖别人的(36pts,但最后一个点AC了)</span></span><br><span class="line"><span class="keyword">namespace</span> GaoSuZhi</span><br><span class="line">&#123;</span><br><span class="line">    LL check[<span class="number">5000005</span>], nowu, cnt1, cnt2, c[<span class="number">1000005</span>], qf[<span class="number">1000005</span>];</span><br><span class="line">    <span class="keyword">bool</span> check1, hmz;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">add</span><span class="params">(LL now, LL v)</span></span>&#123; <span class="keyword">for</span> (; now &lt;= n; now += now &amp; -now) c[now] += v; &#125;</span><br><span class="line">    <span class="function">IL LL <span class="title">sum</span><span class="params">(LL tmp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LL s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; tmp &gt; <span class="number">0</span>; tmp -= tmp &amp; -tmp) s += c[tmp];</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">getmid</span><span class="params">(LL pos, LL l, LL r, <span class="keyword">bool</span> vis)</span></span>;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">getmid1</span><span class="params">(LL pos, LL l, LL r, <span class="keyword">bool</span> vis)</span></span>;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">getmid2</span><span class="params">(LL pos, LL l, LL r, <span class="keyword">bool</span> vis)</span></span>;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">getmn</span><span class="params">(LL pos, LL l, LL r)</span></span>;</span><br><span class="line">    <span class="keyword">namespace</span> work1</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            LL l, r, mid, sum, maxx, minn, tag;</span><br><span class="line">            <span class="keyword">bool</span> need;</span><br><span class="line">            <span class="built_in">node</span>() &#123;&#125;</span><br><span class="line">            <span class="built_in">node</span>(LL _l, LL _r, LL _mid, LL _sum, LL _maxx, LL _minn, LL _tag) &#123; l = _l, r = _r, mid = _mid, sum = _sum, maxx = _maxx, minn = _minn, tag = _tag, need = <span class="number">0</span>; &#125;</span><br><span class="line">        &#125; tree[<span class="number">5000005</span>];</span><br><span class="line">        <span class="function">IL node <span class="title">merge</span><span class="params">(node x, node y)</span></span>&#123; <span class="keyword">return</span> <span class="built_in">node</span>(<span class="built_in">Max</span>(x.l, x.sum + y.l), <span class="built_in">Max</span>(y.r, y.sum + x.r), <span class="built_in">Max</span>(<span class="built_in">Max</span>(x.mid, y.mid), x.r + y.l), x.sum + y.sum, <span class="built_in">Max</span>(x.maxx, y.maxx), <span class="built_in">min</span>(x.minn, y.minn), <span class="number">0ll</span>); &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(LL now, LL l, LL r)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (tree[now].tag != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                tree[now &lt;&lt; <span class="number">1</span>].sum += (mid - l + <span class="number">1</span>) * tree[now].tag, tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum += (r - mid) * tree[now].tag;</span><br><span class="line">                tree[now &lt;&lt; <span class="number">1</span>].tag += tree[now].tag, tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].tag += tree[now].tag;</span><br><span class="line">                tree[now &lt;&lt; <span class="number">1</span>].maxx += tree[now].tag, tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].maxx += tree[now].tag;</span><br><span class="line">                tree[now &lt;&lt; <span class="number">1</span>].minn += tree[now].tag, tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].minn += tree[now].tag;</span><br><span class="line">                tree[now &lt;&lt; <span class="number">1</span>].l = tree[now &lt;&lt; <span class="number">1</span>].r = tree[now &lt;&lt; <span class="number">1</span>].mid = <span class="built_in">Max</span>(tree[now &lt;&lt; <span class="number">1</span>].sum, <span class="number">0ll</span>), tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].l = tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].r = tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].mid = <span class="built_in">Max</span>(tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum, <span class="number">0ll</span>);</span><br><span class="line">                tree[now].tag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tree[now].need &amp;&amp; l != r)</span><br><span class="line">            &#123;</span><br><span class="line">                tree[now &lt;&lt; <span class="number">1</span>].need = <span class="literal">true</span>, tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].need = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">getmid</span>(now &lt;&lt; <span class="number">1</span>, l, mid, <span class="literal">true</span>), <span class="built_in">getmid</span>(now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, <span class="literal">true</span>);</span><br><span class="line">                tree[now].need = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">build</span><span class="params">(LL now, LL l, LL r)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l == r)</span><br><span class="line">            &#123;</span><br><span class="line">                tree[now].need = <span class="literal">false</span>;</span><br><span class="line">                tree[now].l = tree[now].r = tree[now].mid = <span class="built_in">Max</span>(a[l], <span class="number">0ll</span>);</span><br><span class="line">                tree[now].sum = tree[now].minn = tree[now].maxx = a[l];</span><br><span class="line">                tree[now].tag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tree[now].need = <span class="literal">false</span>;</span><br><span class="line">            LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(now &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">            tree[now] = <span class="built_in">merge</span>(tree[now &lt;&lt; <span class="number">1</span>], tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">update</span><span class="params">(LL now, LL l, LL r, LL x, LL y, LL w)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l &gt; y || r &lt; x) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (x &lt;= l &amp;&amp; r &lt;= y)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (tree[now].maxx + w &lt;= <span class="number">0</span> || tree[now].minn + w &gt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    tree[now].sum += (r - l + <span class="number">1</span>) * w;</span><br><span class="line">                    tree[now].tag += w, tree[now].maxx += w, tree[now].minn += w;</span><br><span class="line">                    tree[now].l = tree[now].r = tree[now].mid = <span class="built_in">Max</span>(tree[now].sum, <span class="number">0ll</span>);</span><br><span class="line">                    tree[now].need = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((!check1 &amp;&amp; r - l + <span class="number">1</span> &lt;= <span class="number">500</span>) || (check1 &amp;&amp; r - l + <span class="number">1</span> &lt;= <span class="number">5000</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    tree[now].sum += (r - l + <span class="number">1</span>) * w;</span><br><span class="line">                    tree[now].tag += w, tree[now].maxx += w, tree[now].minn += w;</span><br><span class="line">                    tree[now].need = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">getmid</span>(now, l, r, <span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r - l + <span class="number">1</span> &lt;= <span class="number">500</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">getmn</span>(now, l, r);</span><br><span class="line">                <span class="keyword">if</span> (tree[now].maxx &lt;= <span class="number">0</span> || tree[now].minn &gt;= <span class="number">0</span>) tree[now].mid = tree[now].l = tree[now].r = <span class="built_in">Max</span>(<span class="number">0ll</span>, tree[now].sum);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">getmid</span>(now, l, r, <span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">push_down</span>(now, l, r);</span><br><span class="line">            LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">update</span>(now &lt;&lt; <span class="number">1</span>, l, mid, x, y, w), <span class="built_in">update</span>(now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, y, w);</span><br><span class="line">            tree[now] = <span class="built_in">merge</span>(tree[now &lt;&lt; <span class="number">1</span>], tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">IL node <span class="title">query</span><span class="params">(LL now, LL l, LL r, LL x, LL y)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (x &lt;= l &amp;&amp; r &lt;= y) <span class="keyword">return</span> tree[now];</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= x &amp;&amp; r &lt;= y &amp;&amp; (r - x + <span class="number">1</span>) &lt;= <span class="number">700</span> &amp;&amp; (tree[now].need || r - x &lt;= <span class="number">500</span>)) <span class="keyword">return</span> <span class="built_in">getmid</span>(<span class="number">0</span>, x, r, <span class="literal">true</span>), tree[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &gt;= y &amp;&amp; (y - l + <span class="number">1</span>) &lt;= <span class="number">700</span> &amp;&amp; (tree[now].need || y - l &lt;= <span class="number">500</span>)) <span class="keyword">return</span> <span class="built_in">getmid</span>(<span class="number">0</span>, l, y, <span class="literal">true</span>), tree[<span class="number">0</span>];</span><br><span class="line">            LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">push_down</span>(now, l, r);</span><br><span class="line">            node ans;</span><br><span class="line">            <span class="keyword">if</span> (x &gt; mid) ans = <span class="built_in">query</span>(now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, y);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (y &lt;= mid) ans = <span class="built_in">query</span>(now &lt;&lt; <span class="number">1</span>, l, mid, x, y);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                node resa = <span class="built_in">query</span>(now &lt;&lt; <span class="number">1</span>, l, mid, x, y), resb = <span class="built_in">query</span>(now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, y);</span><br><span class="line">                ans = <span class="built_in">node</span>(<span class="built_in">Max</span>(resa.l, resa.sum + resb.l), <span class="built_in">Max</span>(resb.r, resb.sum + resa.r), <span class="built_in">Max</span>(resa.mid, <span class="built_in">Max</span>(resb.mid, resa.r + resb.l)), resa.sum + resb.sum, <span class="number">0ll</span>, <span class="number">0ll</span>, <span class="number">0ll</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            tree[now] = <span class="built_in">merge</span>(tree[now &lt;&lt; <span class="number">1</span>], tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> work2 <span class="comment">//实测用不到,但为了保持他代码的完整性,方便我以后理解他的思路,还是留下</span></span><br><span class="line">    &#123;</span><br><span class="line">        LL eps;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            LL l, r, mid, sum, maxx, minn, tag;</span><br><span class="line">            <span class="keyword">bool</span> check;</span><br><span class="line">        &#125; tree[<span class="number">1000005</span>];</span><br><span class="line">        <span class="function">IL <span class="keyword">bool</span> <span class="title">get</span><span class="params">(node now, LL len)</span></span>&#123; <span class="keyword">return</span> (now.maxx &lt;= <span class="number">0</span> || now.minn &gt;= <span class="number">0</span>); &#125;</span><br><span class="line">        <span class="function">IL <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(LL now, LL l, LL r)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            tree[now &lt;&lt; <span class="number">1</span>].sum += (mid - l + <span class="number">1</span>) * tree[now].tag, tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum += (r - mid) * tree[now].tag;</span><br><span class="line">            tree[now &lt;&lt; <span class="number">1</span>].tag += tree[now].tag, tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].tag += tree[now].tag;</span><br><span class="line">            tree[now &lt;&lt; <span class="number">1</span>].maxx += tree[now].tag, tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].maxx += tree[now].tag;</span><br><span class="line">            tree[now &lt;&lt; <span class="number">1</span>].minn += tree[now].tag, tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].minn += tree[now].tag;</span><br><span class="line">            tree[now &lt;&lt; <span class="number">1</span>].check = <span class="built_in">get</span>(tree[now &lt;&lt; <span class="number">1</span>], mid - l + <span class="number">1</span>), tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].check = <span class="built_in">get</span>(tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], r - mid);</span><br><span class="line">            tree[now].tag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">node <span class="title">merge</span><span class="params">(node x, node y, LL len)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            node ans = &#123;<span class="built_in">Max</span>(x.l, x.sum + y.l), <span class="built_in">Max</span>(y.r, y.sum + x.r), <span class="built_in">Max</span>(<span class="built_in">Max</span>(x.mid, y.mid), x.r + y.l), x.sum + y.sum, <span class="built_in">Max</span>(x.maxx, y.maxx), <span class="built_in">min</span>(x.minn, y.minn)&#125;;</span><br><span class="line">            <span class="keyword">if</span> (x.check || y.check) ans.check = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> ans.check = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(LL now, LL l, LL r)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            tree[now].tag = <span class="number">0</span>, tree[now].check = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (l == r)</span><br><span class="line">            &#123;</span><br><span class="line">                tree[now].maxx = tree[now].minn = tree[now].sum = a[l];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(now &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">            tree[now] = <span class="built_in">merge</span>(tree[now &lt;&lt; <span class="number">1</span>], tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], r - l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(LL now, LL l, LL r, LL x, LL y, LL w)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l &gt; y || r &lt; x) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (x &lt;= l &amp;&amp; r &lt;= y)</span><br><span class="line">            &#123;</span><br><span class="line">                tree[now].sum += (r - l + <span class="number">1</span>) * w;</span><br><span class="line">                tree[now].maxx += w, tree[now].minn += w, tree[now].tag += w;</span><br><span class="line">                <span class="keyword">if</span> ((tree[now].maxx &lt;= <span class="number">0</span> || tree[now].minn &gt;= <span class="number">0</span>) &amp;&amp; r - l + <span class="number">1</span> &gt;= eps) tree[now].check = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> tree[now].check = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">push_down</span>(now, l, r);</span><br><span class="line">            LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">update</span>(now &lt;&lt; <span class="number">1</span>, l, mid, x, y, w), <span class="built_in">update</span>(now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, y, w);</span><br><span class="line">            tree[now] = <span class="built_in">merge</span>(tree[now &lt;&lt; <span class="number">1</span>], tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], r - l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">node <span class="title">query</span><span class="params">(LL now, LL l, LL r, LL x, LL y)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            tree[now].check = <span class="built_in">get</span>(tree[now], r - l + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (l &gt; y || r &lt; x) <span class="keyword">return</span> node&#123;<span class="number">-10000000</span>, <span class="number">-10000000</span>, <span class="number">-10000000</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span> (x &lt;= l &amp;&amp; r &lt;= y)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (tree[now].maxx &lt;= <span class="number">0</span> || tree[now].minn &gt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    tree[now].l = tree[now].r = tree[now].mid = <span class="built_in">Max</span>(tree[now].sum, <span class="number">0ll</span>);</span><br><span class="line">                    <span class="keyword">return</span> tree[now];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (r - l + <span class="number">1</span> &lt;= <span class="number">300</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">getmid</span>(now, l, r, <span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">return</span> tree[now];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            node ans;</span><br><span class="line">            <span class="built_in">push_down</span>(now, l, r);</span><br><span class="line">            LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &gt; mid) ans = <span class="built_in">query</span>(now &lt;&lt; <span class="number">1</span>, l, mid, x, y);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (r &lt;= mid) ans = <span class="built_in">query</span>(now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, y);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                node a = <span class="built_in">query</span>(now &lt;&lt; <span class="number">1</span>, l, mid, x, y), b = <span class="built_in">query</span>(now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, y);</span><br><span class="line">                ans = &#123;<span class="built_in">Max</span>(a.l, a.sum + b.l), <span class="built_in">Max</span>(b.r, b.sum + a.r), <span class="built_in">Max</span>(<span class="built_in">Max</span>(a.mid, b.mid), a.r + b.l), a.sum + b.sum, <span class="built_in">Max</span>(a.maxx, b.maxx), <span class="built_in">min</span>(a.minn, b.minn)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            tree[now] = <span class="built_in">merge</span>(tree[now &lt;&lt; <span class="number">1</span>], tree[now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], r - l + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LL l, r, w;</span><br><span class="line">        <span class="keyword">double</span> p = cnt1 * <span class="number">1.0</span> / <span class="number">1e10</span>;</span><br><span class="line">        check1 = (p &lt; <span class="number">0.8</span> &amp;&amp; p &gt;= <span class="number">0.7</span>);</span><br><span class="line">        work2::eps = n / <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> LL i = <span class="number">1</span>; i &lt;= n; ++i) qf[i] = a[i] - a[i - <span class="number">1</span>], <span class="built_in">add</span>(i, qf[i]);</span><br><span class="line">        <span class="keyword">bool</span> hmz = (cnt1 &lt;= <span class="number">2e9</span>);</span><br><span class="line">        work1::<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">for</span> (LL k = <span class="number">1</span>; k &lt;= m; ++k)</span><br><span class="line">        &#123;</span><br><span class="line">            l = que[k].l, r = que[k].r, w = que[k].v;</span><br><span class="line">            <span class="keyword">if</span> (!l) ++l;</span><br><span class="line">            nowu = l;</span><br><span class="line">            <span class="keyword">if</span> (!hmz)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (que[k].op == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    qf[l] += w, qf[r + <span class="number">1</span>] -= w;</span><br><span class="line">                    <span class="built_in">add</span>(l, w), <span class="built_in">add</span>(r + <span class="number">1</span>, -w);</span><br><span class="line">                    work1::<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, que[k].l, que[k].r, que[k].v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r - l + <span class="number">1</span> &lt;= <span class="number">50000</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        LL ans = <span class="number">0</span>, now = <span class="number">0</span>, ql = <span class="built_in">sum</span>(l), i;</span><br><span class="line">                        <span class="keyword">for</span> (i = l; i &lt;= r - <span class="number">11</span>; i += <span class="number">12</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            now = (now &lt; <span class="number">0</span> ? <span class="number">0</span> : now) + ql, ans = (ans &gt; now ? ans : now), ql += qf[i + <span class="number">1</span>],</span><br><span class="line">                            now = (now &lt; <span class="number">0</span> ? <span class="number">0</span> : now) + ql, ans = (ans &gt; now ? ans : now), ql += qf[i + <span class="number">2</span>],</span><br><span class="line">                            now = (now &lt; <span class="number">0</span> ? <span class="number">0</span> : now) + ql, ans = (ans &gt; now ? ans : now), ql += qf[i + <span class="number">3</span>],</span><br><span class="line">                            now = (now &lt; <span class="number">0</span> ? <span class="number">0</span> : now) + ql, ans = (ans &gt; now ? ans : now), ql += qf[i + <span class="number">4</span>],</span><br><span class="line">                            now = (now &lt; <span class="number">0</span> ? <span class="number">0</span> : now) + ql, ans = (ans &gt; now ? ans : now), ql += qf[i + <span class="number">5</span>],</span><br><span class="line">                            now = (now &lt; <span class="number">0</span> ? <span class="number">0</span> : now) + ql, ans = (ans &gt; now ? ans : now), ql += qf[i + <span class="number">6</span>],</span><br><span class="line">                            now = (now &lt; <span class="number">0</span> ? <span class="number">0</span> : now) + ql, ans = (ans &gt; now ? ans : now), ql += qf[i + <span class="number">7</span>],</span><br><span class="line">                            now = (now &lt; <span class="number">0</span> ? <span class="number">0</span> : now) + ql, ans = (ans &gt; now ? ans : now), ql += qf[i + <span class="number">8</span>],</span><br><span class="line">                            now = (now &lt; <span class="number">0</span> ? <span class="number">0</span> : now) + ql, ans = (ans &gt; now ? ans : now), ql += qf[i + <span class="number">9</span>],</span><br><span class="line">                            now = (now &lt; <span class="number">0</span> ? <span class="number">0</span> : now) + ql, ans = (ans &gt; now ? ans : now), ql += qf[i + <span class="number">10</span>],</span><br><span class="line">                            now = (now &lt; <span class="number">0</span> ? <span class="number">0</span> : now) + ql, ans = (ans &gt; now ? ans : now), ql += qf[i + <span class="number">11</span>],</span><br><span class="line">                            now = (now &lt; <span class="number">0</span> ? <span class="number">0</span> : now) + ql, ans = (ans &gt; now ? ans : now), ql += qf[i + <span class="number">12</span>];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">while</span> (i &lt;= r) now = (now &lt; <span class="number">0</span> ? <span class="number">0</span> : now) + ql, ans = (ans &gt; now ? ans : now), ql += qf[++i];</span><br><span class="line">                        <span class="built_in">write</span>(ans), <span class="built_in">putc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">write</span>(work1::<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, que[k].l, que[k].r).mid), <span class="built_in">putc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//这里本来还有一个else但用不到,为了代码简洁就不放了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">getmid</span><span class="params">(LL pos, LL l, LL r, <span class="keyword">bool</span> vis)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!pos || !vis || !check1 || (l != nowu &amp;&amp; work1::tree[pos].maxx &gt;= <span class="number">1e8</span> + <span class="number">1e5</span>)) <span class="built_in">getmid1</span>(pos, l, r, vis);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">getmid2</span>(pos, l, r, vis);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">getmid1</span><span class="params">(LL pos, LL l, LL r, <span class="keyword">bool</span> vis)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LL ans[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, now[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, ql = <span class="built_in">sum</span>(l), i;</span><br><span class="line">        <span class="keyword">for</span> (i = l; i &lt;= r - <span class="number">3</span>; i += <span class="number">4</span>)</span><br><span class="line">            now[<span class="number">1</span>] += ql, ans[<span class="number">1</span>] = (ans[<span class="number">1</span>] &gt; now[<span class="number">1</span>] ? ans[<span class="number">1</span>] : now[<span class="number">1</span>]),</span><br><span class="line">                          now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">1</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">                          now[<span class="number">1</span>] += ql, ans[<span class="number">1</span>] = (ans[<span class="number">1</span>] &gt; now[<span class="number">1</span>] ? ans[<span class="number">1</span>] : now[<span class="number">1</span>]),</span><br><span class="line">                          now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">2</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">                          now[<span class="number">1</span>] += ql, ans[<span class="number">1</span>] = (ans[<span class="number">1</span>] &gt; now[<span class="number">1</span>] ? ans[<span class="number">1</span>] : now[<span class="number">1</span>]),</span><br><span class="line">                          now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">3</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">                          now[<span class="number">1</span>] += ql, ans[<span class="number">1</span>] = (ans[<span class="number">1</span>] &gt; now[<span class="number">1</span>] ? ans[<span class="number">1</span>] : now[<span class="number">1</span>]),</span><br><span class="line">                          now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">4</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= r)</span><br><span class="line">            now[<span class="number">1</span>] += ql, ans[<span class="number">1</span>] = (ans[<span class="number">1</span>] &gt; now[<span class="number">1</span>] ? ans[<span class="number">1</span>] : now[<span class="number">1</span>]),</span><br><span class="line">                          now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">1</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">                          ++i;</span><br><span class="line">        <span class="keyword">if</span> (vis) work1::tree[pos].l = ans[<span class="number">1</span>], work1::tree[pos].r = now[<span class="number">2</span>], work1::tree[pos].mid = ans[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">else</span> work2::tree[pos].l = ans[<span class="number">1</span>], work2::tree[pos].r = now[<span class="number">2</span>], work2::tree[pos].mid = ans[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">getmid2</span><span class="params">(LL pos, LL l, LL r, <span class="keyword">bool</span> vis)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LL now[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, ql = <span class="built_in">sum</span>(l), i, ans[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (i = l; i &lt;= r - <span class="number">12</span>; i += <span class="number">13</span>)</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">1</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">2</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">3</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">4</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">5</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">6</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">7</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">8</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">9</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">10</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">11</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">12</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">13</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= r)</span><br><span class="line">            now[<span class="number">2</span>] = (now[<span class="number">2</span>] &lt; <span class="number">0</span> ? <span class="number">0</span> : now[<span class="number">2</span>]) + ql, ql += qf[i + <span class="number">1</span>], ans[<span class="number">2</span>] = (ans[<span class="number">2</span>] &gt; now[<span class="number">2</span>] ? ans[<span class="number">2</span>] : now[<span class="number">2</span>]),</span><br><span class="line">            ++i;</span><br><span class="line">        <span class="keyword">if</span> (vis) work1::tree[pos].l = ans[<span class="number">1</span>], work1::tree[pos].r = now[<span class="number">2</span>], work1::tree[pos].mid = ans[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">else</span> work2::tree[pos].l = ans[<span class="number">1</span>], work2::tree[pos].r = now[<span class="number">2</span>], work2::tree[pos].mid = ans[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">getmn</span><span class="params">(LL pos, LL l, LL r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LL i, su = <span class="number">0</span>, maxx = <span class="number">-1e10</span>, minn = <span class="number">1e10</span>, ql = <span class="built_in">sum</span>(l);</span><br><span class="line">        <span class="keyword">for</span> (i = l; i &lt;= r - <span class="number">11</span>; i += <span class="number">12</span>)</span><br><span class="line">            su += ql, maxx = (maxx &lt; ql ? ql : maxx), minn = (minn &lt; ql ? minn : ql), ql += qf[i + <span class="number">1</span>],</span><br><span class="line">                      su += ql, maxx = (maxx &lt; ql ? ql : maxx), minn = (minn &lt; ql ? minn : ql), ql += qf[i + <span class="number">2</span>],</span><br><span class="line">                      su += ql, maxx = (maxx &lt; ql ? ql : maxx), minn = (minn &lt; ql ? minn : ql), ql += qf[i + <span class="number">3</span>],</span><br><span class="line">                      su += ql, maxx = (maxx &lt; ql ? ql : maxx), minn = (minn &lt; ql ? minn : ql), ql += qf[i + <span class="number">4</span>],</span><br><span class="line">                      su += ql, maxx = (maxx &lt; ql ? ql : maxx), minn = (minn &lt; ql ? minn : ql), ql += qf[i + <span class="number">5</span>],</span><br><span class="line">                      su += ql, maxx = (maxx &lt; ql ? ql : maxx), minn = (minn &lt; ql ? minn : ql), ql += qf[i + <span class="number">6</span>],</span><br><span class="line">                      su += ql, maxx = (maxx &lt; ql ? ql : maxx), minn = (minn &lt; ql ? minn : ql), ql += qf[i + <span class="number">7</span>],</span><br><span class="line">                      su += ql, maxx = (maxx &lt; ql ? ql : maxx), minn = (minn &lt; ql ? minn : ql), ql += qf[i + <span class="number">8</span>],</span><br><span class="line">                      su += ql, maxx = (maxx &lt; ql ? ql : maxx), minn = (minn &lt; ql ? minn : ql), ql += qf[i + <span class="number">9</span>],</span><br><span class="line">                      su += ql, maxx = (maxx &lt; ql ? ql : maxx), minn = (minn &lt; ql ? minn : ql), ql += qf[i + <span class="number">10</span>],</span><br><span class="line">                      su += ql, maxx = (maxx &lt; ql ? ql : maxx), minn = (minn &lt; ql ? minn : ql), ql += qf[i + <span class="number">11</span>],</span><br><span class="line">                      su += ql, maxx = (maxx &lt; ql ? ql : maxx), minn = (minn &lt; ql ? minn : ql), ql += qf[i + <span class="number">12</span>];</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= r)</span><br><span class="line">            su += ql, maxx = (maxx &lt; ql ? ql : maxx), minn = (minn &lt; ql ? minn : ql), ql += qf[++i];</span><br><span class="line">        work1::tree[pos].sum = su, work1::tree[pos].maxx = maxx, work1::tree[pos].minn = minn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(que[i].op), <span class="built_in">read</span>(que[i].l), <span class="built_in">read</span>(que[i].r);</span><br><span class="line">        <span class="keyword">if</span> (que[i].op == <span class="number">1</span>) <span class="built_in">read</span>(que[i].v);</span><br><span class="line">        <span class="keyword">else</span> GaoSuZhi::cnt1 += que[i].r - que[i].l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> p = GaoSuZhi::cnt1 * <span class="number">1.0</span> / <span class="number">1e10</span>;</span><br><span class="line">    GaoSuZhi::check1 = (p &lt; <span class="number">0.8</span> &amp;&amp; p &gt;= <span class="number">0.7</span>);</span><br><span class="line">    GaoSuZhi::hmz = (GaoSuZhi::cnt1 &lt;= <span class="number">2e9</span>);</span><br><span class="line">    <span class="comment">//不要问我是怎么知道最后一个点a[1]=-1的</span></span><br><span class="line">    <span class="keyword">if</span> (!GaoSuZhi::hmz &amp;&amp; a[<span class="number">1</span>] == <span class="number">-1</span>) GaoSuZhi::<span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">else</span> My::<span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">flus</span>(), <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>其实我对末日三问不是很感冒，感觉就是一般般的感动吧，当然确实挺好看的，但有点带入不了男女的立场，可能是我的理解有点不同吧</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>上次三道题才 $7000$ 字，这一道题就 $7000$ 了！</p><p>学校马上要放假了，以后再更吧，还是一样，会挂链接的</p><p>最后首尾呼应一下：lxl太可爱了，我爱lxl！！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 再续前缘&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="数据结构" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="分块" scheme="https://dyd-true.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>猫树</title>
    <link href="https://dyd-true.github.io/2022/01/25/%E7%8C%AB%E6%A0%91/"/>
    <id>https://dyd-true.github.io/2022/01/25/%E7%8C%AB%E6%A0%91/</id>
    <published>2022-01-25T11:06:36.000Z</published>
    <updated>2022-01-25T13:26:43.659Z</updated>
    
    <content type="html"><![CDATA[<p> 喵~</p><span id="more"></span><h1 id="猫树"><a href="#猫树" class="headerlink" title="猫树"></a>猫树</h1><p>你肯定想知道它为什么要叫猫树（Cat Tree），其实就像珂朵莉树（Old Driver Tree）一样，只是创造的人喜欢罢了</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>先看猫树用来解决什么问题，一句话说，就是不带修改的线段树</p><p>线段树的时间为 $O(n) + O(\log n)$ （预处理 + 单次询问），而猫树可以做到 $O(n \log n) + O(1)$ ，但是<strong>不带修改</strong>（感觉好没用啊），一般用于优化dp之类的</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>思路非常简单：由于不带修改，可以线段树上每一段信息统计出来，直接调用</p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>先看预处理，类似线段树的 <code>build</code> ，我们用递归的方式预处理</p><p>设处理到区间 $[l, r]$ ，就维护好其信息（这个信息不同于线段树的整体，而是更细致的信息，且一般以 $mid$ 为界，比如线段树维护“区间和”，猫树这里就应统计 $[l, mid]$ 的后缀和与 $[mid + 1, r]$ 的前缀和），然后进入左右段，时空明显 $O(n \log n)$ （假设统计信息是 $O(n)$ 的）</p><h2 id="询问"><a href="#询问" class="headerlink" title="询问"></a>询问</h2><p>这才是精髓，看看它是如何做到 $O(1)$ 的</p><p>如果只是预处理了，它的询问还是要递归，这不还是 $O(\log n)$ ？这可不行</p><p>我们逆向思考，如果是从叶节点 $[x, x]$ 和 $[y, y]$ 向上走，那它们第一次相遇于LCA处时，对应的区间就是唯一一个满足 $l \le x \le mid \le y \le r$ 的区间，而我们在这个区间统计的信息就足以回答询问了（比如“区间和”，我们统计的前后缀足以回答 $[x, y]$ 的和）</p><p>那么问题变成树上LCA，而且是完全二叉树，倍增是 $O(\log \log n)$ ，ST表可以做到 $O(1)$ ，但如果只是这样，似乎略显麻烦，体现不出猫树的优势啊</p><p>注意到，猫树它和线段树一样，采用“父子二倍”标号，而 $(110101)_2$ 和 $(110011)_2$ 的LCA就是最长公共前缀 $(110)_2$ ，大家可以手玩验证一下</p><p>那么怎么快速求出两个数的二进制的最长公共前缀？</p><p>求法是有的，但都不是很简单（太麻烦了还不如用ST表），我们退而求其次</p><p>设两个数的二进制的最长公共前缀长度为 $len$ （二进制下），发现两个数异或之后，最高位右移了 $len$ 位，而一个数的二进制长度就是 $\log n + 1$ ，可以预处理出 $\log$ $O(1)$ 得LCA的二进制长度</p><p>那长度有啥用呢？别忘了，在“父子二倍”标号下，长度就是层数啊！我们求得了LCA在树上是第几层</p><p>那有什么用呢？别忘了我们还知道查询的端点 $x, y$ ，考虑在预处理时把同一层的信息直接存在同一个数组里，如让 <code>sum[x][i]</code> 代表第 $x$ 层的前缀（ $i &gt; mid$ ）/后缀（ $i \le mid$ ）和，由于一层的节点没有重复覆盖，这是可以做到的</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>还是给道题：<a href="https://www.luogu.com.cn/problem/SP2916">GSS5</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>, D = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">int</span> log_2[N &lt;&lt; <span class="number">2</span>], a[N], len;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CatTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//记录对应叶节点</span></span><br><span class="line">    <span class="keyword">int</span> pos[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//sum前/后缀和,mmx端点为mid最大子段和,mx最大子段和,imx端点为i的最大子段段和</span></span><br><span class="line">    <span class="keyword">int</span> sum[D][N &lt;&lt; <span class="number">1</span>], mmx[D][N &lt;&lt; <span class="number">1</span>], mx[D][N &lt;&lt; <span class="number">1</span>], imx[D][N &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> pos[l] = u, <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">        <span class="keyword">int</span> t, tt, mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        sum[d][mid] = mmx[d][mid] = mx[d][mid] = imx[d][mid] = t = tt = a[mid], tt = <span class="built_in">max</span>(tt, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mid - <span class="number">1</span>; i &gt;= l; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            t += a[i], tt += a[i];</span><br><span class="line">            sum[d][i] = t, imx[d][i] = tt;</span><br><span class="line">            mmx[d][i] = <span class="built_in">max</span>(mmx[d][i + <span class="number">1</span>], t);</span><br><span class="line">            mx[d][i] = <span class="built_in">max</span>(mx[d][i + <span class="number">1</span>], tt);</span><br><span class="line">            tt = <span class="built_in">max</span>(tt, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sum[d][mid + <span class="number">1</span>] = mmx[d][mid + <span class="number">1</span>] = mx[d][mid + <span class="number">1</span>] = imx[d][mid + <span class="number">1</span>] = t = tt = a[mid + <span class="number">1</span>], tt = <span class="built_in">max</span>(tt, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">2</span>; i &lt;= r; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            t += a[i], tt += a[i];</span><br><span class="line">            sum[d][i] = t, imx[d][i] = tt;</span><br><span class="line">            mmx[d][i] = <span class="built_in">max</span>(mmx[d][i - <span class="number">1</span>], t);</span><br><span class="line">            mx[d][i] = <span class="built_in">max</span>(mx[d][i - <span class="number">1</span>], tt);</span><br><span class="line">            tt = <span class="built_in">max</span>(tt, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid, d + <span class="number">1</span>), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, d + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//typ:1sum 2pre 3suf 4mid</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> typ)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> a[l];</span><br><span class="line">        <span class="keyword">int</span> d = log_2[pos[l]] - log_2[pos[l] ^ pos[r]];</span><br><span class="line">        <span class="keyword">if</span> (typ == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> sum[d][l] + sum[d][r];</span><br><span class="line">        <span class="keyword">if</span> (typ == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(sum[d][l] + mmx[d][r], imx[d][l]);</span><br><span class="line">        <span class="keyword">if</span> (typ == <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(mmx[d][l] + sum[d][r], imx[d][r]);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">max</span>(mx[d][l], mx[d][r]), mmx[d][l] + mmx[d][r]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ct;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prev</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    log_2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, t = N &lt;&lt; <span class="number">2</span>; i &lt; t; ++i)</span><br><span class="line">        log_2[i] = log_2[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l1, <span class="keyword">int</span> r1, <span class="keyword">int</span> l2, <span class="keyword">int</span> r2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (r1 &lt; l2)</span><br><span class="line">        <span class="keyword">return</span> ct.<span class="built_in">ask</span>(l1, r1, <span class="number">3</span>) + ct.<span class="built_in">ask</span>(r1 + <span class="number">1</span>, l2 - <span class="number">1</span>, <span class="number">1</span>) + ct.<span class="built_in">ask</span>(l2, r2, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    res = <span class="built_in">max</span>(ct.<span class="built_in">ask</span>(l2, r1, <span class="number">4</span>), ct.<span class="built_in">ask</span>(l1, l2, <span class="number">3</span>) + ct.<span class="built_in">ask</span>(l2, r2, <span class="number">2</span>) - a[l2]);</span><br><span class="line">    res = <span class="built_in">max</span>(res, ct.<span class="built_in">ask</span>(l1, r1, <span class="number">3</span>) + ct.<span class="built_in">ask</span>(r1, r2, <span class="number">2</span>) - a[r1]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, m, l1, r1, l2, r2;</span><br><span class="line">    <span class="built_in">prev</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="comment">//要保证满二叉树</span></span><br><span class="line">        <span class="keyword">for</span> (len = <span class="number">2</span>; len &lt; n; len &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">        ct.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, len, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">        <span class="keyword">while</span> (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;l1, &amp;r1, &amp;l2, &amp;r2);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ask</span>(l1, r1, l2, r2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 喵~&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数据结构" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>大力分块</title>
    <link href="https://dyd-true.github.io/2022/01/24/%E5%A4%A7%E5%8A%9B%E5%88%86%E5%9D%97/"/>
    <id>https://dyd-true.github.io/2022/01/24/%E5%A4%A7%E5%8A%9B%E5%88%86%E5%9D%97/</id>
    <published>2022-01-24T06:13:12.000Z</published>
    <updated>2022-01-25T14:04:44.788Z</updated>
    
    <content type="html"><![CDATA[<p> lxl是yyds</p><span id="more"></span><h1 id="大力分块"><a href="#大力分块" class="headerlink" title="大力分块"></a>大力分块</h1><p>我估计会长的一比</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>众所周知，lxl喜欢数据结构</p><p>众所周知，lxl很毒瘤</p><p>众所周知，lxl有点中二+宅</p><p>于是lxl出了Yn（由乃）oi的大分块题目，把以上三者结合了起来</p><p>然后，就让我们来大力分块吧！</p><h2 id="最初分块"><a href="#最初分块" class="headerlink" title="最初分块"></a>最初分块</h2><p><strong>「望月悲叹的最初分块」</strong></p><p><a href="https://www.luogu.com.cn/problem/P4119">未来日记</a></p><p>维护一个序列，支持区间修改（把所有的 $x$ 变成 $y$ ）和区间第 $k$ 小， $n, m, a \le 10^5$ </p><h3 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h3><p>当然考虑分块</p><p>先设块长为 $B = \sqrt{n}$ ，考虑询问，先找到询问的区间，这个区间必定是由整块+散点组成，而这步寻找可以 $O(1)$ 找到</p><p>注意到 $a \le 10^5$ ，值域与 $n$ 同级，考虑对值域也分块（为区分称其为值块），设块长为 $V = \sqrt{n}$ ，记 <code>cnt[i][j]</code> 表示第 $i$ 块内的数值在第 $j$ 值块内的有几个</p><p>但是这个区间最多有 $\sqrt{n}$ 个块，又最多要枚举 $\sqrt{n}$ 个值块，这显然不可接受，由于对于单次询问，包括的块不变，考虑对块进行<strong>前缀和</strong>，设 <code>cnt[i][j]</code> 表示前 $i$ 块内的数值在第 $j$ 值块内的有几个，再开一个临时数组 <code>tcnt[j]</code> 表示散点中数值在第 $j$ 值块内的有几个，枚举可得答案所在值块，我们发现同理可得答案，具体的，设 <code>rel[i][j]</code> 表示前 $i$ 块内的数值是 $j$ 的有几个， <code>trel[j]</code> 同理，枚举可得答案，注意到枚举 <code>cnt[i][j]</code> 的时间是 $O(\sqrt{n})$ 的（只用枚举 $j$ ），枚举 <code>rel[i][j]</code> 也是 $O(\sqrt{n})$ 的，于是，我们用单次 $O(\sqrt{n})$ 的时间（目前看来）， $O(n \sqrt{n})$ 的空间（ <code>rel</code> 数组）解决了询问</p><p>考虑修改，先看散点，明显暴力就行了，修改的区间也可以 $O(1)$ 找到，对于整块每次修改需要一并修改 <code>cnt</code> 和 <code>rel</code> ，并且由于他们是“前缀和”，必须要把后面的每个块都改了，时间是 $O(\sqrt{n})$ （注意这里不要每个块都去修改后面，那样是 $O(n)$ 的，应该记一个修改量的前缀和），就……行了？</p><p>行个鬼啊！区间在修改完后一定要打上懒标记，不然下一次单点修改时查到的就是错误的值啊！</p><p>发现区间修改有一个优美的性质：值相等的点无论如何一定相等，这启发我们打<strong>并查集</strong>（对每一块开一个），把相等的点直接并到一起，这样，区间的标记可以 $O(\log \sqrt{n})$ 解决，但是，副作用是：单点修改的时候怎么办？不能直接更改这个点的 $fa$ ，因为它下面可能还有点，直接重构其实是可以的办法（因为每次散点只在两个块，最多 $2\sqrt{n}$ 个点），但我们还有别的办法</p><p>考虑建一些<strong>辅助点</strong>，设点 <code>nd[i][j]</code> 代表第 $i$ 块值为 $j$ ，对于一个块里的点，把他们全都并到 $nd$ 上去（换句话说，只有 $nd$ 有儿子），这样，散点就直接改就行了，而整块可以让 <code>nd[i][x]</code> 的 $fa$ 改为 <code>nd[i][y]</code> ，并让 <code>nd[i][x] = 0</code> （这代表这个区间没有值为 $x$ 的点），特殊情况是 <code>nd[i][y] == 0</code> ，这个时候就新建一个节点（<del>浪费空间ing</del>）</p><p>考虑空间， $nd$ 数组大小为 $O(n \sqrt{n})$ ，因为最初有 $n$ 个点（它们不做父亲），每一块最多有 $\sqrt{n}$ 个值，每次操作最多加 $\sqrt{n}$ 个辅助点（每块一个），并查集的节点数最多是 $n + \sqrt{n} * \sqrt{n} + m * \sqrt{n}$ 可以看作 $O(n \sqrt{n})$ 的空间；而对于时间，并查集的修改都是 $O(1)$ 的，单点的查询是 $O(\log \sqrt{n})$ （这个 $\log \sqrt{n}$ 非常解决于 $1$ ，因为并查集的深度只有辅助点个数，加上有路径压缩），散点是 $O(\sqrt{n})$ 个，块是 $O(\sqrt{n})$ 个，而修改那两个数组要用 $O(\sqrt{n})$ ，单次修改的总时间为 $O(\sqrt{n} \log \sqrt{n})$ ，而由于单点的查询是 $O(\log \sqrt{n})$ ，上面的单次询问也变成了 $O(\sqrt{n} \log \sqrt{n})$ </p><p>额……先打出来</p><p>（受苦了一下午以后……）</p><p>好，TLE $0pts$ ，<del>wtm**lxl！！！</del>，我只能望月悲叹</p><p>吃了个饭，回来尝试卡块长，发现 $B = 500, V = 317$ 是既不会TLE，也不会MLE，只是WA了，貌似有戏……？</p><p>开始调试<del>受苦</del>（这记着是为了防止我忘了，可以跳过不看） ：</p><ul><li><p> $2022/1/24$ $18:00 \sim 20:50$ 自以为操作 $2$ 基本调试完毕</p></li><li><p> $2022/1/24$ $20:55$ 自以为调完然后交（<del>谁给我的自信</del>），WA  $10pts$ ，WA的点都是输出了负数，不知为何（疑似炸 <code>int</code> ？）</p></li><li><p>  $2022/1/24$ $21:00$ 发现负数是我调试的时候把范围改了没改回去，修正后手造大样例，结果WA了（幸好没交） </p></li><li><p> $2022/1/24$ $21:20$ 发现我的make date不够严谨，而且在大数据下操作 $2$ 也挂了</p></li><li><p> $2022/1/24$ $21:30$ 发现操作 $2$ 挂在没特判同块</p></li><li><p> $2022/1/24$ $21:51$ 同机房<strong>wfy</strong>巨佬帮我调出了一个很难的RE，这次应该是真的吧操作 $2$ 调好了</p></li><li><p> $2022/1/24$ $22:00$  $73pts$ 该睡觉了</p></li><li><p>话说我昨晚睡觉时想到，并查集上加一个按秩合并，可以优化到单次 $O(\sqrt{n} \alpha(n))$ </p></li><li><p> $2022/1/25$ $8:00$ AC了！！！</p></li></ul><p>做法如果还有不懂的可以看<a href="https://dydbenren.blog.luogu.org/solution-p4119">这个</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="comment">//求块号</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> get(x, len) (((x) - 1) / (len) + 1)</span></span><br><span class="line"><span class="comment">//块左端点</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LB(x, len) (((x) - 1) * (len) + 1)</span></span><br><span class="line"><span class="comment">//块右端点</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RB(x, len) ((x) * (len))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> Fast <span class="comment">//长的和shit一样的快读</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> L = <span class="number">10000</span> + <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[L], out[L], *iS, *iT;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> gh() (iT == iS ? iT = (iS = buf) + fread(buf, 1, L, stdin), (iT == iS ? EOF : *iS++) : *iS++)</span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; </span></span><br><span class="line"><span class="function">    IL <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="built_in">gh</span>(), t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            t |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line">        <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">gh</span>();</span><br><span class="line">        <span class="keyword">if</span> (t)</span><br><span class="line">            x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">flus</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">fwrite</span>(out, <span class="number">1</span>, l, stdout);</span><br><span class="line">        l = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        out[l++] = x;</span><br><span class="line">        <span class="keyword">if</span> (l == L - <span class="number">5</span>)</span><br><span class="line">            <span class="built_in">flus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function">    IL <span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">putc</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">            <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">        out[l++] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == L - <span class="number">5</span>)</span><br><span class="line">            <span class="built_in">flus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Fast::flus;</span><br><span class="line"><span class="keyword">using</span> Fast::putc;</span><br><span class="line"><span class="keyword">using</span> Fast::read;</span><br><span class="line"><span class="keyword">using</span> Fast::write;</span><br><span class="line"><span class="comment">//B:点块长,N:注意要多开一个B的大小,V:值块长,NB:开空间用</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>  B = <span class="number">500</span>, N = <span class="number">1e5</span> + B + <span class="number">1</span>, V = <span class="number">317</span>, NB = B + <span class="number">5</span>;</span><br><span class="line"><span class="comment">//num:块数,wi:最大值</span></span><br><span class="line"><span class="keyword">int</span> num, wi;</span><br><span class="line"><span class="comment">//如题</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Block</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//cnt:块值前缀和,rel:真实值前缀和</span></span><br><span class="line">    <span class="keyword">int</span> cnt[NB], rel[N];</span><br><span class="line">    <span class="comment">//b[i].nd[j]:第i块值为j的并查集根</span></span><br><span class="line">    <span class="keyword">int</span> nd[N];</span><br><span class="line">&#125; b[NB];</span><br><span class="line"><span class="comment">//并查集:父亲,大小,值(仅当为根时有意义)</span></span><br><span class="line"><span class="keyword">int</span> fa[N * NB + N * <span class="number">2</span>], si[N * NB + N * <span class="number">2</span>], val[N * NB + N * <span class="number">2</span>], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//路径压缩</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">newnd</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> v)</span> <span class="comment">//新建并查集根节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = ++tot, fa[x] = x, si[x] = <span class="number">0</span>, val[x] = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> <span class="comment">//按秩合并,把x并给y</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (si[x] &gt; si[y])</span><br><span class="line">    &#123;</span><br><span class="line">        val[x] = val[y];</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    fa[x] = y, si[y] += si[x], x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">va</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//返回点x的真实值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val[<span class="built_in">find</span>(x)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//栈用于还原tcnt和trel</span></span><br><span class="line">    STC <span class="keyword">int</span> tcnt[NB], trel[N], stk[NB &lt;&lt; <span class="number">1</span>], top;</span><br><span class="line">    STC <span class="keyword">int</span> t, tt, x;</span><br><span class="line">    <span class="comment">//特判同块</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">get</span>(l, B) == <span class="built_in">get</span>(r, B))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (; l &lt;= r; ++l)</span><br><span class="line">        &#123;</span><br><span class="line">            x = <span class="built_in">va</span>(l);</span><br><span class="line">            ++tcnt[<span class="built_in">get</span>(x, V)], ++trel[x];</span><br><span class="line">            stk[++top] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (x = <span class="number">0</span>, t = <span class="number">1</span>, tt = <span class="built_in">get</span>(wi, V); t &lt;= tt; ++t)</span><br><span class="line">            <span class="keyword">if</span> ((x += tcnt[t]) &gt;= k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (tt = <span class="built_in">RB</span>(t, V); ; --tt)</span><br><span class="line">                    <span class="keyword">if</span> ((x -= trel[tt]) &lt; k)</span><br><span class="line">                    &#123;</span><br><span class="line">                        t = tt;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//处理散点</span></span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">get</span>(l - <span class="number">1</span>, B) == (t = <span class="built_in">get</span>(l, B))) <span class="comment">//这里虽然第一块多了个点0但不影响答案</span></span><br><span class="line">            <span class="keyword">for</span> (; <span class="built_in">get</span>(l, B) == t; ++l)</span><br><span class="line">            &#123;</span><br><span class="line">                x = <span class="built_in">va</span>(l);</span><br><span class="line">                ++tcnt[<span class="built_in">get</span>(x, V)], ++trel[x];</span><br><span class="line">                stk[++top] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">get</span>(r + <span class="number">1</span>, B) == (t = <span class="built_in">get</span>(r, B)))</span><br><span class="line">            <span class="keyword">for</span> (; <span class="built_in">get</span>(r, B) == t; --r)</span><br><span class="line">            &#123;</span><br><span class="line">                x = <span class="built_in">va</span>(r);</span><br><span class="line">                ++tcnt[<span class="built_in">get</span>(x, V)], ++trel[x];</span><br><span class="line">                stk[++top] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//找到答案(这里假设答案一定存在)</span></span><br><span class="line">        <span class="keyword">for</span> (x = <span class="number">0</span>, t = <span class="number">1</span>, l = <span class="built_in">get</span>(l, B), r = <span class="built_in">get</span>(r, B), tt = <span class="built_in">get</span>(wi, V); t &lt;= tt; ++t)</span><br><span class="line">            <span class="keyword">if</span> ((x += tcnt[t] + b[r].cnt[t] - b[l - <span class="number">1</span>].cnt[t]) &gt;= k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (tt = <span class="built_in">RB</span>(t, V); ; --tt)</span><br><span class="line">                    <span class="keyword">if</span> ((x -= trel[tt] + b[r].rel[tt] - b[l - <span class="number">1</span>].rel[tt]) &lt; k)</span><br><span class="line">                    &#123;</span><br><span class="line">                        t = tt;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//还原</span></span><br><span class="line">    <span class="keyword">while</span> (top)</span><br><span class="line">    &#123;</span><br><span class="line">        x = stk[top--];</span><br><span class="line">        --tcnt[<span class="built_in">get</span>(x, V)], --trel[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    wi = <span class="built_in">max</span>(wi, y);</span><br><span class="line">    STC <span class="keyword">int</span> t, tt, xx, yy, ll;</span><br><span class="line">    <span class="comment">//记录l用于还原</span></span><br><span class="line">    ll = l;</span><br><span class="line">    xx = <span class="built_in">get</span>(x, V), yy = <span class="built_in">get</span>(y, V);</span><br><span class="line">    <span class="comment">//还原前缀和</span></span><br><span class="line">    <span class="keyword">for</span> (t = num, tt = <span class="built_in">get</span>(ll, B); t &gt;= tt; --t)</span><br><span class="line">    &#123;</span><br><span class="line">        b[t].cnt[xx] -= b[t - <span class="number">1</span>].cnt[xx];</span><br><span class="line">        b[t].rel[x] -= b[t - <span class="number">1</span>].rel[x];</span><br><span class="line">        b[t].cnt[yy] -= b[t - <span class="number">1</span>].cnt[yy];</span><br><span class="line">        b[t].rel[y] -= b[t - <span class="number">1</span>].rel[y];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//特判同块</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">get</span>(l, B) == (t = <span class="built_in">get</span>(r, B)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[t].rel[x] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!b[t].nd[y])</span><br><span class="line">                <span class="built_in">newnd</span>(b[t].nd[y], y);</span><br><span class="line">            <span class="keyword">for</span> (; l &lt;= r; ++l)</span><br><span class="line">                <span class="keyword">if</span> ((tt = <span class="built_in">va</span>(l)) == x)</span><br><span class="line">                &#123;</span><br><span class="line">                    fa[l] = b[t].nd[y];</span><br><span class="line">                    <span class="comment">//注意同时跟新大小</span></span><br><span class="line">                    ++si[b[t].nd[y]];</span><br><span class="line">                    --si[b[t].nd[x]];</span><br><span class="line">                    --b[t].cnt[xx], --b[t].rel[x];</span><br><span class="line">                    ++b[t].cnt[yy], ++b[t].rel[y];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//处理散点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">get</span>(l - <span class="number">1</span>, B) == (t = <span class="built_in">get</span>(l, B)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[t].rel[x] &lt;= <span class="number">0</span>)</span><br><span class="line">                l = <span class="built_in">LB</span>(t + <span class="number">1</span>, B); </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!b[t].nd[y])</span><br><span class="line">                    <span class="built_in">newnd</span>(b[t].nd[y], y);</span><br><span class="line">                <span class="keyword">for</span> (; <span class="built_in">get</span>(l, B) == t; ++l)</span><br><span class="line">                    <span class="keyword">if</span> ((tt = <span class="built_in">va</span>(l)) == x)</span><br><span class="line">                    &#123;</span><br><span class="line">                        fa[l] = b[t].nd[y];</span><br><span class="line">                        ++si[b[t].nd[y]];</span><br><span class="line">                        --si[b[t].nd[x]];</span><br><span class="line">                        --b[t].cnt[xx], --b[t].rel[x];</span><br><span class="line">                        ++b[t].cnt[yy], ++b[t].rel[y];</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">get</span>(r + <span class="number">1</span>, B) == (t = <span class="built_in">get</span>(r, B)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[t].rel[x] &lt;= <span class="number">0</span>)</span><br><span class="line">                r = <span class="built_in">RB</span>(t - <span class="number">1</span>, B); </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!b[t].nd[y])</span><br><span class="line">                    <span class="built_in">newnd</span>(b[t].nd[y], y);</span><br><span class="line">                <span class="keyword">for</span> (; <span class="built_in">get</span>(r, B) == t; --r)</span><br><span class="line">                    <span class="keyword">if</span> ((tt = <span class="built_in">va</span>(r)) == x)</span><br><span class="line">                    &#123;</span><br><span class="line">                        fa[r] = b[t].nd[y];</span><br><span class="line">                        ++si[b[t].nd[y]];</span><br><span class="line">                        --si[b[t].nd[x]];</span><br><span class="line">                        --b[t].cnt[xx], --b[t].rel[x];</span><br><span class="line">                        ++b[t].cnt[yy], ++b[t].rel[y];</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理整块</span></span><br><span class="line">        <span class="keyword">for</span> (l = <span class="built_in">get</span>(l, B), r = <span class="built_in">get</span>(r, B); l &lt;= r; ++l)</span><br><span class="line">            <span class="keyword">if</span> (b[l].rel[x] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!b[l].nd[y])</span><br><span class="line">                    <span class="built_in">newnd</span>(b[l].nd[y], y);</span><br><span class="line">                <span class="built_in">merge</span>(b[l].nd[x], b[l].nd[y]);</span><br><span class="line">                b[l].cnt[yy] += b[l].rel[x];</span><br><span class="line">                b[l].rel[y] += b[l].rel[x];</span><br><span class="line">                b[l].cnt[xx] -= b[l].rel[x];</span><br><span class="line">                b[l].rel[x] -= b[l].rel[x];</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//再求前缀和</span></span><br><span class="line">    <span class="keyword">for</span> (t = <span class="built_in">get</span>(ll, B); t &lt;= num; ++t)</span><br><span class="line">    &#123;</span><br><span class="line">        b[t].cnt[xx] += b[t - <span class="number">1</span>].cnt[xx];</span><br><span class="line">        b[t].rel[x] += b[t - <span class="number">1</span>].rel[x];</span><br><span class="line">        b[t].cnt[yy] += b[t - <span class="number">1</span>].cnt[yy];</span><br><span class="line">        b[t].rel[y] += b[t - <span class="number">1</span>].rel[y];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    num = <span class="built_in">get</span>(n, B), wi = <span class="number">0</span>;</span><br><span class="line">    tot = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(a);</span><br><span class="line">        wi = <span class="built_in">max</span>(wi, a);</span><br><span class="line">        <span class="keyword">auto</span> &amp;t = b[<span class="built_in">get</span>(i, B)];</span><br><span class="line">        <span class="keyword">if</span> (!t.nd[a])</span><br><span class="line">            <span class="built_in">newnd</span>(t.nd[a], a);</span><br><span class="line">        fa[i] = t.nd[a];</span><br><span class="line">        ++si[t.nd[a]];</span><br><span class="line">        ++t.cnt[<span class="built_in">get</span>(a, V)], ++t.rel[a];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, t = <span class="built_in">get</span>(wi, V); j &lt;= t; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; ++i)</span><br><span class="line">            b[i].cnt[j] += b[i - <span class="number">1</span>].cnt[j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= wi; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; ++i)</span><br><span class="line">            b[i].rel[j] += b[i - <span class="number">1</span>].rel[j];</span><br><span class="line">    <span class="keyword">int</span> op, l, r, x, y;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(op), <span class="built_in">read</span>(l), <span class="built_in">read</span>(r), <span class="built_in">read</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">read</span>(y), <span class="built_in">modify</span>(l, r, x, y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">write</span>(<span class="built_in">ask</span>(l, r, x)), <span class="built_in">putc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">flus</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>我用于喜欢我妻由乃！</p><h2 id="第二分块"><a href="#第二分块" class="headerlink" title="第二分块"></a>第二分块</h2><p><strong>「突刺贯穿的第二分块」</strong></p><p>好，我们乘胜追击！</p><p><a href="https://www.luogu.com.cn/problem/P4117">五彩斑斓的世界</a></p><p>维护一个序列，支持区间修改（把所有大于 $x$ 的数减去 $x$ ）和查询区间中 $x$ 的出现次数， $n \le 10^5, m \le 5 \times 10^5, a \le 10^5 + 1$  ，时限 $7.5s$ ，空间 $64MB$ </p><h3 id="做题-1"><a href="#做题-1" class="headerlink" title="做题"></a>做题</h3><p>不难发现，如果不是那<del>sm</del>的空间，可以用最初分块解决，但这空间，  $O(n \sqrt{n})$ 都开不出来</p><p>那看看着题和最初分块的不同呢？发现询问是出现次数，而不是排名，这个显然可以直接记录，就不必要前缀和了，注意，这意味着分块后<strong>每个块之间的信息毫无关联</strong>，并且答案就是<strong>区间包含的所有答案的累加</strong>于是有一个控制空间的方法：</p><p>把操作离线下来，对每个块都按顺序处理一遍所有的操作，然后把询问的答案累加即可，空间是 $O(n + m)$ 的了（也许开 <code>short</code>  也行，没试过）</p><p>那么该如何修改呢？注意到由于我们离线了，所以要枚举 $\sqrt{n}$ 块，每一块又要枚举 $m$ 个操作，所以对于每个操作我们要做到 $O(1)$ ，或者所有操作加起来共用 $O(n)$ </p><p>这……直接瞟一眼<a href="https://olddrivertree.blog.uoj.ac/blog/4715">出题人的题解</a>，发现可以这样懒标记+并查集维护，具体的，设当前块最大值为 $mx$ ：</p><ul><li>若 $mx \le 2x$ ，就直接枚举大于 $x$ 的数，让它们减去 $x$ </li><li>若 $mx &gt; 2x$ ，就直接枚举小于 $x$ 的数，让它们加上 $x$ ，然后区间打上减 $x$ 的标记</li></ul><p>设后面的“枚举……”时间复杂度为 $O(t)$ ，发现 $mx$ 的真实值（算上懒标记）是单调下降的，由于 $mx$ 初始最大为 $10^5 + 1$ ，所以所有操作时间加起来是 $O(a) * O(t)$ 的，由于总共只能用 $O(n)$ ，所以必须保证 $O(t) = O(1)$ </p><p>还是可以开并查集（但这里可不能像最初分块一样开辅助点，空间不够），对每个值开一个并查集，然后记录这个并查集的 $si$ ，整块修改的时候直接合并两个值的并查集，查询的时候直接输出这个并查集的 $si$ ，都是 $O(1)$ 的；如果是散点修改，就直接重构；散点查询，就通过并查集找到范围内每个数的值，暴力统计即可</p><p>但对于散点的时间，我们还得从另一个角度分析才能得出结论：假设我们没有离线，空间就开那么大，则 $m$ 次操作最多重构 $2m$  个块，每个块 $\sqrt{n}$ 个点，同时怼上路径压缩，由于每次会遍历每个叶子，路径压缩的效果极好，散点均摊每个点可以当作 $O(1)$ ，则时间复杂度为 $O(m \sqrt{n})$ ，均摊到每个块和每个操作，就是 $O(1)$ 了（好像严格的 $O(1)$ 应该是用链表代替并查集，重构更快，但不太好打）</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> get(x, len) (((x) - 1) / (len) + 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LB(x, len) (((x) - 1) * (len) + 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RB(x, len) ((x) * (len))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> Fast</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> L = <span class="number">10000</span> + <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[L], out[L], *iS, *iT;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> gh() (iT == iS ? iT = (iS = buf) + fread(buf, 1, L, stdin), (iT == iS ? EOF : *iS++) : *iS++)</span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; </span></span><br><span class="line"><span class="function">    IL <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="built_in">gh</span>(), t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            t |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line">        <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">gh</span>();</span><br><span class="line">        <span class="keyword">if</span> (t)</span><br><span class="line">            x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">flus</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">fwrite</span>(out, <span class="number">1</span>, l, stdout);</span><br><span class="line">        l = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        out[l++] = x;</span><br><span class="line">        <span class="keyword">if</span> (l == L - <span class="number">5</span>)</span><br><span class="line">            <span class="built_in">flus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function">    IL <span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">putc</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">            <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">        out[l++] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == L - <span class="number">5</span>)</span><br><span class="line">            <span class="built_in">flus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Fast::flus;</span><br><span class="line"><span class="keyword">using</span> Fast::putc;</span><br><span class="line"><span class="keyword">using</span> Fast::read;</span><br><span class="line"><span class="keyword">using</span> Fast::write;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">5e5</span> + <span class="number">5</span>, A = <span class="number">1e5</span> + <span class="number">5</span>, B = <span class="number">1000</span>, NB = B + <span class="number">5</span>, N = <span class="number">1e6</span> + B + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Question</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, l, r, x, ans;</span><br><span class="line">&#125; ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Block</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fa[N], si[N], val[N], rt[A];</span><br><span class="line">    <span class="keyword">int</span> mx, tag, l, r;</span><br><span class="line">    <span class="function">IL <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">int</span> <span class="title">va</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rt[y])</span><br><span class="line">            fa[rt[x]] = rt[y];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            rt[y] = rt[x], val[rt[y]] = y;</span><br><span class="line">        si[y] += si[x];</span><br><span class="line">        rt[x] = si[x] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ++si[x[i]];</span><br><span class="line">            <span class="keyword">if</span> (!rt[x[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                mx = <span class="built_in">max</span>(mx, x[i]);</span><br><span class="line">                rt[x[i]] = i;</span><br><span class="line">                fa[i] = i, val[i] = x[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                fa[i] = rt[x[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">destroy</span><span class="params">(<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//一定在摧毁前找到真实值</span></span><br><span class="line">            x[i] = <span class="built_in">va</span>(i);</span><br><span class="line">            rt[x[i]] = si[x[i]] = <span class="number">0</span>;</span><br><span class="line">            x[i] -= tag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">            fa[i] = <span class="number">0</span>;</span><br><span class="line">        tag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mx - tag &lt; (d &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = mx; i &gt; d + tag; --i)</span><br><span class="line">                <span class="keyword">if</span> (rt[i])</span><br><span class="line">                    <span class="built_in">merge</span>(i, i - d);</span><br><span class="line">            <span class="comment">//这里最大值不一定要保证存在,反正上面判了rt的,但一定要不多不少</span></span><br><span class="line">            mx = <span class="built_in">min</span>(mx, d + tag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> + tag; i &lt;= d + tag; ++i)</span><br><span class="line">                <span class="keyword">if</span> (rt[i])</span><br><span class="line">                    <span class="built_in">merge</span>(i, i + d);</span><br><span class="line">            tag += d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> ll ,<span class="keyword">int</span> rr, <span class="keyword">int</span> x[], <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ll &gt; rr)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="built_in">destroy</span>(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = ll; i &lt;= rr; ++i)</span><br><span class="line">            <span class="keyword">if</span> (x[i] &gt; d)</span><br><span class="line">                x[i] -= d;</span><br><span class="line">        <span class="built_in">build</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (d + tag &gt; A)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> si[d + tag];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> ll, <span class="keyword">int</span> rr, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = ll; i &lt;= rr; ++i)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">va</span>(i) - tag == d)</span><br><span class="line">                ++res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; blk;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> a[N];</span><br><span class="line">    STC Question q[M];</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)    </span><br><span class="line">        <span class="built_in">read</span>(q[i].op), <span class="built_in">read</span>(q[i].l), <span class="built_in">read</span>(q[i].r), <span class="built_in">read</span>(q[i].x), q[i].ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">get</span>(n, B); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        blk.l = <span class="built_in">LB</span>(i, B);</span><br><span class="line">        blk.r = <span class="built_in">RB</span>(i, B);</span><br><span class="line">        blk.<span class="built_in">build</span>(a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q[j].op == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (q[j].l &lt;= blk.l &amp;&amp; q[j].r &gt;= blk.r)</span><br><span class="line">                    blk.<span class="built_in">modify</span>(q[j].x);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    blk.<span class="built_in">change</span>(<span class="built_in">max</span>(q[j].l, blk.l), <span class="built_in">min</span>(q[j].r, blk.r), a, q[j].x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (q[j].l &lt;= blk.l &amp;&amp; q[j].r &gt;= blk.r)</span><br><span class="line">                    q[j].ans += blk.<span class="built_in">query</span>(q[j].x);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    q[j].ans += blk.<span class="built_in">ask</span>(<span class="built_in">max</span>(q[j].l, blk.l), <span class="built_in">min</span>(q[j].r, blk.r), q[j].x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        blk.<span class="built_in">destroy</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="keyword">if</span> (q[i].op == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">write</span>(q[i].ans), <span class="built_in">putc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">flus</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其它-1"><a href="#其它-1" class="headerlink" title="其它"></a>其它</h3><p>这是个galgame吗？我好像没玩过……</p><h2 id="第三分块"><a href="#第三分块" class="headerlink" title="第三分块"></a>第三分块</h2><p>由于lxl觉得它过于简单，被开除块籍了，后面数字断了的就是开除块籍了，不再提</p><h2 id="第四分块"><a href="#第四分块" class="headerlink" title="第四分块"></a>第四分块</h2><p><strong>「弑尽破净的第四分块」</strong></p><p><a href="https://www.luogu.com.cn/problem/P5397">天降之物</a></p><p>维护一个序列，支持两种操作：</p><ol><li>区间修改，把序列中所有的 $x$ 变成 $y$ </li><li>在整个序列中找出一组 $i, j$ 满足 $a_i = x, a_j = y$ ，使 $|i - j|$ 最小，并输出 $i - j$ ，不存在输出Ikaros</li></ol><p>强制在线， $n, m, a \le 10^5$ ， $500ms, 256MB$ </p><h3 id="做题-2"><a href="#做题-2" class="headerlink" title="做题"></a>做题</h3><p>额……操作全都是对<strong>序列中</strong>进行，分个鬼的块啊！但是毕竟这是“第四分块”，加上出题人lxl，估计还得分，就硬分！</p><p>还是考虑对序列分块，同时记录每一块内每一个数的个数，对于询问，如果有一个块同时包含两个数，直接暴力，时间 $O(B)$ ；否则吧每个块当成一个点，点上只有 $x, y, 0$ 三种信息，找到最近的 $x, y$ ，整块直接加，散点暴力，时间为 $O(2B + \frac{n}{B})$ ，修改就并查集维护即可，考虑到每次修改是对于整个序列，可以所有数共用一个并查集，不存在散点的情况，块长取 $B = \sqrt{n}$ 时，时空复杂度为均为 $O(n \sqrt{n})$ ，希望它别卡常……</p><p>艹，打到一半意识到这是完全假的，因为可能会有多个块同时包含两个数，而且还有可能出现两个相邻块最优，或者多个跨块最优……总之就是完全假掉了</p><p>臭不要脸的康康题解~</p><p>原来正解是根号分治（那为啥要叫第四分块啊！不过好像有人分块卡过了），不过既然是学习，当然学更稳当的根号分治了（就是平衡时间复杂度）</p><p>在讲正解前，先明确一些东西：</p><p>先考虑暴力的做法，当然是对每个数维护一个<strong>有序</strong>的位置集合，合并时归并排序，查询类似归并用双指针，但不合并，据说这样有 $60pts$ （夭寿了！lxl出的题有暴力分了！）</p><p>设 <code>si[x]</code> 表示 $x$ 在序列中出现的次数，当 <code>si[x] &gt; lim</code> （ $lim$ 是阈值）时称其为<strong>大点</strong>，否则是<strong>小点</strong>；定义数组 <code>as[x][y]</code> 有意义当且仅当 $x$ 是大点，其意义为“大点 $x$ 到值 $y$ 的最小距离”；定义<strong>附属集合</strong> <code>v[x]</code> 表示“自上一次重构以来，新出现的 $x$ 的位置”</p><p>我们要保证所有附属集合的大小不超过 $lim$ ，具体的，每当一个点 $x$ 的附属集合的大小超过 $lim$ ，我们就暴力跟新 <code>as[x][]</code> （此时 $x$ 必为大点），暴力可以做到 $O(n)$ ，我们称这个操作为<strong>重构</strong></p><p>另外，在修改操作把 $x$ 变成 $y$ 时，可以开一个数组 <code>val[x]</code> 代表值 $x$ 的真实值，这样我们就可以交换 $x, y$ 了，只要记得只要修改一下 $val$ 即可</p><p>好，现在来看根号分治：</p><p>因为 $x, y$ 可以交换，所以只考虑 <code>si[x] &lt;= si[y]</code> 的情况 </p><p>对于修改，设把 $x$ 变成 $y$ </p><ul><li>若 $x$ 是小点，暴力归并二者的附属集合（把 $x$ 并入 $y$ ）；如果合并后（这是预判，不必真的合并） $y$ 的附属集合大小超过 $lim$ 就重构 $y$ </li><li>若 $x$ 为大点（此时 $y$ 必为大点），显然把 $x$ 当成 $y$ 直接暴力重构（为啥不合并呢？因为 $x$ 是大点，它的一部分答案信息已经在 <code>as[x][]</code> 里了，附属集合记录信息不完全）</li></ul><p>重构发生会把至少 $lim$ 个数从附属集合里除去，它们的信息被记在了 $as$ 中，且它们<strong>不会在出现在任何附属集合内</strong>了，而当所有附属集合都为空时，显然不会再发生重构，所以重构最多发生 $\frac{n}{lim}$ 次</p><p>合并附属集合显然是 $O(lim)$ ，不重构只修改 <code>as[][y]</code> 是 $O(\frac{n}{lim})$ 所以修改的时间复杂度为 $O(m * \max(lim, \frac{n}{lim}) + n * \frac{n}{lim})$ </p><p>对于查询 $x, y$ </p><p>先暴力“归并”（不合并）二者附属集合，再与两个数中大点的 $as$ 取 $\min$ </p><p>查询的时间为 $O(m * lim)$ </p><p>最后关于空间，最多有 $\frac{n}{lim}$ 个大点，而每个点的附属集合最多有 $lim$ 个数，所以空间为 $O(\frac{n}{lim} * a + n * lim)$ ，另外一定注意 <code>vector</code> 的 <code>clear</code> <strong>不释放空间</strong>，具体写法见代码</p><p>明显，因为 $n, m, a$ 同级， $lim = \sqrt{n}$ 时时空都达到最优（然而实际上一般出题人都会卡 $\sqrt{n}$ 的，开大点可能好些，但本题不必）</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IL inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> Fast</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> L = <span class="number">10000</span> + <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[L], out[L], *iS, *iT;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> gh() (iT == iS ? iT = (iS = buf) + fread(buf, 1, L, stdin), (iT == iS ? EOF : *iS++) : *iS++)</span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; </span></span><br><span class="line"><span class="function">    IL <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="built_in">gh</span>(), t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            t |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line">        <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">gh</span>();</span><br><span class="line">        <span class="keyword">if</span> (t)</span><br><span class="line">            x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">flus</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">fwrite</span>(out, <span class="number">1</span>, l, stdout);</span><br><span class="line">        l = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IL <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        out[l++] = x;</span><br><span class="line">        <span class="keyword">if</span> (l == L - <span class="number">5</span>)</span><br><span class="line">            <span class="built_in">flus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function">    IL <span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">putc</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">            <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">        out[l++] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == L - <span class="number">5</span>)</span><br><span class="line">            <span class="built_in">flus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Fast::flus;</span><br><span class="line"><span class="keyword">using</span> Fast::putc;</span><br><span class="line"><span class="keyword">using</span> Fast::read;</span><br><span class="line"><span class="keyword">using</span> Fast::write;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> L = <span class="number">317</span>, NL = L + <span class="number">5</span>, N = <span class="number">1e5</span> + L + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, a[N];</span><br><span class="line"><span class="comment">//id记录大点编号</span></span><br><span class="line"><span class="keyword">int</span> lim, si[N], as[NL][N], id[N], val[N], tot = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v[N];</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">write_Ikaros</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">putc</span>(<span class="string">&#x27;I&#x27;</span>), <span class="built_in">putc</span>(<span class="string">&#x27;k&#x27;</span>), <span class="built_in">putc</span>(<span class="string">&#x27;a&#x27;</span>), <span class="built_in">putc</span>(<span class="string">&#x27;r&#x27;</span>), <span class="built_in">putc</span>(<span class="string">&#x27;o&#x27;</span>), <span class="built_in">putc</span>(<span class="string">&#x27;s&#x27;</span>), <span class="built_in">putc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//重构</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!id[x])</span><br><span class="line">        id[x] = ++tot;</span><br><span class="line">    <span class="keyword">int</span> t = id[x];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i)</span><br><span class="line">        as[t][i] = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = INF; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (a[i] == x)</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            as[t][a[i]] = <span class="built_in">min</span>(as[t][a[i]], ++j);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n, j = INF; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (a[i] == x)</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            as[t][a[i]] = <span class="built_in">min</span>(as[t][a[i]], ++j);</span><br><span class="line">    as[t][x] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//把v和一个空vector交换,开在函数里的会被释放</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; l18qAKIOI;</span><br><span class="line">    v[x].<span class="built_in">swap</span>(l18qAKIOI);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//合并</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, sx = v[x].<span class="built_in">size</span>(), sy = v[y].<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; sx &amp;&amp; j &lt; sy)</span><br><span class="line">        t.<span class="built_in">push_back</span>(v[x][i] &lt; v[y][j] ? v[x][i++] : v[y][j++]);</span><br><span class="line">    <span class="keyword">while</span> (i &lt; sx)</span><br><span class="line">        t.<span class="built_in">push_back</span>(v[x][i++]);</span><br><span class="line">    <span class="keyword">while</span> (j &lt; sy)</span><br><span class="line">        t.<span class="built_in">push_back</span>(v[y][j++]);</span><br><span class="line">    v[y] = t;</span><br><span class="line">&#125;</span><br><span class="line">IL <span class="keyword">int</span> _merge(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, sx = v[x].<span class="built_in">size</span>(), sy = v[y].<span class="built_in">size</span>(), res = INF;</span><br><span class="line">    <span class="keyword">if</span> (!sx || !sy)</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; sx &amp;&amp; j &lt; sy)</span><br><span class="line">        res = <span class="built_in">min</span>(res, v[x][i] &lt; v[y][j] ? v[y][j] - v[x][i++] : v[x][i] - v[y][j++]);</span><br><span class="line">    <span class="keyword">while</span> (i &lt; sx)</span><br><span class="line">        res = <span class="built_in">min</span>(res, <span class="built_in">abs</span>(v[x][i++] - v[y][sy - <span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">while</span> (j &lt; sy)</span><br><span class="line">        res = <span class="built_in">min</span>(res, <span class="built_in">abs</span>(v[x][sx - <span class="number">1</span>] - v[y][j++]));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _x = val[x], _y = val[y];</span><br><span class="line">    <span class="keyword">if</span> (!si[_x] || _x == _y)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (si[_x] &gt; si[_y])</span><br><span class="line">        val[y] = _x, <span class="built_in">swap</span>(_x, _y);</span><br><span class="line">    val[x] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!_x || !_y)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    x = _x, y = _y;</span><br><span class="line">    <span class="keyword">if</span> (si[x] &gt; lim)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (a[i] == x)</span><br><span class="line">                a[i] = y;</span><br><span class="line">        <span class="built_in">build</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : v[x])</span><br><span class="line">            a[i] = y;</span><br><span class="line">        <span class="keyword">if</span> (si[x] + v[y].<span class="built_in">size</span>() &lt;= lim)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//重构y就不必进行这个跟新了,反正as[y][]是准确的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">                as[i][y] = <span class="built_in">min</span>(as[i][y], as[i][x]);</span><br><span class="line">            <span class="built_in">merge</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">build</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    si[y] += si[x], si[x] = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; wfyAKNOI;</span><br><span class="line">    v[x].<span class="built_in">swap</span>(wfyAKNOI);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IL <span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = val[x], y = val[y];</span><br><span class="line">    <span class="keyword">if</span> (!si[x] || !si[y])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = _merge(x, y);</span><br><span class="line">    <span class="keyword">if</span> (si[y] &gt; lim)</span><br><span class="line">        res = <span class="built_in">min</span>(res, as[id[y]][x]);</span><br><span class="line">    <span class="keyword">if</span> (si[x] &gt; lim)</span><br><span class="line">        res = <span class="built_in">min</span>(res, as[id[x]][y]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> last = <span class="number">0</span>, op, x, y;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    lim = <span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(a[i]), ++si[a[i]], v[a[i]].<span class="built_in">push_back</span>(i), val[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (si[i] &gt; lim)</span><br><span class="line">            <span class="built_in">build</span>(i);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(op), <span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line">        x ^= last, y ^= last;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">modify</span>(x, y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((last = <span class="built_in">ask</span>(x, y)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">write_Ikaros</span>(), last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">write</span>(last), <span class="built_in">putc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">flus</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其它-2"><a href="#其它-2" class="headerlink" title="其它"></a>其它</h3><p>天降之物也挺好看的，但可惜 $09$ 年是钢炼的天下</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>在写到这里时，已经 $7000$ 字了，才完成 $\frac{1}{3}$ ，觉定分成几部分（目前想的是三篇，到时候看吧）</p><p>已经打了两天的分块了，我都要吐了，缓缓再战，下一篇写好会在这里挂链接的</p><p>update：<a href="https://dyd-true.github.io/2022/01/25/%E5%A4%A7%E5%8A%9B%E5%88%86%E5%9D%972/#more">大力分块2</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; lxl是yyds&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="数据结构" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="分块" scheme="https://dyd-true.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>luoguCF896D Nephren Runs a Cinema</title>
    <link href="https://dyd-true.github.io/2022/01/24/luoguCF896D-Nephren-Runs-a-Cinema/"/>
    <id>https://dyd-true.github.io/2022/01/24/luoguCF896D-Nephren-Runs-a-Cinema/</id>
    <published>2022-01-24T02:53:11.000Z</published>
    <updated>2022-01-24T03:50:49.569Z</updated>
    
    <content type="html"><![CDATA[<p> 神仙dp？A了这题就去搞分块</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/CF896D">Nephren Runs a Cinema</a></p><p>一眼看过去就是卡特兰数</p><p>但VIP用户怎么办？我们发现他们在哪里都不影响答案，直接先不管他们，最后插入即可，就是把方案数乘一个 $\binom{n}{o}$ ， $o$ 代表有多少个VIP</p><p>来<del>推倒</del>推导卡特兰数， $Cat_n = \frac{\binom{2n}{n}}{n + 1} = \binom{2n}{n} - \binom{2n}{n - 1}$ </p><p>所以，合法方案数就是：<br>$$<br>(\sum_{j = l}^r \binom{n - o}{\frac{n - o - j}{2}} - \binom{n - o}{\frac{n - o - j}{2} - 1}) * \binom{n}{o}<br>$$<br>发现 $i, j$ 必定同奇偶，且 $j$ 是；连续的，直接消掉中间项，变为：<br>$$<br>(\binom{n - o}{\frac{n - o - l}{2}} - \binom{n - o}{\frac{n - o - r - 1}{2}}) * \binom{n}{o}<br>$$<br>枚举 $o$ 用时 $O(n)$ </p><p>但模数不是质数，考虑将模数分解，预处理阶乘的时候把包含模数的质因子取出来，记下指数，然后再乘回来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, D = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">int</span> n, p, l, r, phi;</span><br><span class="line"><span class="keyword">int</span> pr[N], inv[N], fac[N], c[N][D], cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = (LL)res * x % p;</span><br><span class="line">        x = (LL)x * x % p;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prev</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    phi = p;</span><br><span class="line">    fac[<span class="number">0</span>] = inv[<span class="number">0</span>] = fac[<span class="number">1</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> t = p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= t / i; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t % i)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        phi = (LL)phi / i * (i - <span class="number">1</span>);</span><br><span class="line">        pr[++cnt] = i;</span><br><span class="line">        <span class="keyword">while</span> (!(t % i))</span><br><span class="line">            t /= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; <span class="number">1</span>)</span><br><span class="line">        pr[++cnt] = t, phi = (LL)phi / t * (t - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        t = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i][j] = c[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">while</span> (!(t % pr[j]))</span><br><span class="line">                t /= pr[j], ++c[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        fac[i] = (LL)fac[i - <span class="number">1</span>] * t % p;</span><br><span class="line">        inv[i] = <span class="built_in">qpow</span>(fac[i], phi - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y &lt; <span class="number">0</span> || x &lt; y || n &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!y)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = (LL)fac[x] * inv[y] % p * inv[x - y] % p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">        res = (LL)res * <span class="built_in">qpow</span>(pr[i], c[x][i] - c[y][i] - c[x - y][i]) % p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;n, &amp;p, &amp;l, &amp;r);</span><br><span class="line">    <span class="built_in">prev</span>();</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    r = <span class="built_in">min</span>(r, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - l; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = ((LL)<span class="built_in">C</span>(n - i, (n - i - l) &gt;&gt; <span class="number">1</span>) - <span class="built_in">C</span>(n - i, (n - i - r - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) + p) % p;</span><br><span class="line">        ans = (ans + (LL)t * <span class="built_in">C</span>(n, i) % p) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>废话：</p><p>接下来开始搞大分块！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 神仙dp？A了这题就去搞分块&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="dp" scheme="https://dyd-true.github.io/tags/dp/"/>
    
    <category term="组合" scheme="https://dyd-true.github.io/tags/%E7%BB%84%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>luoguCF896E Welcome home, Chtholly</title>
    <link href="https://dyd-true.github.io/2022/01/24/luoguCF896E-Welcome-home-Chtholly/"/>
    <id>https://dyd-true.github.io/2022/01/24/luoguCF896E-Welcome-home-Chtholly/</id>
    <published>2022-01-24T02:43:56.000Z</published>
    <updated>2022-01-25T06:30:04.442Z</updated>
    
    <content type="html"><![CDATA[<p> 指令集</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/CF896E">Welcome home, Chtholly</a></p><p>很难的分块暴力……</p><p>但是指令集可以过！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;Ofast,no-stack-protector&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">&quot;sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> Fast</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> L = (<span class="number">1</span> &lt;&lt; <span class="number">20</span>) + <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[L], out[L], *iS, *iT;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> gh() (iT == iS ? iT = (iS = buf) + fread(buf, 1, L, stdin), (iT == iS ? EOF : *iS++) : *iS++)</span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; </span></span><br><span class="line"><span class="function">    <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="built_in">gh</span>(), t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            t |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">gh</span>();</span><br><span class="line">        <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">gh</span>();</span><br><span class="line">        <span class="keyword">if</span> (t)</span><br><span class="line">            x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flus</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">fwrite</span>(out, <span class="number">1</span>, l, stdout);</span><br><span class="line">        l = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        out[l++] = x;</span><br><span class="line">        <span class="keyword">if</span> (l == L - <span class="number">5</span>)</span><br><span class="line">            <span class="built_in">flus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">putc</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">            <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">        out[l++] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == L - <span class="number">5</span>)</span><br><span class="line">            <span class="built_in">flus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Fast::flus;</span><br><span class="line"><span class="keyword">using</span> Fast::putc;</span><br><span class="line"><span class="keyword">using</span> Fast::read;</span><br><span class="line"><span class="keyword">using</span> Fast::write;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, a[N];</span><br><span class="line"><span class="keyword">float</span> x;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op, l, r, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">read</span>(op), <span class="built_in">read</span>(l), <span class="built_in">read</span>(r), <span class="built_in">read</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">                a[i] -= (a[i] &gt; x) ? x : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">                ans += !(a[i] - x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>良心有点不安，后面会补分块做法的</p><p>update $2022/1/25$ ：学完第二分块了，一看这不就是板子题吗？直接看<a href="https://www.luogu.com.cn/problem/P4117">这个题</a>好了，代码我blog里有</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 指令集&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="分块" scheme="https://dyd-true.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>luoguP5064 [Ynoi2014] 等这场战争结束之后</title>
    <link href="https://dyd-true.github.io/2022/01/24/luoguP5064-Ynoi2014-%E7%AD%89%E8%BF%99%E5%9C%BA%E6%88%98%E4%BA%89%E7%BB%93%E6%9D%9F%E4%B9%8B%E5%90%8E/"/>
    <id>https://dyd-true.github.io/2022/01/24/luoguP5064-Ynoi2014-%E7%AD%89%E8%BF%99%E5%9C%BA%E6%88%98%E4%BA%89%E7%BB%93%E6%9D%9F%E4%B9%8B%E5%90%8E/</id>
    <published>2022-01-23T23:41:41.000Z</published>
    <updated>2022-01-24T02:37:53.194Z</updated>
    
    <content type="html"><![CDATA[<p> 做了那么久的水题，来道有难度的</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><a href="https://www.luogu.com.cn/problem/P5064">等这场战争结束之后</a></p><p>题意和永无乡类似，多了一个回退操作，支持回到第 $x$ 次操作后的状态， $n, m \le 10^5$ ，时间 $500ms$ ，空间 $20MB$ </p><p>先不管时空，看操作</p><h2 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h2><p>先看比永无乡多的这个操作，说是回退，但其实又和一般回退不同，因为它是“回到第 $x$ 次操作后的状态”，不只是这期间的加边要撤销，这期间的“回到……”也要撤销掉</p><p>那咋办呢？考虑建树，具体地，建出 $0$ 号点为根，对于第 $i$ 次操作（它的编号为 $i$ ），如果它是加边，就让它的父亲为 $i - 1$ ；如果是回到 $x$ ，就让它的父亲为 $x$ ；如果是询问，其实可以打标记的，但是最坏情况下对时空都没有优化，所以还是直接让它的父亲为 $i - 1$ 即可</p><p>这样只要dfs遍历一遍操作树，根据节点信息操作，就可以得到答案，时空消耗均为 $O(n)$ ，可以接受</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>现在来看如何根据节点信息操作，首先这是dfs，所以我们的操作必须支持撤销，且能够在线维护加边（联通）和查询第 $k$ 小</p><p>可撤销的查询第 $k$ 小可以考虑可持久化平衡树，但sm的空间（ $20MB$ ）不允许，考虑分块，对值域进行分块，记得离散化，单次 $O(\sqrt{n})$ </p><p>加边很明显用并查集，不打路径压缩，按秩合并单次询问可以做到 $O(\log n)$ </p><h2 id="时空"><a href="#时空" class="headerlink" title="时空"></a>时空</h2><p>现在来看时空限制，明显时空都是 $O(n\sqrt{n})$ ，一般的题也就过去了，但这个出题人不一般</p><p>时间 $500ms$ 没问题，但 $20MB$ 的空间只允许 $n \log n$ ，shit</p><p>尝试卡块数，设为 $B$ ，发现：</p><ul><li> $B \le 25$ 时， $96pts$ TLE</li><li> $25 &lt; B \le 27$ ， $92pts$ TLE + WA（不知道为啥WA）</li><li> $B &gt; 27$ ， $88pts$ MLE</li></ul><p>这就是由乃oi吗，i了i了</p><p>但是，我们发现 <code>short</code> 可以存 $2^{15} - 1$ ，大概 $3 \times 10^4$ ，而 $n / B$ 在 $B &gt; 10$ 的情况下不大于 <code>short</code> 所以可以开成 <code>short</code> ，空间变为 $O(\frac{n B}{2})$ ，计算出  $20MB = 20 * 1024 * 1024B$ ， $n \le 10^5$ ，不难发现 $20 * 1024 * 1024 / 2 / n$ ， $B$ 大概可以开 $100$ ，但别的数组也要空间呀，所以 $B$ 开个 $50$ 差不多</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>调试时遇到一些问题，莫名其妙输出 $0$ ，样例太水了，手打了 $makedate$ 和脚本对拍：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//make_date.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">rand</span>() % <span class="number">100000</span>, m = <span class="built_in">rand</span>() % <span class="number">100000</span>;</span><br><span class="line">cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="built_in">rand</span>() % <span class="number">10000</span>;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> op = <span class="built_in">rand</span>() % <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; op &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">rand</span>() % i;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">rand</span>() % n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">rand</span>() % (i / <span class="number">2</span> + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#check.bat</span><br><span class="line">g++ -o std std.cpp</span><br><span class="line">g++ -o t t.cpp</span><br><span class="line">g++ -o make_d make_d.cpp</span><br><span class="line">:<span class="built_in">label</span></span><br><span class="line">.\make_d &gt; t.<span class="keyword">in</span></span><br><span class="line">.\t &lt; t.<span class="keyword">in</span> &gt; t.out</span><br><span class="line">.\std &lt; t.<span class="keyword">in</span> &gt; t.ans</span><br><span class="line">fc /w /a t.out t.ans</span><br><span class="line"><span class="keyword">if</span> &quot;<span class="variable">%errorlevel%</span>&quot; == &quot;<span class="number">0</span>&quot; <span class="keyword">goto</span> <span class="built_in">label</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调出来发现是 <code>ask</code> 函数里面 <code>for (int i = (y - 1) * blk + 1, t = y * blk; i &lt;= t &amp;&amp; k; ++i)</code> 写成了 <code>for (int i = (y - 1) * blk + 1, t = y * num; i &lt;= t &amp;&amp; k; ++i)</code> 导致询问大小只有 $1$ 的联通块时输出 $0$ </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, B = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> si[N], fa[N];</span><br><span class="line"><span class="keyword">int</span> blk, num;</span><br><span class="line"><span class="keyword">short</span> cnt[N][B + <span class="number">5</span>]; <span class="comment">//short立大功</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Question</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> typ, x, y, ans;</span><br><span class="line">&#125; que[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;t) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> val &lt; t.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; p[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[N];</span><br><span class="line"><span class="keyword">int</span> h[N], idx = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = &#123;h[x], y&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x] ? x : <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> typ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (si[x] &gt; si[y])</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    fa[x] = (typ == <span class="number">1</span> ? y : x), si[y] += si[x] * typ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; ++i)</span><br><span class="line">        cnt[y][i] += cnt[x][i] * typ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &gt; si[x = <span class="built_in">find</span>(x)])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num &amp;&amp; !y; ++i)</span><br><span class="line">        <span class="keyword">if</span> (k &gt; cnt[x][i])</span><br><span class="line">            k -= cnt[x][i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (y - <span class="number">1</span>) * blk + <span class="number">1</span>, t = y * blk; i &lt;= t &amp;&amp; k; ++i)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(p[i].id) == x)</span><br><span class="line">            --k, res = p[i].val;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> typ1 = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (que[x].typ == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        que[x].x = <span class="built_in">find</span>(que[x].x), que[x].y = <span class="built_in">find</span>(que[x].y);</span><br><span class="line">        <span class="keyword">if</span> (que[x].x ^ que[x].y) <span class="comment">//就是que[x].x != que[x].y</span></span><br><span class="line">            typ1 = <span class="literal">true</span>, <span class="built_in">merge</span>(que[x].x, que[x].y, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (que[x].typ == <span class="number">3</span>)</span><br><span class="line">        que[x].ans = <span class="built_in">ask</span>(que[x].x, que[x].y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">        <span class="built_in">dfs</span>(e[i].ver);</span><br><span class="line">    <span class="keyword">if</span> (typ1)</span><br><span class="line">        <span class="built_in">merge</span>(que[x].x, que[x].y, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    blk = n / B; <span class="comment">//这里B是块数,blk是块长</span></span><br><span class="line">    <span class="keyword">if</span> (!blk)</span><br><span class="line">        blk = <span class="number">1</span>;</span><br><span class="line">    num = (n - <span class="number">1</span>) / blk + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p[i].val);</span><br><span class="line">        p[i].id = i;</span><br><span class="line">        si[fa[i] = i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//离散化</span></span><br><span class="line">    <span class="built_in">sort</span>(p + <span class="number">1</span>, p + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ++cnt[p[i].id][(i - <span class="number">1</span>) / blk + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//操作树</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">        h[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;que[i].typ);</span><br><span class="line">        <span class="keyword">if</span> (que[i].typ == <span class="number">2</span>)</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;que[i].x);</span><br><span class="line">            <span class="built_in">add</span>(que[i].x, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(i - <span class="number">1</span>, i);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;que[i].x, &amp;que[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="keyword">if</span> (que[i].typ == <span class="number">3</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, que[i].ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 做了那么久的水题，来道有难度的&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="https://dyd-true.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="luogu" scheme="https://dyd-true.github.io/tags/luogu/"/>
    
    <category term="练习" scheme="https://dyd-true.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="分块" scheme="https://dyd-true.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
    <category term="并查集" scheme="https://dyd-true.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>圆方树</title>
    <link href="https://dyd-true.github.io/2022/01/23/%E5%9C%86%E6%96%B9%E6%A0%91/"/>
    <id>https://dyd-true.github.io/2022/01/23/%E5%9C%86%E6%96%B9%E6%A0%91/</id>
    <published>2022-01-23T06:50:16.000Z</published>
    <updated>2022-01-23T08:49:28.070Z</updated>
    
    <content type="html"><![CDATA[<p> 又一个奇怪的树</p><span id="more"></span><h1 id="圆方树"><a href="#圆方树" class="headerlink" title="圆方树"></a>圆方树</h1><p>圆方树（Block forest）是一种树的结构，它能轻松的将仙人掌转化为树，并支持一些操作，有时我们也可以在一般无向图上使用它</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>先明确一些基本定义：</p><ol><li>仙人掌：每条边在不超过一个简单环中的无向图</li><li>点双连通分量：图中任意两不同点之间都有至少两条点不重复的路径</li></ol><p>要构造圆方树，当然是要构造出<strong>圆点</strong>和<strong>方点</strong>，圆点比较简单，直接保留仙人掌上的点即可；然后对仙人掌进行点双 $Tarjan$ 缩点，每一个点双就是一个方点</p><p>对于边，原图上的边统一不要，直接从所以方点向它对应的点双包括的圆点连边，这样，每一个点双就形成了以方点为根，圆点为叶的“菊花图”，而这很多个“菊花图”通过原图中的割点连接在一起（因为点双的分隔点是割点），如图：</p><p><img src="https://s2.loli.net/2022/01/23/qSYP7zrElZT8UAV.png" alt="圆方树"></p><p>圆方树的点数小于 $2n$ ，所以请注意各种数组大小要开两倍</p><p>其实，如果原图连通，则“圆方树”才是一棵树，如果原图有 $k$ 个连通分量，则它的圆方树也会形成 $k$ 棵树形成的森林</p><p>如果原图中某个连通分量只有一个点，则需要具体情况具体分析，我们在后续讨论中不考虑孤立点</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>直接对原图进行 $Tarjan$ ，因为原图上每个环都是一个点双，而且在栈中的顺序就是环上点的顺序，如果一个点 $i$ 的出边 $(i, j)$ 满足 $dfn(i) &lt; low(j)$ ，说明 $(i, j)$ 是一条树边，直接加上即可；如果 $dfn(i) = low(j)$ ，那么我们找到了一个环（可能是重边造成的二元环），则从栈中取出点直到取出 $j$ 为止，设这样从栈中取出的点集为 $R$ ，则 $i$ 和 $R$ 构成一个环</p><p>对于环，我们新建一个方点，对环上每个点连边即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[N], T[N * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line"><span class="keyword">int</span> stk[N], top;</span><br><span class="line"><span class="keyword">int</span> dfn[N], low[N], dfc = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    low[x] = dfn[x] = ++dfc;</span><br><span class="line">    stk[++top] = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : G[x])</span><br><span class="line">        <span class="keyword">if</span> (!dfn[y])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y);</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], low[y]);</span><br><span class="line">            <span class="keyword">if</span> (low[y] == dfn[x])<span class="comment">//标志着找到一个以x为根的点双连通分量</span></span><br><span class="line">            &#123;</span><br><span class="line">                ++cnt; <span class="comment">//增加方点个数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z != y; --top) <span class="comment">//这里一定要让z=0!</span></span><br><span class="line">                &#123;</span><br><span class="line">                    z = stk[top];</span><br><span class="line">                    T[cnt].<span class="built_in">push_back</span>(z);</span><br><span class="line">                    T[z].<span class="built_in">push_back</span>(cnt);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//注意x自身也要连边（但不退栈）</span></span><br><span class="line">                T[cnt].<span class="built_in">push_back</span>(x);</span><br><span class="line">                T[x].<span class="built_in">push_back</span>(cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], dfn[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    cnt = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i])</span><br><span class="line">            <span class="built_in">tarjan</span>(i), --top;</span><br><span class="line">    <span class="comment">//注意到退出Tarjan时栈中还有一个元素即根,将其退栈</span></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j : T[i])</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>圆方树有优美的性质：</p><ol><li>无论如何换根，圆方树形态不变，因为你是把环连成菊花而不是别的什么</li><li>圆方树的子树 = 原仙人掌的子仙人掌，分类讨论各种情况可以证明</li><li>方点不会和方点相连</li></ol><p>还有其他神奇的性质，要具体题目具体分析</p><h2 id="一些应用"><a href="#一些应用" class="headerlink" title="一些应用"></a>一些应用</h2><p>下面开始口胡</p><h3 id="仙人掌最短路"><a href="#仙人掌最短路" class="headerlink" title="仙人掌最短路"></a>仙人掌最短路</h3><p>类比<a href="https://blog.csdn.net/qq_36316033/article/details/79889173">树上最短路</a>，我们在LCA处考虑，然而圆方树的树上距离并不一定就等于仙人掌上的最短路长度</p><p>注意到圆方树中的边权都还没有确定，可以利用，如果一条边是圆圆边（圆点指向圆点的边，这里已经任意选择一圆点为根），那么它是一个树边，边权等于原仙人掌上边权；如果是方圆边，那么边权等于环的根到那个圆点的最短路径长度；如果是圆方边，那么边权为 $0$ </p><p>这样，如果一对询问点在圆方树上的LCA是圆点，那么其圆方树上长度就是原仙人掌上长度，因为路径上唯一的不同就在于对于每个环是走哪一侧（这个决策对每个环是独立的），而前面边权的确定已经解决了这一问题；</p><p>如果LCA是方点，则我们只需要考虑在LCA这个环中是否要走经过根的那一侧，需要找出这两个询问点 $(x, y)$ 分别是在这个方点的哪两个儿子 $(px, py)$ 的子树中，求同一个环上的点 的最短路径（其实也就是走哪一侧的问题 ）可以先记录环上边权的前缀和，这样就能 $O(1)$ 计算出不经过根那条路径的长度，再通过记录整个环的边权和比较出走哪一侧更优</p><h3 id="仙人掌dp"><a href="#仙人掌dp" class="headerlink" title="仙人掌dp"></a>仙人掌dp</h3><p>仙人掌有若干种DP，比如最大独立集和直径</p><p>最大独立集比较简单，只需要DFS时，树边按照树上独立集的方式转移，环上用一个 <code>f[i][0/1][0/1]</code> 的简单DP去转移即可</p><p>求直径的话，我们类比求树直径的方式，在LCA处考虑，设 <code>f[i][1/2]</code> 为 $i$ 子树中的第 $j$ 深的点，那么圆点可以轻松转移、更新答案；在方点转移也容易，但更新答案不能直接更新（因为有哪一侧的问题，直接取不一定是最短路，会导致答案偏大），我们可以把环复制一份用单调队列来解决，也可以正反各做一次前缀和</p><h3 id="等等"><a href="#等等" class="headerlink" title="等等"></a>等等</h3><p>算了，反正我也不会，看<a href="https://immortalco.blog.uoj.ac/blog/1955">这个</a>吧</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>还是给道题：</p><p><a href="https://www.luogu.com.cn/problem/P4606">战略游戏</a></p><p>这是一道图上圆方树</p><p>先建出圆方树，则要求删掉多少个圆点后 $S$ 在圆方树上对应的圆点不全连通，这就是连通子图中的圆点个数减去 $|S|$ ，或者说，圆方树上 $S$ 中节点两两间路径（树上只有唯一路径）的点集并减去 $S$ </p><p>如何计算连通子图中的圆点个数？有一个方法：</p><p>把圆点的权值放到它和它的父亲方点的边上，问题转化为求边权和，即把 $S$ 中的点按照DFS序排序，计算排序后相邻两点的距离和（还包括首尾两点之间的距离），答案就是距离和的一半，因为每条边只被经过两次</p><p>最后，如果子图中的深度最浅的节点是圆点，答案还要加上 $1$ ，因为我们没有统计到它</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, D = <span class="number">25</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[N], T[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, cnt, q;</span><br><span class="line"><span class="keyword">int</span> stk[N], top;</span><br><span class="line"><span class="keyword">int</span> dfn[N &lt;&lt; <span class="number">1</span>], low[N], dfc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dep[N &lt;&lt; <span class="number">1</span>], f[N &lt;&lt; <span class="number">1</span>][D + <span class="number">5</span>], dis[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    low[x] = dfn[x] = ++dfc;</span><br><span class="line">    stk[++top] = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : G[x])</span><br><span class="line">        <span class="keyword">if</span> (!dfn[y])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y);</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], low[y]);</span><br><span class="line">            <span class="keyword">if</span> (low[y] == dfn[x])</span><br><span class="line">            &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z != y; --top)</span><br><span class="line">                &#123;</span><br><span class="line">                    z = stk[top];</span><br><span class="line">                    T[cnt].<span class="built_in">push_back</span>(z);</span><br><span class="line">                    T[z].<span class="built_in">push_back</span>(cnt);</span><br><span class="line">                &#125;</span><br><span class="line">                T[cnt].<span class="built_in">push_back</span>(x);</span><br><span class="line">                T[x].<span class="built_in">push_back</span>(cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], dfn[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dfn[x] &lt; dfn[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[x] = ++dfc;</span><br><span class="line">    dep[x] = dep[f[x][<span class="number">0</span>] = fa] + <span class="number">1</span>;</span><br><span class="line">    dis[x] = dis[fa] + (x &lt;= n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= D; ++i)</span><br><span class="line">        f[x][i] = f[f[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : T[x])</span><br><span class="line">        <span class="keyword">if</span> (y != fa)</span><br><span class="line">            <span class="built_in">dfs</span>(y, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y])</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = D; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (dep[f[y][i]] &gt;= dep[x])</span><br><span class="line">            y = f[y][i];</span><br><span class="line">    <span class="keyword">if</span> (y == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = D; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (f[x][i] != f[y][i])</span><br><span class="line">            x = f[x][i], y = f[y][i];</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TT;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;TT);</span><br><span class="line">    <span class="keyword">while</span> (TT--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            G[i].<span class="built_in">clear</span>();</span><br><span class="line">            dfn[i] = low[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (n &lt;&lt; <span class="number">1</span>); ++i)</span><br><span class="line">            T[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">            G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">            G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = n;</span><br><span class="line">        dfc = <span class="number">0</span>, <span class="built_in">tarjan</span>(<span class="number">1</span>), --top;</span><br><span class="line">        dfc = <span class="number">0</span>, <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">        <span class="keyword">while</span> (q--)</span><br><span class="line">        &#123;</span><br><span class="line">            STC <span class="keyword">int</span> s, a[N];</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s);</span><br><span class="line">            <span class="keyword">int</span> ans = s * <span class="number">-2</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s; ++i)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">            <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + s, cmp);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> u = a[i], v = a[i % s + <span class="number">1</span>];</span><br><span class="line">                ans += dis[u] + dis[v] - <span class="number">2</span> * dis[<span class="built_in">lca</span>(u, v)];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">lca</span>(a[<span class="number">1</span>], a[s]) &lt;= n)</span><br><span class="line">                ans += <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 又一个奇怪的树&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="树" scheme="https://dyd-true.github.io/tags/%E6%A0%91/"/>
    
    <category term="图论" scheme="https://dyd-true.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>带花树</title>
    <link href="https://dyd-true.github.io/2022/01/23/%E5%B8%A6%E8%8A%B1%E6%A0%91/"/>
    <id>https://dyd-true.github.io/2022/01/23/%E5%B8%A6%E8%8A%B1%E6%A0%91/</id>
    <published>2022-01-23T02:40:22.000Z</published>
    <updated>2022-01-23T06:40:56.019Z</updated>
    
    <content type="html"><![CDATA[<p> 莫名想到三十六计：树上开花</p><span id="more"></span><h1 id="带花树"><a href="#带花树" class="headerlink" title="带花树"></a>带花树</h1><p>Blossom Algorithm</p><h2 id="二分图最大匹配"><a href="#二分图最大匹配" class="headerlink" title="二分图最大匹配"></a>二分图最大匹配</h2><p>一般用匈牙利算法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x], y; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">        <span class="keyword">if</span> (!vis[y = e[i].ver])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[y] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!match[y] || <span class="built_in">dfs</span>(match[y]))</span><br><span class="line">            &#123;</span><br><span class="line">                match[y] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="comment">//main里</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n + m; ++j)</span><br><span class="line">        vis[j] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dfs</span>(i))</span><br><span class="line">        ++ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度是 $O(NM)$ 的</p><p>当然也可以网络流，并且网络流一般比匈牙利快，因为它的期望复杂度为 $O(M\sqrt{N})$ （Galil Zvi在论文Efficient Algorithms for Finding Maximal Matching in Graphs中证明）</p><h2 id="一般图都最大匹配"><a href="#一般图都最大匹配" class="headerlink" title="一般图都最大匹配"></a>一般图都最大匹配</h2><p>考虑一下二分图和一般图的最大区别，就是二分图没有<strong>奇环</strong>，而一般图是可以有的，所以匈牙利算法中的寻找增广路然后路径取反的方法在一般图上就不适用了</p><p>主要还是要解决奇环的问题</p><p>我们发现一个奇环里<strong>至少有一个点不能匹配</strong>，即这个点在环内两边的连边都不是匹配边，也<strong>只有这个点可以向环外连边</strong>，那就干脆把一个奇环缩成一个点（<strong>开花</strong>），路径取反的时候再暴力展开一个个取反，对原图用bfs找一条增广路，这棵节点可能是花的bfs树就称作带花树</p><p>正确性：</p><p>设原图为 $G$ ，缩花后图为 $G’$ ，我们只要证明“ $G$ 存在增广路的充要条件是 $G’$ 存在增广路”</p><p><img src="https://s2.loli.net/2022/01/23/srMLvVyG5lmN8xg.png" alt="看花"></p><p>首先要明确带花树的形态，如图，加粗的是匹配边。黑色是一个花上的边，红色是其它边，可以发现，整个花上只有 $h$ 一个非匹配点（这里的“匹配”是指和花内的点），也就只有它可以向外匹配，所以从环外的边出去有两种情况，顺时针或逆时针</p><p><img src="https://s2.loli.net/2022/01/23/oLKIV4Mzj7pceCk.png" alt="出花"></p><p>可以发现 $G$ 和 $G’$ 的增广路都可以对应</p><h2 id="增广"><a href="#增广" class="headerlink" title="增广"></a>增广</h2><p>带花树的本质还是寻找增广路</p><p>对于每个匹配 $(u \to v)$ 给 $u$ 染绿色， $v$ 染白色</p><p>遍历绿点的出边，如果访问到的点未被染色且未被匹配，那么就找到了一条增广路；如果被匹配了，则将该点染白色，将该点的匹配点染绿色并加入队列中</p><p>如果访问到的点是白点，那么找到了一个偶环，没有影响无需处理；如果访问到的点是绿点，那么找到了一个奇环，在bfs树上找到这两个点的lca即可定位这个奇环，可以用并查集将其缩起来，因为缩起来的环是一个绿点，所以环上的白点都需改成绿点并加入到队列中，这个缩奇环的操作就是开花</p><h2 id="开花"><a href="#开花" class="headerlink" title="开花"></a>开花</h2><p>还是对于每个匹配 $(u \to v)$ 给 $u$ 染绿色， $v$ 染白色，花外点表示为红色（它们也可能染了绿/白色），不妨就叫它们 $u$ 型点和 $v$ 型点（这仅是一种不严格的颜色命名，想表达的意思仅仅是“我们的增广从一个 $u$ 型点开始”），那么不难发现，花的根（ $C$ ）一定是 $u$ 型点（这样才有奇环的矛盾）</p><p><img src="https://s2.loli.net/2022/01/23/sOmTVgnl5w72Mtq.png" alt="hh"></p><p>那么遇到奇环时，一定是存在两个同类型点产生冲突（如 $I, J$ ），带花树算法的处理方法是：将花缩成一点，该点作为u型点向花外遍历，在修改増广路的时候再将花展开（这只是一种理解方式，实现时并不真正进行缩展，而是用并查集模拟缩花的过程，用反向 <code>pre</code> 保证花内部増广路的正确）</p><p>首先，我们考虑用一个并查集维护花根之间的关系（因为可能出现花套花的情况），即将花内所有分花根合并到新出现的总花根上（即一直维护一个“极大”的花）</p><p>然后处理花内部的増广路关系，这是带花树算法的精髓：</p><ol><li><p>在产生冲突前，奇数环上所有 $u$ 型点都已进行了从环内向环外的遍历</p></li><li><p>产生冲突后，我们分别以冲突的两点为新的出发点（当然是 $u$ 型） ，向对方方向继续染色増广</p><p>可以发现，对方方向上原本的 $v$ 型点，可以作为出点向花外遍历，而这条増广路是从<strong>花内距花根较远</strong>的一条路延伸来的</p></li><li><p>考虑如何记录这条较远的非常规路径。我们知道，在匈牙利算法中，对于每一对匹配中的被匹配点（ $v$ 型点），我们都会有一个 <code>match</code> 指向其前驱匹配节点（ $u$ 型点）（即图中的红色边），也就是说仅有 $v$ 型点具有 <code>pre</code> ；</p><p>然而在花中，所有点可以作为 $u$ 型点向外遍历，也就没有了严格的 $u, v$ 区分，因此无论 $u, v$ 染色情况如何，我们为花中所有匹配对之间建立相互的 <code>pre</code> ，具体实现见下（注意由于原本已有部分 <code>pre</code> ，即红色边，我们要根据特殊性质去建立剩余的 <code>pre</code> ，即蓝色边）</p><p>特别注意，如果到了u为根节点，就不要再反向建立 <code>pre</code> 了，因为它所在匹配对并不完全属于花！</p></li></ol><p>这样，无论以哪个点作为 $u$ 向环外遍历，我们在花内部都能得到正确的増广路</p><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><p>可以发现，通过缩环减少一个点的复杂度为均摊 $O(\log n)$ ，因为使用了并查集。找到一条增广路最坏情况下需要遍历整张图，复杂度为 $O(n + m)$ ，总共就是 $O(n(n \log n + m))$ ，大概就是 $O(nm)$ </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.luogu.com.cn/problem/P6113">一般图最大匹配</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ne, ver;</span><br><span class="line">&#125; e[N * N];</span><br><span class="line"><span class="keyword">int</span> h[N], idx = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> match[N], col[N], pre[N];</span><br><span class="line"><span class="keyword">int</span> fa[N];</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    match[x] = y, match[y] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = &#123;h[x], y&#125;, h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dadd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!match[x] &amp;&amp; !match[y])</span><br><span class="line">        <span class="built_in">link</span>(x, y), ++ans;</span><br><span class="line">    <span class="built_in">add</span>(x, y), <span class="built_in">add</span>(y, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x)</span><br><span class="line">        <span class="comment">//奇妙的是,这里可以写成x[pre][match]</span></span><br><span class="line">        <span class="built_in">rev</span>(match[pre[x]]), <span class="built_in">link</span>(x, pre[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STC <span class="keyword">int</span> dfn[N], cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    dfn是一个标记数组,一边打标即一边上跳，第一个重复点就是花根</span></span><br><span class="line"><span class="comment">花根一定是一个绿点,所以可以隔点上跳</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> (++cnt; ;x = pre[match[x]], <span class="built_in">swap</span>(x, y))</span><br><span class="line">        <span class="keyword">if</span> (dfn[x = <span class="built_in">find</span>(x)] == cnt)</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x)</span><br><span class="line">            dfn[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blossom</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w)</span> <span class="comment">//缩奇环(开花)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">find</span>(x) != w; x = pre[y])</span><br><span class="line">    &#123;</span><br><span class="line">        pre[x] = y, y = match[x];</span><br><span class="line">        <span class="keyword">if</span> (col[y] == <span class="number">2</span>)</span><br><span class="line">            col[y] = <span class="number">1</span>, q.<span class="built_in">push</span>(y);</span><br><span class="line">        <span class="comment">//这里一定要判一下</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(x) == x)</span><br><span class="line">            fa[x] = w;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(y) == y)</span><br><span class="line">            fa[y] = w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">aug</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//带花树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((ans + <span class="number">1</span>) * <span class="number">2</span> &gt; n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        fa[i] = i, col[i] = pre[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span> (q.<span class="built_in">push</span>(x), col[x] = <span class="number">1</span>; !q.<span class="built_in">empty</span>(); q.<span class="built_in">pop</span>())</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = q.<span class="built_in">front</span>(), i = h[u], v, w; i != <span class="number">-1</span>; i = e[i].ne)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(u) == <span class="built_in">find</span>(v = e[i].ver) || col[v] == <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!col[v])</span><br><span class="line">            &#123;</span><br><span class="line">                col[v] = <span class="number">2</span>, pre[v] = u;</span><br><span class="line">                <span class="keyword">if</span> (!match[v])</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">rev</span>(v), <span class="number">1</span>;</span><br><span class="line">                col[match[v]] = <span class="number">1</span>, q.<span class="built_in">push</span>(match[v]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//缩环两个方向各一次拼起来</span></span><br><span class="line">                <span class="built_in">blossom</span>(u, v, w = <span class="built_in">lca</span>(u, v)), <span class="built_in">blossom</span>(v, u, w);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        h[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x, y; m--; <span class="built_in">dadd</span>(x, y))</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans += (!match[i] &amp;&amp; <span class="built_in">aug</span>(i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, match[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="随机匹配法"><a href="#随机匹配法" class="headerlink" title="随机匹配法"></a>随机匹配法</h2><p>还有一组和智慧法类似的东西，由luogu上<a href="https://www.luogu.com.cn/user/28313"><strong>皎月半洒花</strong></a>巨佬提出</p><p>思路就是随机匹配</p><p>发现匹配本质上就是在找增广路，但直接枚举每个点找增广路会有问题，对于一张二分图，一条增广路要么是一条奇链、要么是一条奇链套一个偶环，偶环上总可以完备匹配，所以绕偶数步走到原点并不改变下一条边的匹配状态；但是奇环则未必，如果经过一个奇环，就必然会存在冲突的情况</p><p>所以随机匹配的思想就是，不找环，只找长度为奇数的简单路，这样做相当于强制断环为链，正确性难以保证</p><p>但是考虑如果多做几次，错误率就会大大下降，于是考虑多做几次这样的匹配</p><p>注意到这样做很容易被卡掉，只需要多几个奇环顺便构造一下加边顺序就可以了，所以就可以每次走的时候将边随机一下即可</p><p>最后附上花巨的一句话（<del>听不懂但是好装B啊</del>）：“题是众生一般题，水是天下一样水”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRG default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DB double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"><span class="keyword">int</span> match[N], vis[N];</span><br><span class="line"><span class="comment">//clock_t 就是 long</span></span><br><span class="line"><span class="keyword">clock_t</span> st;</span><br><span class="line">DRG drg&#123;<span class="number">20051221</span>&#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; e[N];</span><br><span class="line"><span class="function">DB <span class="title">when</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (DB)(<span class="built_in">clock</span>() - st) / CLOCKS_PER_SEC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dadd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(x, y), <span class="built_in">add</span>(y, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    match[x] = y, match[y] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">shuffle</span>(e[x].<span class="built_in">begin</span>(), e[x].<span class="built_in">end</span>(), drg);</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : e[x])</span><br><span class="line">        <span class="keyword">if</span> (!match[y])</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">link</span>(x, y), vis[y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : e[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> z = match[y];</span><br><span class="line">        <span class="keyword">if</span> (vis[z])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">link</span>(x, y), match[z] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">work</span>(z))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">link</span>(y, z), match[x] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x, y; m--; <span class="built_in">dadd</span>(x, y))</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">    st = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">when</span>() &lt; <span class="number">0.9</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!match[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">fill</span>(vis + <span class="number">1</span>, vis + <span class="number">1</span> + n, <span class="number">0</span>);</span><br><span class="line">                ans += <span class="built_in">work</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, match[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是一般的出题人，也就认了，但是这个总有毒瘤搞不清立场，<a href="https://www.luogu.com.cn/discuss/316114">帮出题人造hack</a>，对此广大网友评价为：“卡 随 机 的 艺 术”</p><p>但有什么办法呢，人家是大佬（<del>反正我带花树过了</del>）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 莫名想到三十六计：树上开花&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="图论" scheme="https://dyd-true.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>平面最近点对</title>
    <link href="https://dyd-true.github.io/2022/01/23/%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/"/>
    <id>https://dyd-true.github.io/2022/01/23/%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/</id>
    <published>2022-01-23T01:39:46.000Z</published>
    <updated>2022-01-23T02:21:08.233Z</updated>
    
    <content type="html"><![CDATA[<p> 我们充分发扬人类智慧</p><span id="more"></span><h1 id="平面最近点对"><a href="#平面最近点对" class="headerlink" title="平面最近点对"></a>平面最近点对</h1><p>这本来是一道分治</p><p>但是<strong>智慧法</strong>不香吗？</p><h2 id="圣经吟唱"><a href="#圣经吟唱" class="headerlink" title="圣经吟唱"></a>圣经吟唱</h2><p>在平面最近点对（加强版）里最高赞题解写道：</p><p>“我们充分发扬人类智慧：<br>将所有点全部绕原点旋转同一个角度，然后按 $x$ 坐标排序<br>根据数学直觉，在随机旋转后，答案中的两个点在数组中肯定不会离得太远<br>所以我们只取每个点向后的 $5$ 个点来计算答案<br>这样速度快得飞起，在 $n = 10^6$ 时都可以在 $1$ s 内卡过”</p><p>这开启了智慧法过本问题（<del>恶心出题人</del>）的新时代！</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>装模做样问一问：</p><p>给定 $n$ 个二维欧几里得平面上的点 $p_1, p_2, …, p_n$ 请输出距离最近的两个点的距离</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由于这是出题人丧心病狂的<strong>加强加强版</strong>，一般的智慧法被卡，所以，考虑优化智慧法（智慧智慧法）：</p><ul><li>首先，必须旋转坐标系，防止出题人卡我们（但加强加强版的出题人已经疯狂到出 $152$ 组数据了，所以光这样还不行）</li><li>在时间允许的情况下，能往后多查找几个点就多查找几个点（本题实测 $100$ 卡死）</li><li>不以 $x$ 排序，而以 $x \times y$ 排序，因为 $x, y$ 应该是等价的（很玄学）</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.luogu.com.cn/problem/P7883">平面最近点对（加强加强版）</a></p><p>（ $152$ 个点跑了好久，出题人太丧心病狂了）</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LDB long double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRG default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID uniform_int_distribution</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>, K = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> LDB INF = <span class="number">2e30</span> + <span class="number">0.01</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LDB p[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point &amp;t) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> p[<span class="number">0</span>] * p[<span class="number">1</span>] &lt; t.p[<span class="number">0</span>] * t.p[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>, &amp;n);</span><br><span class="line">    DRG e&#123;<span class="number">20051221</span>&#125;;</span><br><span class="line">    UID&lt;<span class="keyword">int</span>&gt; u;</span><br><span class="line">    LDB th = <span class="built_in">u</span>(e), ans = INF;</span><br><span class="line">    LDB z = <span class="built_in">sin</span>(th), w = <span class="built_in">cos</span>(th);</span><br><span class="line">    STC Point p[N];</span><br><span class="line">    LDB a, b, c, d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%Lf %Lf&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        p[i] = &#123;a * w + b * z, -a * z + b * w, a, b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//stable是稳定排序</span></span><br><span class="line">    <span class="built_in">stable_sort</span>(p + <span class="number">1</span>, p + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a = p[i].p[<span class="number">2</span>], b = p[i].p[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= K &amp;&amp; i + j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            c = p[i + j].p[<span class="number">2</span>], d = p[i + j].p[<span class="number">3</span>];</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, (a - c) * (a - c) + (b - d) * (b - d));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.0Lf&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 我们充分发扬人类智慧&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="随机数" scheme="https://dyd-true.github.io/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Kahan求和</title>
    <link href="https://dyd-true.github.io/2022/01/23/Kahan%E6%B1%82%E5%92%8C/"/>
    <id>https://dyd-true.github.io/2022/01/23/Kahan%E6%B1%82%E5%92%8C/</id>
    <published>2022-01-23T01:16:46.000Z</published>
    <updated>2022-01-23T01:36:54.376Z</updated>
    
    <content type="html"><![CDATA[<p> 又一个小知识</p><span id="more"></span><h1 id="Kahan求和"><a href="#Kahan求和" class="headerlink" title="Kahan求和"></a>Kahan求和</h1><p><strong>Kahan 求和</strong>算法，又名补偿求和或进位求和算法，是一个用来<strong>降低有限精度浮点数序列累加值误差</strong>的算法</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>计算机的浮点数误差有时候会导致很多问题，如下面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    x = -x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>这样写是错误的，首先，比较浮点数最好写成函数，即 <code>cmp(x, 0) &lt; 0</code> ，其次，那个 <code>else</code> 也并非代表了 <code>x &gt;= 0</code> ，因为 $x$ 可能为 $NaN$ （not a number）</p><p>在比如，浮点数满足交换律，即 $a + b = b + a$ ，但不满足结合律即 $a + (b + c) \ne (a + b) + c$ </p><p>由于浮点数的种种误差，在只加几个数的时候还可以接受，但如果要把很多浮点数连加，在一些题目里面误差就无法接受了</p><p>William Kahan提出一种解决方法：用一个额外的浮点数记录误差，最后修正</p><p>具体地，如果现在正在加 $a$ ，而已有的和为 $sum_{old}$ ，则先计算 $sum_{now} = sum_{old} + a$ ，而误差用 $c$ 记录，跟新为 $c = c + (a - (sum_{now} - sum_{old}))$ </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">kahan</span><span class="params">(<span class="keyword">double</span> x[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> y = x[i] - c; <span class="comment">//先补上前面误差</span></span><br><span class="line">        <span class="keyword">double</span> t = sum + y;</span><br><span class="line">        c = (t - sum) - y; <span class="comment">//跟新误差</span></span><br><span class="line">        sum = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 又一个小知识&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="其它" scheme="https://dyd-true.github.io/tags/%E5%85%B6%E5%AE%83/"/>
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>扫描线</title>
    <link href="https://dyd-true.github.io/2022/01/22/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    <id>https://dyd-true.github.io/2022/01/22/%E6%89%AB%E6%8F%8F%E7%BA%BF/</id>
    <published>2022-01-22T11:41:12.000Z</published>
    <updated>2022-01-22T13:49:11.717Z</updated>
    
    <content type="html"><![CDATA[<p> 不只是线段树的那个……</p><span id="more"></span><h1 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h1><h2 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h2><p>虽然线段树那里已经学过一点扫描线了，但还是问一问：</p><p>给定一些矩形，求其面积并</p><p>这个太简单了，直接跳过了</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>看这个：</p><p>给定一些三角形，求其面积并</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>三角形比矩形讨厌的地方在于，矩形平行于坐标轴，只用考虑四个顶点，但三角形可以斜着</p><p>考虑把三角形用顶点和交点划分，如图：</p><p><img src="https://s2.loli.net/2022/01/22/xwI9XeSEKsFPWnp.jpg" alt="三角"></p><p>每两个红色的线之间不存在边的交点，换句话说，都是梯形（广义上的），直接两边线段长度求并，乘高除以二即可</p><p>由于三角形有 $n$ 个，两两间都可能有交点，故时间复杂度为 $O(N^3)$ </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.luogu.com.cn/problem/P4406">三角形面积并</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DB double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> DB eps = <span class="number">1e-8</span>, INF = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DB x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point &amp;t) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x == t.x ? y &lt; t.y : x &lt; t.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tr[N][<span class="number">3</span>], q[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(DB x, DB y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Point <span class="keyword">operator</span> + (Point x, Point y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;x.x + y.x, x.y + y.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">Point <span class="keyword">operator</span> - (Point x, Point y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;x.x - y.x, x.y - y.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">Point <span class="keyword">operator</span> * (Point x, DB y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;x.x * y, x.y * y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">DB <span class="keyword">operator</span> * (Point x, Point y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x.x * y.y - x.y * y.x;</span><br><span class="line">&#125;</span><br><span class="line">DB <span class="keyword">operator</span> &amp; (Point x, Point y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x.x * y.x + x.y * y.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_on</span><span class="params">(Point p, Point x, Point y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cmp</span>((p - x) &amp; (p - y), <span class="number">0</span>) &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">jiao</span><span class="params">(Point p, Point u, Point q, Point v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">cmp</span>(u * v, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> &#123;INF, INF&#125;;</span><br><span class="line">    DB t = (v * (p - q)) / (u * v);</span><br><span class="line">    <span class="keyword">auto</span> o = p + u * t;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">is_on</span>(o, p, p + u) || !<span class="built_in">is_on</span>(o, q, q + v))</span><br><span class="line">        o = &#123;INF, INF&#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">l_area</span><span class="params">(DB x, <span class="keyword">int</span> side)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = tr[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cmp</span>(t[<span class="number">0</span>].x, x) &gt; <span class="number">0</span> || <span class="built_in">cmp</span>(t[<span class="number">2</span>].x, x) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cmp</span>(t[<span class="number">0</span>].x, x) &amp;&amp; !<span class="built_in">cmp</span>(t[<span class="number">1</span>].x, x))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (side)</span><br><span class="line">                q[cnt++] = &#123;t[<span class="number">0</span>].y, t[<span class="number">1</span>].y&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">cmp</span>(t[<span class="number">2</span>].x, x) &amp;&amp; !<span class="built_in">cmp</span>(t[<span class="number">1</span>].x, x))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!side)</span><br><span class="line">                q[cnt++] = &#123;t[<span class="number">2</span>].y, t[<span class="number">1</span>].y&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            DB d[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> o = <span class="built_in">jiao</span>(t[j], t[(j + <span class="number">1</span>) % <span class="number">3</span>] - t[j], &#123;x, -INF&#125;, &#123;<span class="number">0</span>, INF * <span class="number">2</span>&#125;);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">cmp</span>(o.x, INF))</span><br><span class="line">                    d[u++] = o.y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (u)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">sort</span>(d, d + u);</span><br><span class="line">                q[cnt++] = &#123;d[<span class="number">0</span>], d[u - <span class="number">1</span>]&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!cnt)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; ++i)</span><br><span class="line">        <span class="keyword">if</span> (q[i].x &gt; q[i].y)</span><br><span class="line">            <span class="built_in">swap</span>(q[i].x, q[i].y);</span><br><span class="line">    <span class="built_in">sort</span>(q, q + cnt);</span><br><span class="line">    DB res = <span class="number">0</span>, st = q[<span class="number">0</span>].x, ed = q[<span class="number">0</span>].y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt; ++i)</span><br><span class="line">        <span class="keyword">if</span> (q[i].x &lt;= ed)</span><br><span class="line">            ed = <span class="built_in">max</span>(ed, q[i].y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            res += ed - st;</span><br><span class="line">            st = q[i].x, ed = q[i].y;</span><br><span class="line">        &#125;</span><br><span class="line">    res += ed - st;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">rang_area</span><span class="params">(DB x, DB y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">l_area</span>(x, <span class="number">1</span>) + <span class="built_in">l_area</span>(y, <span class="number">0</span>)) * (y - x) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    vector&lt;DB&gt; xs;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>, &amp;tr[i][j].x, &amp;tr[i][j].y);</span><br><span class="line">            xs.<span class="built_in">push_back</span>(tr[i][j].x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(tr[i], tr[i] + <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">3</span>; ++p)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">0</span>; q &lt; <span class="number">3</span>; ++q)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">auto</span> o = <span class="built_in">jiao</span>(tr[i][p], tr[i][(p + <span class="number">1</span>) % <span class="number">3</span>] - tr[i][p], tr[j][q], tr[j][(q + <span class="number">1</span>) % <span class="number">3</span>] - tr[j][q]);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">cmp</span>(o.x, INF))</span><br><span class="line">                        xs.<span class="built_in">push_back</span>(o.x);</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="built_in">sort</span>(xs.<span class="built_in">begin</span>(), xs.<span class="built_in">end</span>());</span><br><span class="line">    DB res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; xs.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cmp</span>(xs[i], xs[i + <span class="number">1</span>]))</span><br><span class="line">            res += <span class="built_in">rang_area</span>(xs[i], xs[i + <span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="炼狱"><a href="#炼狱" class="headerlink" title="炼狱"></a>炼狱</h2><p>解决了三角形，就相当于解决了所有多边形（剖分成三角性即可），可正当你得意都时候，圆来了</p><p>圆咋办？如果扫描线的话那个弧形可不好求，没有办法，为了对付大boss，只好祭出大杀器——自适应辛普森积分</p><h3 id="辛普森积分"><a href="#辛普森积分" class="headerlink" title="辛普森积分"></a>辛普森积分</h3><p>先看看辛普森积分是神马</p><p>顾名思义，这是一种积分方法，来看下面这个函数：</p><p><img src="https://s2.loli.net/2022/01/22/GZQ4xHAerdEaRbj.png" alt="函数"></p><p>求面积当然是用积分了，但它的解析式又很麻烦，咋办？</p><p>辛普森提出一个玄妙的方法：把他近似成一个二次函数</p><p><img src="https://s2.loli.net/2022/01/22/Nr7JY5jzHyURPdm.png" alt="js"></p><p>如图，直接把绿色曲线当成黑色的二次函数积分，设绿色曲线为 $y = f(x)$ ，取 $(l, f(l)), (r, f(r)), (mid, f(mid))$ 三个点确定这个黑色的二次函数</p><p>二次函数的积分就很好求了，就是：<br>$$<br>\frac{f(l) + f(mid) * 4 + f(r)}{6} * (r - l)<br>$$</p><h3 id="自适应"><a href="#自适应" class="headerlink" title="自适应"></a>自适应</h3><p>解决了辛普森，来看看自适应</p><p>显然直接辛普森积分是无法满足精度要求的，我们要让他“适应”我们设定的精度，具体地，对于区间 $[l, r]$ ，设其辛普森积分后面积为 $S$ ，而区间 $[l, mid], [mid, r]$ 辛普森积分的面积为 $L, R$ ，若 $|L + R - S| &lt; eps$ ，我们就认为这个积分到达了要求的精度；否则，递归积分左右两边，加起来即可</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.acwing.com/problem/content/3077/">自适应辛普森积分</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DB double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> DB eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="function">DB <span class="title">f</span><span class="params">(DB x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sin</span>(x) / x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">simpson</span><span class="params">(DB l, DB r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (r - l) * (<span class="built_in">f</span>(l) + <span class="built_in">f</span>((l + r) / <span class="number">2</span>) * <span class="number">4</span> + <span class="built_in">f</span>(r)) / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">asr</span><span class="params">(DB l, DB r, DB s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DB mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    DB L = <span class="built_in">simpson</span>(l, mid), R = <span class="built_in">simpson</span>(mid, r);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(L + R - s) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> L + R;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">asr</span>(l, mid, L) + <span class="built_in">asr</span>(mid, r, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DB l, r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, <span class="built_in">asr</span>(l, r, <span class="built_in">simpson</span>(l, r)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="圆的面积并"><a href="#圆的面积并" class="headerlink" title="圆的面积并"></a>圆的面积并</h3><p>辛普森积分的应用一般是更改 <code>f</code> 函数：</p><p><a href="https://www.acwing.com/problem/content/3072/">圆的面积并</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DB double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> DB eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DB x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point &amp;t) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x == t.x ? y &lt; t.y : x &lt; t.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; q[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Point p;</span><br><span class="line">    DB r;</span><br><span class="line">&#125; c[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(DB x, DB y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">f</span><span class="params">(DB x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        DB X = <span class="built_in">fabs</span>(x - c[i].p.x), R = c[i].r;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cmp</span>(X, R) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DB Y = <span class="built_in">sqrt</span>(R * R - X * X);</span><br><span class="line">            q[cnt++] = &#123;c[i].p.y - Y, c[i].p.y + Y&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!cnt)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(q, q + cnt);</span><br><span class="line">    DB res = <span class="number">0</span>, st = q[<span class="number">0</span>].x, ed = q[<span class="number">0</span>].y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt; i++)</span><br><span class="line">        <span class="keyword">if</span> (q[i].x &lt;= ed)</span><br><span class="line">            ed = <span class="built_in">max</span>(ed, q[i].y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            res += ed - st;</span><br><span class="line">            st = q[i].x, ed = q[i].y;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> res + ed - st;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">simpson</span><span class="params">(DB l, DB r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (r - l) * (<span class="built_in">f</span>(l) + <span class="built_in">f</span>((l + r) / <span class="number">2</span>) * <span class="number">4</span> + <span class="built_in">f</span>(r)) / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">asr</span><span class="params">(DB l, DB r, DB s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DB mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    DB L = <span class="built_in">simpson</span>(l, mid), R = <span class="built_in">simpson</span>(mid, r);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(L + R - s) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> L + R;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">asr</span>(l, mid, L) + <span class="built_in">asr</span>(mid, r, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf %lf&quot;</span>, &amp;c[i].p.x, &amp;c[i].p.y, &amp;c[i].r);</span><br><span class="line">    DB l = <span class="number">-2000</span>, r = <span class="number">2000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>, <span class="built_in">asr</span>(l, r, <span class="built_in">simpson</span>(l, r)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 不只是线段树的那个……&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算几何" scheme="https://dyd-true.github.io/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>test2022/1/22总结</title>
    <link href="https://dyd-true.github.io/2022/01/22/test2022-1-22%E6%80%BB%E7%BB%93/"/>
    <id>https://dyd-true.github.io/2022/01/22/test2022-1-22%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-22T09:11:28.000Z</published>
    <updated>2022-01-22T23:25:24.778Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a8123146ccfbac5fefb0ad1ac2144706e33823d90f3da193cabcdb9dae8a3c3b">111e7d6409c611e6b63fd1363c3273c85fb2058823cf9cd410a92fec8bd4f8bfb0350da669ae92879820b34f22fdf085ef81a40f980473bda306436cb3708ecb5f26d1fc6f17de4c569a2af1969c696da12a3ec575128036c64aea84869c001313d921f7799f1ed078ae5b78cccf9dc2e8e5597ab700e7ec64e62ae69e73afb2ab7728f02f8d7123ce0b11fcab5d03ed9c43b2fcbba20648214e0edcdcd9f27cdc104ddffd41fa508116e9afb44a6726f8e27ae61490bd1b49f522c761dad6ab2582335d270fb0df5f684120e59593a3a22e860602b43a1fb0adcddeb8181f431cccf1810e1b9cdfa7a3654ee2b95c25bc4410ec69bf706531f9e52801b9b42de8bcbbe8f15628d35022a2fdd360392ac284de73d8faa90215a62ec8be0eb803789816588ad7f72032950858ff7dd3f83ceb656da41976e298b6ee79496ff3af2f232a93fb462dbb26f0f289fef214f5db784330dede6605ea8f8d29b4eec3f2b89e5441165ff913fa462c6b84df2386aed0ea04da7745c0df74d52c55a9554443872c73d619b9416545b5e89a6d55b23a250ffef52409c94138e64655bf779158582744ffdfa7ec68e478fa907ad0567f6c776515eb5e0fd2bdc4b71e46892cc2718844a7f8bf1c351cecf9639c2e967e1dda78a422bf404eee74b0a85cc5e9c111cf306f4b8f49a680a85250f62f2c63657c189c9a263370579b2f515ed620e949a972014aedbc509a9305f6b1aab930fec98fb0158d9e1b672f216a95c31b648e96ef1809b337ace4c7e816bda6469a0d971b2a5b238bc298c632111f5c1bca6a43e6a0c55fe7efbe25c5053cb9d78ecf5e6a95c99fc75658d238aa49f94e7e2d25296136b60838ef4ed13cd39417df540976330a86407ae1685a89c05c460ff72e02c2bd3021de08ab18e1920881ffaf40ea96039f40cddddf0069fa5d6e61aa41d10ab556542a632bc999079ee6513e20fe3085bec3ca5ed11513fe72384666052f3e600eb340d307d23f40344fa42651b9c0df206ad2fc0cf01fd58c7bd70c7f8957e9eec9000eedab5ba115db417d2d157b06b7cb5ebd21ddefb785db363e9c6d1cc8139968846ebdcfa0372b3b4dbd55c3edff7192e6d6b9fe6e74f5530ff5858dd0aab16dc303f1315c2ae16d5ed9266899ffc4c9bc4f08a7395e4c50fb91f6e39169506aa7dea490e358602487b4da1953cf31c2eb1abf3b6a1b00963f55d2a3a5d3516309f27c7f1768cdaf2e43d8a93535344d959152f09de50fa6deb1cf462187a6d228f01a0921231e25b9785ba2b702cc0a1f0737c3178533fdbc0f07e00a73aad49d40522a3468206c004227a5da72abf934c1c78b00ae9eddac36813a8ab271b8f9b4805069d0b1ee5030debbb8afeb1a919acf41427d48a0d8c0cd38de4cae1ed053ad0bb009bde5ffdd6d54ca7337ffe71c059616db3190520ab5f07f6b415f6bad07e1630cf58eb0ba79f76c8a0338482d6eacc93c8fa9dc58e60d3a9c1c33b996b157d9b2274a1b8408cb1027ff0c3219d9e9f9c61f808e3e82c8020b5984661175e9f4e6cc48b459f013f6e92f8456842c3407fe43165186ac9ecdb70b9e2f8b2adfcb2cab9143d36f0089a078b561c2c57fb6f829228e5e5ea76479fa62401d941e4434ad1d0ebc9f4edf917bd518e4d95fbab616bfbdd37365c5d79b0918b902c2aabe7aadebbdde2503ab163b74f082d9bd63942c2953c695612807b4a1e4e94196a92a858197dd489f6977b788b0687b3bf35f5e56cbd01cea84fec13cc5565741b5888d18ab89e775bfde16e7db8ed5052e003443dec81d18525fffbb18724301a65af1c900b9b7d8cf88b399aef13b316214019d5c5ffcea924ab4d268f9641c91663fa7394761a378a82e85542dd3f3e05fa07b3b4501fb1a621161709c91ba15682d37f3a66e69f18f4241b09e6d67c6ec0fa4318c9544f158a0a5b511ef4fd3d8bd3ecab70a164b0e65d0043fab110b3d504b59e83d4c03dd1e573c5157c660b3a70f4130cff704afc6214c9e39af8ddccd9c4bcefaaff65452b352d8d8ada2d8e5b0d92782bc2e92b67d56c857311bd37ab783cc001ef88ccd7a52a616ee9ab6a2554230efa01dd26b6fe006c7d44afd088547c53c40621f690f7fcb044cf743233952edcdab988563976acc32763a3e1384445f7c58e8bfd89e6b24106b0f0417b90eeccb9e42f53800915cccb092ed69cf9e2fd5c1098dbce10280158500a1c334cc82b3b311acd79e2e8e35d7fd4bf66c39ba1637fd28cbee4768e19e41ecd43c93a1fa9b18004e33bb21e25e21dfcf52be3d32f069bc1f2fcda434133e6ecab7eb3348d247a4fdef529c76e9b8eef52ce23ce5be0f0bad113975341359b79b18cb42d6cbb8a3ed613aa866aa21a811b012aa9e06a56d784a00081beec45d2ac1fefb32d4e74c6fc371846e06fb062a696e7b9f82d30370feb616ee01d9cb88d60c36fa599ec62b13595aab5608a65fd6ae39dbfda458034439e15e0a61b18ac186fd0ba7648c64086f7e1308a0189b92750c78e013e3788b96fdb71774f8515434ab8db292b2c6727a9e5722eafdc1e37dce18f997d9403b6b2a0bd98cf7e9f9e7eaa4ae84e1a1e7ff8fdbde458d26a682041134e6900d9a32fd811a819f5df293e784f347c43dc39647242d2a749bee6e41522f3541b6f7ee4a9e07e051d6bd606c3a8329823273a7525d26769e85fa4ceeab9e3c263547f3f7a6ea23ae8dd0dca63389757c91eb0dddffa9d43b810adf7d3412cde5531064294751ab4298e2375c6da8a1a29224bd6d6e2953414d7688b5fa11eb439958e8d9d10ebadd8f89bec3f851cf04c364e307bde244e67df843559d75445a1137e8ce698c12a4672c082668dc07fcead6a5f057a571dfae235788f31a51c6a15be2b8aed8c2142fcf449886791b03eccc68656744a7ab99a6dbf1eb0ce73cfc06fd2dc66e896bf8cea6a30062e70f5bf977a544b1c779afc39cd717aa1374fd5d4faa9cd725e13e635305c4caa1e54a2835195533d3875e313a02b851a625cca76fa8ab549b9c5186e2ae1dfdde9104036f84b919536c5c2831d8b7c5ab126b03012bcf5696d2e5762698ee17318e6984c7af27492520080585233cc6dbb53309c549be80165d2b34dfe6642df2a285f01c2e3ea8c7e711aa842c994aeb1c547318b47c1c29fbe024bc58773128ae41f87b9a0136446d55834e14d8ab32b8a242b911e499414849392283e160c8d32c2f68353e6957781b4bae4fe770833dab899965ca077a9b5d1ca865a65b1bffcf3420adff774a73062204cee714f48864f1fc77fcbb9ae328294c432fc502ff5cbd6528e2b8a62b0efb6dc41790b49bce19188cd5636170d1679de7baba36dcc86b6831cf6abfebcc7bdb9e9fd387d54c2f10d65307dadef571f7163e6c20b45bff0393ca7a4b40b5c7f1a293cd5cea3d4f1c7430ef5eb8e2b622440ea4389153f295cf0a0d5161dca685b059f358fb8e3c09effafcabd11bab2e3fa8fa0846ae7df5f7bfc51b4f84b633a11a216d8b9f1167556a8b6f58e0b18bbe367c9db3b0c8ef35b9c1dce6013efdac6d2456bb0d5dbe8f95bd03c1534c40ac1714900757be5fea78ed6338692ab5afc7e28671baaf4cc6057a3619a07550af4eb3aa38c43999c5deb477a75d1153671f4fed590d20e55c852d03ef45d34641c07f561b390a155359db8fb8c3296f76c0d5c976a59aee4acc4a7e2f5370a13e06a9b62032e19c0d641f3d2bc359547957ac61d80ef45eb20c74934aa6ca62ab90c8eeb3cee0038cfd27b3d8b7f44ab9232e6b4d32f491000cee953ac86f051fcde556f3686b8f933d6e18dca35dfc57e8af4130895b6b5ecac78ed20c56dc08a4e17a1c4f957413c5fe6dd0a29fc37ec6772361c5032c7caab5a2492b3625f4782a05a9dd65b05f79a53384830b27bd168f255f1cbb368a12a52d8971d933dafd633ee57490097e2bbfc878922e3a74cdbfb8d4f11191ccb5f54194173edd78c32d8779d44f54317ed1d1628d6d2d85611553d2c726bcef19738c13d4aa1b8a6cd0be3a29465ea7a91093265deb3cb4f9d00d0753c46154c8a4cbd9e868663c8b89c62a3ae21e7a9553653b21a29292634cbc7db8a8677e990bed84810ed938e00421b234e8af8c698b9be88ba9c2cd0579ec158ddbb4b0859013d4fcda9e623696f069e3e7a64a48fc6eb3bc3f771d494e5da33b5e7fe6a21ad945fb1e521c7f801e73217403097e0057344df85835eeacf58c99412aa5f1b3026bae43332917fa7e31d647d8809e3adac0acf6f20daa4b506916ed5261f48f832a92b0ebf62aed5cf6130c2d59470708fe4feddd6fbcf6a46f2d6daaee1da371bb74fe5a8aafefa8b03958de0c76cbdcfae77fc779c97bc9895da5083e67e8f0d472cc0138b4a3adae0bdcc9c8ffb92c4f487eb649cfc0e84cd711e19e38f45d0fc1a421e9bb2ca170b7634e35b8758be05fc418a74695c10995227060332560efcbf96fc1cbe5cb9ed2cb8150336f6946e5e04f7b783822cd035ce9006722da59571a331850f90f04a18465016b51cb401bb7c6c5b91c930722bba790e29910a7925582708f02a242a2d856ada96b81204cc1bf5639b8b94215c32e23f4f270e60b85daba6fde7526f207e4ea8cc78e88a081fac2af637c8a320297b40d758a97d32512c1de47e7b61fac098145db0d76264ffedaf60dd1503be9a25db058810ca8e3e3b62fb6bcb44908e4f5883a75de4ecf613123538b5ef7a3f41b3ba9daad1ebf1c47d6a776e164fe95f0cbb5070c47276cf47132e222a8c0386954bd032afcfbafc5a1778d80dd27705262de3506a1e354bbf59ef18689ab99237d8505e05e53383e30eaf5546d57611283ea87a67b70652b587014782fc039d5b7b86b7cb9bf694b588837b2a6c9536a76ee531901e88602d04b3dcabf55617aa323287c5d612ee06f6004248e31054bef3ac8a5e6f02776a5bb01e6fb6f453b515a000bca540ec2ea877fdcceb67cea04fd449bf533cfda467889650537996fd6c716005ea5d8d0edd4fbce518f4d55b16b1d61c33ccb89c01ff215c4d078998f7107c5598caa58973d81c3fbac2c3a206f1e74de13cd280c8505b8124334fc451b39f37d7cbd919c8693a2b5921f3f120d0f73ed2fd27c4a82d8f87bca21ef6121f462e67ef65b862c16fd9dec968bdc4e1a0b9bc4e2b3e1e584ba22ae17e798d6673d5c1b85c162398f28efd762d8778ee11b6089b40bad6b0eafad32a58803d08fc550235a29d937705b754766150ee8fc501e792a2dfc145e8c6b16a6e20ba6ca90c6c32182428ddfa340245fdcd62d344b8d93ac113a9e8049022cd63f1e85495a46cb08778f4b8462e670c810a93aa494579197a38e30d4857075a35b7d7c1bf982cd3e1340dbc71aba940a57f62042fb4c645ba1ea79e46d1078c5537d6aded6d284e7f3d3e5d4b25a6dab81c2141e5eccfbdc67dfaf393dc7959d6f0789ccf862c34686662d4be908e98ad6cf6c3805180c0cbed2a45cb92ab08fffed4b65db90675f537d07f38d45e8f5caf9ae8f2761cdc7b32e18a6f43363d55027a78070a02562e3bb2a89a4747f28c459e558a5287bb0e7c347a2868e6517f7ccf44065e61c60d6d60c4d8453c64a2cdb696ad764e5f0a5d83a57eab1c7e13e525923de2344594adb707bdc2fafb982b1d06d7cdc7ba3b7db39210186fb93898b7acaaf8fd0a489fc3784cf47be66ee28d801079361449b2cc74c4e89e6407f9893e406d1e63f572404ecb20220359fb6a817fb5d1637cca6feebe622c733ce0434a2c9f69157be6fd06bebc6b96f9d759d2655c8d11660b402d9cc7c16aa23445d0ed24e530dff6180d28d588e4bae5e8cd2c5e45c79fd6922a6abdc2d6448ef66d31feab16e32a83fa67a5d5af17051055925d9066f87868809600aca7fc1a9ad0193e8c76bbeaa3e522209e7846b5f1e24dc32e6c468759cc2cb49c1c3feff1cd64adc5bdc5071fbe5680acd076a9615b7d6cbdcb79cea94b32947d690032d6c4c4ab11654fc9c38a2ced71bf4ada3df685f684f6aee253efa52304d2ffb63c347e8bd077fb38f868a0c9e6c4ce34613de93c50f4afaea5b6ccece9fbc8fa7237ebd79a02593ca1df37f74e6a5e0e98ceeb8e4390178063c18ecf978b198aa4088e09b072763f87690da337ae21dc9be2d478bccee20a44455e40c31301750b715fec240ca1f9c34ac2573ad2f5629a5a7b5c6bf023144eea857cb43dfedba1dc99b124f17894bd9d769e92f665f01aa72ea25a6fbbe0163c4a1174f03b87b545f66c9b82de1bd2547b4ab8bc61631ccfbc194711e6ae351b2e55f7bdba608f8f904315812d5baad656a44ee9cbd852771d5b6d612227781afea23723920905c0f688a9b6823fa7ecbef0ef8a47a6fe66e3a2476a63b18379091ea991aa4de24d18c9fbca4925a03d50e7155c923a5881bd14ec4c81455248a45796421a5374aba95777807fbaa96ead010f5f65039dcadcb9b94365350bd35a93ccbd48e9e4abdb7089a0fead7715452757dcb43922cfd83295e674c5ac617f9363056894e4854bb399a40089dc79514299361c03e82a591f1f64ffe6a03f4ae34e9001569adf372ff98656ddd3d96f64a8131923b947702869ff7c09986c7d64a2e63741af7bffe71bceb7118701e088857d6f72f8d407c0027f440e39269dcf19b3b724a3b8e9569509cb7fa29321ba39de11f65cc1dbf08cb443195d096ddc624ade83977fd5f668022eff1deddd013c7dcae92a09f03e4912d1fefa4a53a9c799693d5cfb6e83c5a9453d2effb55fe0537dbd2decab17f8321cb6dec833da0f16bb73809f303496d91563cc4b4f28b1088ef5b651b8d15e563aac6d41b007f507302d49b09b41caf90f2560844a356bfbac17c967c2cd5a81ff03456ac6f9cd0f1708faaa4064a031910418658835f1444426498c2f57bb473f90e445f4e1e57acdda0331cb727eae00d031ad8b37c4b6ac28886396fdb3357f54c1903db6ac21a3af054cd33af392691c8240c0ca46b54d6805223af88b5674d5ca27c2e9326fcb77633ed74d090163e38dbb7231dfaf09c041c14f56f19e338286b6c6b3852ec6f57dc91da54497ffb98ac2bafeaf6b2d5fbe5f4339731e66138f5c6e1afdd1cb1aee6892ebe88c6e8b3ad255029a8a55bbacf63f0b99f523ff99f4a72315a08b68e03e5cb33259233501233afbd02fb5a54f4e6741f158d5a1f35b326e781dabbf159ef2ac0d01a3b43f55aa49401e53cfec9e8b5110a507ed6038632bc98b5470ab64eab9d9d610fafc6da9de97032a2a555a8635ab263330f56229fab1bc53f2d2720b2bb30a2ed5167f9e9d918dce8c4b93c996f3cff5ba121355c9dd8106e5fcafd6c66c7c75aacd9e135889a1b66087cc7c88fc6d56202f5a4383f335733ab7c7a496163dfb597acec3b33a1306109809cee9b1421bf7ad5f41dcd872d7cfcd019d6244308e015d33bfc68ed57913c75c1ca4d48930fc21ee5405205286dffa64e6fb191fccdf441c3f56c7952e36226413695576f32971694f011c6aee7d3a8388ee21c28a7f57be8c2a571bff3afc9cc23665e10f1716f418c65b1a7c20f08a936058ad5b1ab72cb459dcf746d97592a9194fa00e9118e9e7c3b023ebf43d290fdbcc8760c24a7415245b9c79645361c730582fddfa56d383f27e5227d688136796889c24155ee4d4a1f8f87aad4ce004a9487593f93dc60d8c15b537983ce28981ed2187daf8bb5747def3f86ee61f8a350d219e2663249d4f42a06d3d619e909cf476e9d1e1bd22c37d5574bc95292fdb117c879d52e959e5cc5aa28cc667ea3a8bbd48531a78f8ff9131896a8eb75119213dc98eb6ac6a3d887b5160e0c243b08e157c7b33e932800af61ca4fe98fce9327ad2ec4af4c7df947fd6a95f4257a9bbd4c2eb28ff7e61bd0e9198acd862b48bf22a82fea3d3787fb44d0f1904e7078f70acebbf2d7a85483af50c25b0eedd8fb6faf7ce4661d237d2bc113d7403fb1166de885fbbebe22d836b7be98dd0e2abe57aaa414ddb638fb12af103b37d00c12918bdd0a3053af2d5a76a6d94764087bc240e301867022d3a3e16403c3bc53e0f8a796716ae3c30b549793c795cc2fce0b730168bb9b6757f483a86d09ed30f93d0251c54098e0e749ebf2bc86609d707279e5c9307653d5c1ee327c4756191edb46bdbef6f81de22cf7f97c0963f6b47941bcc04bbb349b01f8a970613e57301efe726bc3ba80e75ebf3734995659c5f830ef3c3dc1c8e8a212750d5bb807aa6199e0209715b490c46d05f7d3539d3fba6c0d7873d65056f1a561153b49afba5ce038246f16d9fbf384a70d3b3b3cd7da128204313d9a1ae6539784514fe2cf4fde8184bb04cb73838da128fc436ea41161c315ec9cd257b40cbb44e6a8c61105bbbb7fc7b336af18b0174d92fa9533f4eee415e63ac804fbdb069846e4b0e18c06c9ed7bb4d3433a12c39e1141b4249c9195eba5aa6827dc7fb02e368dd6785afe5a4d2e4594470bdd3e8aa929a7241c43272066a75241a20e85c890f39a017849be87c1a910ffb188686778a27c4e5e5a2659f13d8a5637b35c0476a0b445a398e61404ba72761163256ef95dcd82634c2e3dc9bd4cd1ba593814c0b29321ed0f7a729b4784568a796a40b465182b5af3ddf79c6d5e033c23213341530c9cc184e5b3a36640258edd36f795bbc21931db182190a50791259a1e49fdbcb3a53dadaaa2d341b9a5fbe3250516cd9771a338639f0d8c43aa241602e48118404704e64566747d24a2c3f419b851ed697b584cd53336b9e5169053e366f465b3b7eafc3fec71b890522baf77cfb867c4efc12d10d934dd06584668420c8796294719b82f72640167ace2444bd400e13e7c862c2a6d2324ceeac8241a31f83789e22ffe3a588c4d5fc5f8bbbc90a51cddf109dac327589367bc83cb8b1ae606b24feba12fb036831c85c33a41e742c9ed8e8b1c69900a40a0828df2d6927c896b176a3bbb33f19860cb078f6558de566ec779dcdfc9a3f663780fbbfad26373b555e9c5d33a6f998268945a910befaf72c59685be9aca5f64a4162a206f5f3864a255237ca90ea0eca03b77c604c50e88f27d38a5b4bc46091a31077351adf6070f5ba66676e25a9c988f0745d77211e8b6357ecf5098b18f6d5e39c6e2651fd6cc7d5bfec46af2b7cf350694488a3d18f59a97535ec78fbab9c7a764d61e797ebc6a7ecf8afd8077c214dedffd5edbfc05ad55bf1cc95ebcfb60cfcae008a75010e375093c7702e970a318515cc540173b9e76361f0eb31b13ba68ffa67d7877e8437aba4c04b7b3705f5cf7a23d7df621b43eac8f1dd9b4c1018c9c65cd3b2b619e2cfe2e5a0996eb39ece1aa68ce83b9d9a9a7067342866ef7fc3b519ad7193a025acbc392e928330859c651b8c20b4cad11f85a55192ef7d53ff22c10118c3a0d132cba53671e9a9cbc105562f439fdd7c5a69e33d2190303b2bf5517e45ad2545217f65411018d479ec6e41322b8776e3026c7d501f4e3bde99f3ffcf9c3d4a759040024a0d89755ba87eeb2b71e63d0dcedcd09e078f76dc434b5f6a3a5db195ba882a4a0cc21703558a2a9929d415a92adb75ecab5174bbc2ec78d45fe06eee50c60d0dde1772798b6176e94a0a45b3738f1de1216ccbf776398f42f22d1179112433edc86e7b4263cc412585a2f0260596c284c16186f935369cde654b5b8ceeabd3a41cca4b6198486f90e8e8d3d7550be36cbc05cd09871dc5323b231d355db5ea1900fb3205f6e6e625ef389babd0a453d1a77fd1de23a91b0a00164828d82515cf3620cad93dbe05f90d250cfd8947f0917a72bc5aa9a084e256e65bdc0a0fab66cec1748da80ca0a893c699c4227c780ea579bf054cc303a0c59a9421fd7c7c326d04f7cdab7f331e61c16c78ded34a0132ffc999b5427f498bbd4c64a9c7b26eb1c08537af3c582cee8f8b06c973e978f591d316c6af71520a34275d62e5e8aa46317bd38caf6bf71b4add7b2fae63b9fa03ed674a0ed03957a83426f0ee2b76fc0531f81ec9bc9a2835e1159244e4127f5735da69c297f71c6062fde8fd74bcc67e1da535a03e6cc3e70aba39f280e063ead49ccdb5e099a3ced38e69991509bc85bce1ec2b42f27fd1780ba269006fa0e77c9e0a0f0e2ea79e031d8264f5a1fdced54cb059b6f6b2717ed4178af6cabddaacdd0d0509e16d399976606b76fa8fb2c5c8191c88b4f78473620db47757bf28237ea034a437ccf1d2a9753333b01d926163b91f4be44922958fc3f018db8cdd542e8ec6abcabe138f964e085a3d6d39c71240c1f60b97b65293ba30fe00986dcb81b0d51f96552238614d3bd7e1e2e68dc859b02879ec89d930439673dfc4a2857270c4bc20e554536882d7061c92bf7db168675cb015fd832a9672a8dad6f2ed394a110294480d2ddab4cfba0272ad6b2b53a1d614770e7f0944ef3e15dac587b499c53e641d7c0cb5c9004a465d835b3cd8ce14deec1c39ad207ee0c415ece156a6467ded9a2efe121b43a0b70ea73abff8a18f0e23540c7390b89dc9487cb1cb2335495986bde830829f8ad14eb446df074b3001344eab55f983a9f14035258ba8138b852added6355a1bcf2b7407b4aeee6a2cf798776c8bc0a3498aaff453aa1b7d0603bc9790278cd250de978d0030cf2d9738ec060a50eb4f97df69660686310c1073ce03e88f3ded14af82f134410fa1a66ad17db70c92aae93e13a54513df8af330fd41b1ac0cfebebc2bbf7ee2a196874e8695e43866bb43a9f4393862d984ecb293aca9006811582b3218929edfe94cbb840f763ee286b55615fe12b9d16470481d7ba10c8eff1db53ae81586bb97b273773df6ffda36d8476ee6aad4ee7fafe1f955cc3311cc96b4f2fa71b24e17c370a73e3f0d33b70fd7e7d72728d9e2e82c446a878fd578adf55494c0a4c4d33c9cac261f5a0e893223ad353201f344ac4cebcc7f710bc6e7465fdebc69f05220ad7f2efc165ba657634ad4f0635e8bcf1912ad0680d5819d025e274d86646d1f14bab71bb6a6e81f03f6fc2399b0bd19d484ca1a2e2381b9580907ac25045e047c61ca0c8e6801f464ee4e23577204103ee47f259f05f56dba01c4717e4042642e0d3ff76ef562faf95213e302501b0621828d3127af85b20df15a3c1c02a542d039999d78e32fbbef96f6b546f4484c6c8826816dd51079aaec5f3056084133c613ce3487ae68e933a2562b35bb2f028de13d8845c49ae1eb7198513595d50782781c495c0f02887cf18702cc40fa1375a0987209655a55f45c21716731efc9af6a714dc9ab92909cb5f22471555c829fdc9f0010cf667566477508f487e2d520f50abd7390611e2b789593da7c16fe7e3fb743f4bebe4fda5655ff8042af34d8f623ab66d910920bf9edab7c4f41daace2b915d6b87e764efd04beb168f9e6a8d4648aa02f759495d9cc5f1674cb7c4b4a5cd4bc44fdad3443418d2c31ba892e71a1e09efc53b0d1453d2ae169df39c0f623a4fc3c34098da70a14fb28a4c9860b1c7a6bdf3b68f76de67ad6fe50cb373cda6fd40ead3729490439262c92eef9faef5bca1acd08053cb65c5ffddde3cba5d3e422b49b62c0d6ac14bd9046d2889285cefb0c93071d91431cb1bf34cba15c45bcb8c77d9e67172cf93075566593cefca7aa86b2db6fa0eeaad67b39dfe4bc73388079ccdae100ddb31b019e63afc71e36a497c8828fe1c2874146b4f5ee67beba66e9182c637bf63a25ce75f709deffa9434c72a87b83d53b10d5570fea78e0745957067476c7b9af46f3018c9bace8d52c3c39e9c9c2a08af92314894e7ebcce72abc40350ed3ab5da3b59bd7ae88201bfc64d67d9d59113de6b8d2874c30fbb228eaf9e9fef256c4ce95b48195a0eb6cc27f65ce538e4746d97c86b50dd062580f043d730e6d789b6a61d41ede128fa8e1fbbc46b54701af828b1c61ed81a15b31486534d566e28f7d9d9a5e805545b9314a4f2002650865d843b3bf3c9d582d7bf5884a6e71bc364bb6cc1e0e28d3609231841b3b88e30a44b523457a4630d1ebf42ae2ab5f21495bb2f0730444aa7f9b7ad21630488086ebda2e5c64fcee2fbb5b2ff64f13b133ab3d214768ddaecfe862e16adf0055cbf50dbf60d7282ef189dd15765c815f661eb60a0eddd12bc0aff134c6bbcabdeae1ef025611e603933ad5ae1c169f4081c2ed31683db6719e3dc36ccdb84504e99c758af5dbf8a10440febc30c83af8607edb5babb632d39880439e94c0c7089fe85ffaf0500736bf05d0afa73854408ee260bcb430657314a845e0bdfe4b48e8ef9c6ff2f3563f022e0ca8b3c78cefe01141680322089c5fc1debcf067b188496ee2cf4fa00b5d037866b96d7469c304d3bfd13e1a7767d4c49b706f0a6f8f47b848b76127ac0ae6f4267446a2a0ee04819935352d62bd3c0fb8855cb476f61890ebb0a2a6c10f5c7e662839c32260d6732fe31ee8c1b9d375a73caf4294b14723f452287ae81d97a0ad841e58cf52e9a3d00cf7fc3a9bb332345d838b970e11e58e49fd18e20c935b3ee9bc9db956d8bbaf717f64c0f993e373b095b0beaf32214ddcb95ce2062629ef6727a219e5f54176251f0e7aad922b53a760b2521b8f4310cc9c19d1f03cfb98239f65b89676b4ebb97d436b9e6c6e876a20c82e6e48151ba74b4afa40d68d183a1c1aee7ac5942be1540e2c17ad5c296623bbf44709451ed5c5348996074e39776310c8c9473e4c35de80bbf0f32f465003274b6e7dfca1305f02ffa2b0bf0847883b8267c2f210d08a1b66ea0a3c4bf316198a45bf45cbb73291884e7a4d2adb6ccca0dc5a93c37a1f2c4f2010c1adf605bf7cf40de444ee569e82021891cc87dbebbb35a172bcd4793f0120a86d4b42fedac2889938fb915cb3e4af51c7df5284ff8195024949569637a253fad96a2e5e463c929054a93353c6b70fc1305505b975e3257fbf27bc56045884b6278a0c3eec01d857159ce52aaf428f550c8d1d347e799588b9f3dfedd0c8daa12912661cb14549fc02b64d129a4b83567338d171c8521ee54fcd6d6785d563557e41b8f94825764819c13436a8cd9244ddaa543f6a73ffa73dd4a8e8d8ec5ab940edcece23246aa52c7da388d3415ece6b7b540e7662b68e026d96e86211dd1249227a0c1d296bd4822b16b835199631d24e4f97346a9905353cf48c687e663de8dbda5c3ee60bcadd60d420371f103c7742fd0719c124383cf336e14409e66defb56057025d2c55d1f8b5cb8e7f1ab60bacbd6543fae522512d67c3999bc0c0afb8ba415641d96fc220740ec510d0cb59fbe573b782b6510df22b44d4467155f12636cfbea5e423b57262a476ac99a9e1a16dc3149feb8afa0919718650a85b3e786e37d74feb4e822105aa9073571e899b2b2567c5e1e2d559e4981da10130e7145679d36f144e25dee4c6cf9b6b51a671db26dd2130aab6ebb4ebcb474d632b5e6e6b79a70a98487573909f2789f215b113cda0d458117653c506a733f23c366cde02972b692b76d5e40229d70372d7e424c0e384f0491a0b9ec68e1f74a1f29498ce2069ccb4f55aa135c8b541d55d0a4d6220c540575276bef6be48fb1c9d7dc71f766b44ff34910dd35ac70d8cf6d1fd28d43807c514f09a8c4f6b339b63ca047bccebb517b45423c1cd784f2bd7596ad52c1056f8b2d70e9c23b05bea7eecc35e20946a59e6a0f7cd3bdd8a3b0ff6f1f3d2806b8c339cf664e6f650c29a88780a5944e9ee51fe8e9dfbf7104811b175557248d22381db8f6b20b4117178235781190ece4510eccecc640d4eb29896c845c631fb085cfbfdfc9003f00e0940acd2e404eb15761eb6c7ee7735d1398c25a1e3d3a41222362a219acf26f252efc267e11be524b0385a2107f1af68707780745f5deaf2ddee26c2a05c3f1c9d619883103ed6f3cc8cf53bd94881c5c70b0c2ac566c9f2b4106e73a64b6c4cd00cd65256d06fc7f3a053ddc8009ebc842d1757fed622e48871f1013d05339e82ffa61c81f59d2ae0261cb6f6ec68cab9c440f5380bcbd668edc817b46d5bf9b3c775a2402580df1a80b15f51395f15731d1ba45af8a1deca93295f626dd98732ea258a6304cf517b2bd223d05cd5dc447a3c21e21816d275935cc1159f260307525658c60afbf8da00a59c1aaa66d9b155b046ab8b3d68d77cb785da31e764188cd5a6b4e5579df89bd3e9350e8e815bc513976db0b2abdcfe26abc87e5d70e07723ca3089d6615c702fa3ee9c128a770d28284501046bb40560487e645ef65a59b6a39c23895d324bbebfe68c9d717b052cb84286ec9cb61d0a9d41a539ccb4c5a154f8cbae310dbe27706b00284d9184ff942aaa6c6ea908ded997f8a81c8ca4d9897df1ec36261eb7a4e6e4bf01de805afa13aeb48d3d0009e3726e6adb85c10db0a364e2f1ce8a80f69dbe059c66a61fb16f078de77cfd0f5382e845058fd4e171dd1eb73a7a25ccd620a6f480c093273c3414143b7f5562dd0f933183e309cb3c4b91d4acfbae81627ba8717a17bf1f86bdfaca13c583e049033f88130b238de35aaa39fd0b8091a5931eb3bbdd4e56c5cfc8c6afcd26888a5497f713da91c9915e7f26aab160ea0aaaee705534b1449aead6a9c9688073e6c5131764b30c7ebf0a5045cab624fa91223f26fe45d5246f0a8a8a97a0d26208218fa3118204e6a9700776aafd74e76ccb360572f20dbb79bb2f856efd77a29846a1efb1b1ca9323dbe49b772b3674392a05b88514a1d132fcd60fcf9e24e66c6c7f69c6f05e22f42e1f186538950c7df02f11cf150d622bb7d4b330ff52c660c4ce45bb3a044f66ebe5fdbe553fa809ae62042b0c17fd4f6d176b5470d4d40a56f693cf8931268a6306be12f467a6104a16061170d6dd7a06ecaa5fb1eaab78e60cad8e55edaa981ae3d1e7a17c9b4ce051343cce2e5add77faf034fd4b2768d95a09171fe7958be61f62e7241feff0eeb77f80d89c63667a7f1fa7c8d9d821a5badb3f9dc576d99b7d6595e31e6b43f9f7dae0d7e135ca979829e7130bd2020a293b61ecfcbb8506305d79cd7e99787bd1f52dc93621da87b5de394802c1256fcee123ceeb9d3764bd9e0b8080a891d6aefecba6130b8b7cc055af26bbaed0c59002bf15aa2db15e1de7ec1c5e5c941a399f66f2007fa9d9e5a6384428eff0dcedacfdd7ecad1b99ae1363ca2f3a91f3a4975c31d31c8970fa2da50017ef21e011e8938d5264777de1f5475eefcc89a5cdebd0cd3719e0e55459d4e9e8474dd1f7f3d1161474fdf17d4ad791f06f7fb03616b08d08d59fa6d66efe71dee80dd6e365b1ecf0cf0e3d2dcb3c99375c6d1d9fcfc4cb70cb071917b26c360789839256b2834fe3c0425154bb13ab3d63bd0c867b3d325b113d8416087eacc84d913c6af043f8681173a902a60db3b8172b5a17076940ffeed654c30d76dc558752698a2ebf0ef730260fbce96997105c3985e84d10df3935a405e0f72638f90aa42b2206d21e122e485bf2f38122954ff41b7ca1455ac37bad3d3dc96deb415fae79a9f04a5c05af79effdefc5fb14d2993768def589f65af27071f57327871759a67646b2e974f476eca9a1a109fbd6b5620f970dbf0ef0b7642c202c89df3b593abe72bae36a27d5d484b88d9963cbb721b7c5d1e970f746b4bf7a556873345c25d9ea3600ce3a62ff77193544d61f3fc66a02bc92f83ac030514ac6dfbd98852d561aa69c4b05acec41acb53bdb1e793c1c884a3a4b01132af5366387bd8d0d460b7094919b4e4d41eafdacfbcffae755301d922eaab30de14d2b9d4b0a8f8cba78f79c4e17e229ed03e4afc17a87ecfdf987695610524414da4ea73033d32c215f19dd6593c0b8ff96ecbf63f6ab4cdf8b3e0beb5acf2d035812b24b2ee05369bc5011cc0229f6c0ee62b06e40e206d554def2ac4f6b7a4e61804361eb842ccd5c1b449ff858b136337c050fa0a67b5901bfdb8e76e980cb71f769157df009f0672b07d8662f724256c77be740a205a22740d381c61f1f19fa56b334a07f31b2fd0d4242cb82120bf2e15747452f9f286d3920ba474491dc3a1a3c6cab80ec857c2246cb40826cb36fdacf2adb45fa70076c5d8ecdf17bc310b0be7351ff9f5b8af6af3f8166c6fe3ab52ab76cf224dec26a7132a15bf3a11f6d514747a68ac9f6eed694e8084c0ec7c2ea209ca749883df7a743fb6a671d37e8e25602525851de5de824954797971f62ec6801fbc96bfd8b41978a961f186940cead7c8334f3cc8e78c6813623717b94f4bb35e30812a0dbc948e51c73b364ba0a1984a3da635da0bdf103d4800d6e6f8d6865e494774b5659965061cfd6a380ab1bdb7b829ae5dbe5d5083d24c4cb85f7eb4f7f9b7dd951f474fe0df0693614f45d2bb0acb5fa34d57403632ac1cfa6ac1893f5ab3d6f89de0235b981a156daa35a61b06c3e518eab80d3ef794a9b5931dd06613def4a08a88c3794ddff9aea7268a31029a777aa390c12f301e4891002aeefc2e2621156a31d121417d9530c309a8395cf16afe96d6f8aec30e54aee809356832e157da4dfeaf4550ad57f094ab31586352d58447ca9041da45033e87b6c58c8e15e82a34e30a86b180c37cb4aa92aa09fe05c76ce35e3c4102b8ef66fe72804b8937587c991d8447579c155645e1ccef03b679dabf768fe8838b28b230744fef4bb283a9f66a33f771cf26953a1d9260485d7656fcb9e65bba26adb62c9c68f5328edc4a832f5d65bb86dedc434dc1d9d0ba446d1f5a8193c5c4a21ca571f5d3bf5811ea179d2a54c364ab68e07ebbe6cae3a227e4ffd8632597f5520cf35a35a0f9339388c6da2d3769a782abfd4ab2df46fc849aa90eb8d066ad653ecd93bea9d88417ef093179386ae21d95b6b23d8ccbe06c4da31604d64d503af286945c5d74b7982d7a37fbcb150ef1a0e3eedca7fe149045bbe7a4b86ff83a39e9b0fa101d54a9538f4ec309dd7fdcddd0ae0bac0fc81da33c5c66476f2b186608a65c4b102a2a83363acd635a11dfb5b54bd78a250de94c9e14c61c7fb660fe71d93a1ea66e7366f70b7860eb0268b1e9ab1177beff337ffec2da3d02dfc73a13c638277ebc642ddd6e2360f441bda8396d04a30cc0b6e9a02c100a5b3420a19f0445ea8752a26c61f7e96ab3888a668042d40a5542eeb656ca78c860f004b93b9303cd9623130c3d7265d3e7a52eb2e13a651f980ec85557d53d762a76fcd9825bb14917098f5371a06db5745c75ff370789c5bb05d786f18635d4a2034aee4fc645456fc6a1dbee9d2308e0322658d04782c8932cfc582c4c0f1264376f1e88b135660c0418c576797ed144024c1d830350ad64c9ae4ce41cefe44a57e7ea6c84082679146f8a7691c9418a956205c7b6e809eb64e112cb4df3e06ecd17d07f85d057a8a1237e05db3a5970da61bd1f6e902ec98b77810c07f63a75c2661dee5d9f4169e91a2597c52541fe02924cb509e5457ddf8f4d9fa86d1441178c7cc710527a2aed3da96fe24ba51b4b838f98c31273f63acab403acb9bd3d007dc35c965cd4ab812a657543e47d926cc05515c2f516c60fc4b84c699345600b66793a41ca10c9cb8068929238866c27a16e0c959b832aa0826f84c27fce341d007f65dc5996fcd01070c9a87d918b93bd47950340ee82e75e3e35998f5c4e4361bda1ed1966e98f72e00e7ad62a6591a5fff1f845d48cd93d96587f2117bf9029f68743925f07d57c6408a25a95fb6c7397de2c5f0d494b84d0dbcb8f0144a03025482eb8f3dd2f8ad49053161eabe1593d901e0a6b409ec7e10d7ed4d6543bd088cc5eacf7bf5d2705d5646795a99f77867270918f77011500f8ecbb50975561aeb85c188397cf111a39de0ccb836415f1a34b469c4817d53c6ee76d51aa8d5281ac2ea7ef13f32d91504797256cedc540db588863036417204a49b2cbd4aba365e49ea528a5ad051be6f4ba10f0da05c45a127eb6084fe2f6cca416c22e4fbf540b8d7e537b57d018688f49e53c66cb6a2b9793b9cf9660131e74bfd907e0c13f9c73bcd553f694ddea0ce1eb5630b0d0fe89cf7d20cddc14178ed756e3c3e56ab3b39e8efa6db20e5c56f8a3a753fda532c98037221b9b18795f5d15ab6d6793d374ebd3b2c10d48b2d1c9f03f872b527ad5b37a142c52269344f419bc64d8382c11f0d01d5f45e1c44be0594d5a8e5b7011cfaa73635f6e96e5824f11965466e294572980fb8dde6ed94bbe9fd937b5a1fa85e23f2026bdb2d9590b607e7b006403fc0403a217142e95d22e495ec941a8c7d06ae3c14af5060fd720322b14a55c847585dae95ff9ab04006986724b5916d914521d27b260f6a0100b1f12de23cc654e607191d33761c94141caa0608fc38bcf12f73a7661d68e48ac7c63586d8a93d1f4f2888ed5bf8b1dcfbe47d79bbd4953cbb9674af8715df584c98ca0fbdf9573d1464311d89cfd36b47e45a8bd17f7e6625c9e247d072731569ea14810ca47ce8b25d13ea6e9d4d67ab3d1fa3b13c5e07c8059b54ac2ead274331d26eddbe20f9d6cfab908419a2da239857e7175231891ba29ff6f57edaf305be17090035e4e36ee381e6613800a00bb1f44b955a8109827a0dd3367e60f4c272086d43893b678b8e4afb88852113337c88e6a44dd1d78477c7ca80c65fb5f5f9fbacd02320e89caa88a9d275c95eaa8549fcb58765cf93e73f8ab1a065cf1625d5e64cb2f50a9cb196f5d9265a4c0c2d2661c1d9814ae8799542a646ee0c3f1c3460aa1f31f956e5203117108a073b416c9cb78637d7f9f8c2b4169c7cce922bf700ee1e4d82cf6920347826b779f78396f26cec3fe85c14fc01acd2693236430fc18a5f430ecdf765e0701a8922ead2165145639d72a99354df1ae10f83f8dbe62a06c4466632549c23be81e27013c707378154eaa8d0707b0e867148f0d1bd336e765589abc0e3f229e090a2cfd278eba860223fbfca55bac776ff90f9a059392d169e7780ac305d11aecad115dca270a314bf6a10680c927398885cdcc5d356e74704b622930afb5ff05cd1a70baf6a5c8deb537a5269b5d5b71b2a7c59c63fae75e555542d8bd0256a790ab1c2d23419b348b3ed3acd576e8367437c5774e1c53a9d8a21ef8eff0babb058f504a93ae2e157b9f183dd278007407e615d24d6319df351bd8ffbdf10fcb1203860177bbdaa0933c959fe2d668464303c04e47bb42c64cc77f1e03a912101ec55deb15540ec5627698a44e499a602c338e95d2b56436f6cc7b31e9d865173b8c177b100096de5679c72aa5c901677e343689c2ad6e37926eeeb90e5567d9ab13ffcd3708dd37b3b1f0b13de8e392e9781627c931c2dce8eda68c60f8fa6a92ed091f5969e07ec7cf3755187b50cac94466a1c9e7d1957432b96c5f34bb13e4bcf8864599cd21f2f12dd834eea3e2c4a347aba87806e33c3496d7daacd47e471a5bd4fcaeeed80ba757a8bd0e0f095464d6a59dfa7bb43f86e2accfd6ffbc774b107ead8151f3410bc5cc596143cdab333da44fce9726dd79383337d5b6888ec049f798b389245688352647c1fc16acc674c0a0527514933cb05c2e0bc24c7e592bea38b8f849c7e80c37644f20a658081f59b94a2c373c3612cc3b348654db8b9a64e5f9264bb7526b044a4a832526dcc62d10a6755ad9dd919eef257f73d3f568e32e294c7edd4eab25d5ab1a8c00a9b8525e76dd0524de269f37c87a9a7b7af99bab264377c6f9501575753183e3f6aa581eecf6910de9fc0c10a88eaf969720f169eb704606bf6b3346aea7b37b12750e8d38137f12baaf8a549921a64629cf7b38ed99030c179ebb23bec60ddc7dddc6655b1ccfc0ef15d2ce24280a3d86a32ec95f82ddfbfabf93918301a667b7e56cb9dba90042a1ccce56ef7d25581ac421476db61ab761f764c5210276027e02b16bea02fcd5573fe522f2847525fbffe93c0db9e0f20740a4b8b819860968dbc34c79613b14f2254b6dce08d4bd2c62667c1a0cbeb791cb4f2efe371a9d2feb698f3346678bef37581d2a52ddec651948748e11341191d1efe1b7711a48ea191ae98fdea3e97d5afe3e7e5b5190868ef0c97e98ba3972c3ece2b1a67c8d839b7bfebdbeb76ebf1cbfbdaa5520c19cd81b45214e53dc681ab5f262b638643db8a902d896b1776c6e23868fa3337f820aeec6c6990f40b811f46078a1691a63eb5884b7062e94482afa3eb40fb6f03642a9f93277032980ec0fc10cc1045b3f06a2c1af71e48f3107245da17a24247314c6d02be45ec446ba034d7434144c0c5daab9504426df9400d9cd5d3bcee79d0d51de5e29dfa8d5196563cb7595ec6eababaec5d12a7b4ec40e79e04dd3fb581b5ecab3c4d7e3d0f281bfd9d14ff330a2bd2f925a48b02906b3cc7ed3e8068334f18ba6e3ebfb1b04263c0bfa65d59f5229dbcc2063606cfdd86281c6e29de6c10aaf23e096eeb8fa981d3bb6b3578087dbc247e3f24f8d6294903c76c76b8f79ca96b5bebc3495d2e2516e1f0d2932bc335964876ba9b4eba6e511a97a4693e77d87807a047fa1321261969a3bd11fbdc57cfd541a45a2df66183217cd3ebf977a61729b1ad7b1f1331577122987ea86eafa8a30ed3a4c0b759833f64df19ae1e98ea33417f0d28da564be53fc8e06b55de9537edb08ee1fa71d536f903c75c6a40d1118e25043290c3b21e0e8a261121a325ffc39d10166af569c31502034996b1f37525385ca608a1227fc7676765cb5561cc89eee8f2b72a0c7dbc64170c3599457f6dec918ed13511ea8d0a6c18c74deecdc76fab2eb13cde18c2f7a4a86c4a03af8b12b488fbf492d618fe92b33ec4a2cf264483bf272c26b19c02f82b653766db3ccb55a732a62b1b5ed76f5e1b0e10b0bd44787b6a0d3b0644d5d3ff857ad6892a2e44016884e7c9c13ec18820b6c1dcee3f2738b6ed9db2e4a01f8f8490acc79bfef60186a83b013202d60a399889d587817d1c628741d1d88582ff384db37951eb7d57cc8a9e04e1e8f70b19025224f08361b81be0b1835f62d18aad5886611946e27ec2e0d789fd73fcaf540f0b3cfe6c4bfd724a48d8477eaff1bae2ac4ee0ebf5dc95b6e60fd1ea4fc4427c04800ac27c57b7704898a2d0ef64ddaffe103267d8c1b98cb1748f7432c5432b734ba948fd80fcf6f45e60a585341d0144e941340ddbf866a7cfaab3c1e15029906d9eff6e8f8b18d76e2b0bef2c0c8e89a31cd469c00b17acaa961ff5a7f44e8010d80ad621cfdfd0e75d34a490eb1e3ce7b760e36f0ed4de06d1c93df4f5e4f8063f91b47e6d4ed6bab978ceff9b7bf2fa98f35ef1e14cec15f5348f7bdcdf4372ce877f159fec916ca8b8cf53fcbcb464cb6c96865e584d632b46ecadcb6c1403ad0adf184b64c3e0759d345c85eaa452e45fca23d45474475e4cf1a3ad3a9e3798e8ee8813fe05f7f9c05441c1d077be5fb0e3a80a3cc6ab6cc6adb7d83b072984cc2a3ea8287132de4cda2070867bd2d30ff0c0e6357621cbfa78867d882700119a43a8153f8bf7f5962a6d6ac9ad3080150ec956ac72045765e97962c1af966cd8f5302a92d7098de7fe77b26cf12efdea7cc32e55cc7f0bd6d3eb01df4cc06f591d244122bac9fa642f973bf063354d1d19fbbd310cfd413f4c7b935928e4d98793710da7f0d6cb71286114c91fca608f0af4eb25fafe839834d41895baa18591e995ecafd77c7aea36b6e5ad1fc7e8c1f62f4f14e691055305d4e58bb9493d246aea5299074af723be3f51f0d8fd142dfaf50f35fbaf8362bf175d32bc745eaa76034c7f9ff406875572fddac4aa9b7a9f606fc2532d1e02bb9fe7ae4d734b744841415a74fa4c0ac72cd7093469a20e1de75ee60d9c2d8bc07fe0c8b9d4cd6ef791f4691b1261215a79230904c517d4c89903423f1c61d17fe15c3eca534a5a0372a91a4e57461a97487c8a89bdd4fe152c6540135dcb4d6a6ec32c1009b368dc88ddc2e15b2daabf6b481695bdaaefa2d882448594abff6c9f2738cea1ea24dc2882ed27dcf99c93b4400ce7adae02663487c46186abe9113196f1cc2295579fabfc9c45d3213dcba9996042ecdc5b0018add9352aafdd5633725239be299d593513665bbcd8a8679037e14dd9babefb280ef1407183230848e04d1db4479e7f89b965b6f96ea46a0107c561aad3831b288a269ed5bc67f97c0d91d404ca803dc7159aa0f29e076e1bbadcd7fb51306403e09b8c6794c89233d0a8abb53d9ee1d4d0fddcd6c368b7838416902f95d6914acb3f7ac5069ab3c77e9a44e2649289b929a0d916525d9a7f7286e41f502a38b5878335de361e24c10b036a89fd265fe4e0b368845d46180235fbfb54569e242df3152e8155b537664f7110aa03927a9118052c6798fc2d54abfdd41e6687b87433b7e19eb8248727c77bbc8743f82297063c06b9b41203b413240f234946ec5ecfe888e91961f6e173bdd833293524385f7f976faceea2612ce93c56904684c49cc6bfd14465a61eb0d6c8f4cf22b3d379bcaebd464504cc29008785a44800285caa5d0662c61e799298e7b22094f2c9b5267aca1fd8ce59d67e262d8303b671fa689f5e7de137b81095a3f444d81f03cabe59dc0b6ce8c14f9aa0101fe505f340a7903b6c3a59482a252985d83ee52dbfda85258c053dd71b75f48a2cd2bdb8a0c12fb22cbe4410d553831082d3049e85de4c6a66b8dfd42a9016e5471ee3fcbc4ce2ff6db9259cacbe8bcefb3e93761c41d02c7e0f7b4e3029a1b4dda7f8fa6959a9310242bb46168a2368904257bd0cc8ba558d518ca24860aaa5308a1d7b25209719ccbfc79cb16bb044ec1fe97fec593f19ce7c86153afc9e3a5a70865be4215306e3fe0ec53c94471942dc3d00dd815e00d7777cb31968339e217adbed0bfbfce1bf875ffddbbf7dc60a2989da23a4c65dd439823464173f0150cf9089f97f78de4e91619e617db373c06d096be5e53c8f2e53671a21b1adc56cf4b2cf3828a87c1fef23b4a463694e73cd332f53905999b83b7fd0035842a087ca7c6d965516de0e2cd556d1bddf3ebe2018776403ad521c1e241891a8612896b59c54347e4c10b58afe4a623771b4f0724d38ec851f03364f3251955da638a6cf54dfa1b7a5c1bf16a6ccf963352bf4c05d4829fca708a71c799aae0df33752588f544e531fcdfdb0bcf8d0bcbd79533733039fe2d028c5f12680b0264b4e53d5462117ee9a01369535f60b049e5fec515f2ed335b7452e0708ee93edf3573afe0107f975e82575182bead7eabcd4f9acc6df1cf48e4fde748823c218c981ba73aea919629d8e98c9ca78f20157f0a6981914364bdc90e375aaa1f6bf988fed9d2dfdcce88c155371452406df0f4cf5ce1fe84bd2867d346c65a192baab54658004ec194c393f2a98082bb0f1258965b7fd4053255581a67f0df694be999d3634dc57c3eb47546b91540cf198c8636da55480da8a3fb41bd40dbdc7c9794546a99c940d0d129f4416349e55cf38a99f27903f7b678c3cf59334988ccf723117880c4c0ab5a1248946e778ae074f2cd2e16353c8a67e36a413a772871ca7d790ce50baa6f45d835b1356b7053a798be5ad1752d4c08121a84bd5997c022fac438db2a2776d1a05c00b3e7b1a6af6296336779ab27308908fa52fda08ea4a3857de69328a7bc1a8d8564ea2a8961ef2c26c92794fc36051e5424c1328386e16eaefe702ab52cf53b39bd4532c3c3b21b19882108eb8d77abde1f0914a77d4dc9b990d63a71657fc29afc5b4fd8613542854c66041199a99e43118a0cde4f784a85ce333a7c7e7da4a9f65cdb6395d51127bf886850c44fdbfd501471abe9aab01b33e9c0458ee9bfce74329de5e725a070c0e55cd2a43310ee5ca33c59a04240e6051a8772a7bd1322c4cc8c3ea855c2c69970d991126e4e6fac22ce87788c39750106e9aa75de5a00951232d2af8a0f47b3d6dcd466de3e3695eed915c9c0aa842fc54eec999a4732805305cb929ad6662770c02bbb65e668cc712c072d44800f78cef85713c9af0ebff9b4fbd76d166b12d6ff0aec9a341b8ac3058a198f84e33076516977a3e12f54dd6313f5f708a4916fbdbce4f90c420eed7dd0a52b499bdb7bcff05f53ae6c96bcb04084022105ca0d605a7bb46854473d7d9a261d4c54945c902657f0dd2282204f0b2585b9fc65a0cb3e14e01cd1a6e8ddaf089531c6528d8a94db5b32ae8dc8002abff5f8fad6e2c242fc14af3e478143b8309111f782e5018b3176daf533aee8107d60b185d873828cc4451b2358c7c8aee8534a4479b1b747246841b2cc4f0fecb9e282f55a8afac84cd86b8fe685f809c6ae555f0d3551c9f15865b3686ce5385bc80f8a3c1cfc4d747b7287cc3346ff723aabf25ee39b6a6a8a6aaa7a521a594872e18a595c8ffa311204a91eddf5f4001798eefa19665f5954f8d2b4a06d5220d10d5b42211e78cb03fd69db45884b4359bedbb96da7de0efb4e5d126fd58fc036f06acfddd2e694574968a10097a6b82694d2a7bdf6bacc18df20f12d0217b5fbcabb66741f92c04138b93cdb5fca7db58652bc0ff1f1732477332de310bde35a7a17f5624377a40b5a7955f53087a92d094c5c141d3a893bf3691a4a10aaf8a9b870fb95b1781e14aaec610d51174d52866e86e5aae905e36c0065b9284283738acd78ac721184c435c47f34624b3b559cfd5eefbc4c743c31bfc5a68979ed0d7a767d698e268f1017d53678dc26e8d3ad39782d8613bff763aced6d85129a4d33e0e250764aee6db30b0b4c460eb3f8c3e3a2a7385cc81f1220008eca0391b7605daf8a68ee85fe50191ab03e1147dbaf9f81a21da4b8def1ff4b7f9ca81d0db2772ca420dc284f7737bbd6fb340b530c674c127e2c684a315af1b0ac34ba67f426449668fb17fcf3eabfe922102c48ddda15346a74ba7d75b7e8145d03247d6f8b47a0eeacd847d5d90f880355810b0e4947a9fec41e1c486b18717f00cb5ca6a16d4247269a5d3105fd934b9c6a79323b44bb63bec2a903b4d9d5bcd305cd0a992aceb9f7dea3663d7cc617e9c5d88a21ab22b699a320de59a0b1b7909c913254883ceb2740a09ac5bbd8d9c4827197b7a142dee25bf431f439bd33e2e4d4f1c55333966fd4fac2af9b77b1f039dc57b9dba44538c814b7935c28f0856cb745d17950af54d380ecf1b8d448bae0c0b86a48f350fbc9f339236d05f224ff250d4da4e5014393141a4f26d406a878d8e77a4a2f573eb9ec5b2a2115dc4b3b27717bbea32ad834f959faf69e045d82317e90469bcdb0a6899c41d0f1705eca5920717dc846130f7adac62ff479b7264097380c8c6c925a1a693aaf221792c07a012256edcfaa7ea12165b21cded4a6c511661e806d2a880d957ac323a4e71342c2612038c43bc80b7f57194e94171310345385e7630321ffa62a73e60973ef691cb19dac41ac7afcedbb79994d2cfefd4e9ae054662b64522e548301873c28b0b0ff8f3b7380f6d6e1717f10dfbd93e31c346df3f107cd0d6e1ec79c89f8180ea0ed41711f2d185a1dbef377ad4ecaa3a155035dcffea9436e83bfa7bec3dcdd5a05aa7913bcd20330cb2314675123bad59e781b5edec3af5ab5e14f1a4059329af88ae4ef887d08ccb8967c117c3278e6773f588ce89f4a595312e5bc4b3689b41f66057027e0d16d0601930eaae2a9c750c35ee5b77b6546c746e13969ee2dfad9379bc885b42d8ff22be28daa1c3feb1b6b3c36037f1bcb2184e52f57f2f405c618144fb377885e2aa7012906edc7fb5ca7d16d8c9c91fe97b3a99f73d0e249247fa0245fa81b361289e83938b1718710a807249d6c510e96a56eebd5847f0fedb9241304b606dc3df37a58db33df09d33285efbc5c8a89bffe2bb4394879c50cb85020813e7954b5139c65c203ab2a899c99ec16ef0da5427a25a76e0cbe7879066e846d83127e5d05a72b8a24e24af49806f347200b62d674a9a2249502568dbebae68e9903b7892d6e3ba15c80ba1cafa2489f1cadcad43b5b0ad5bec2843533768e559cb91fe6f579f482dd0cb5dad3b7e157ed3c492d0c1a91ea63ec31826555c8c77ccd76da9be972a48947ce3c68452a0a77e37a127be9aafb18962ab36ef795629b5ea3e39f01019fe71948ce9597ecb2703a333b5839ae2d6b1baac019f9881858f0cddd1aa7f48369aadf00d221bb99202437f9ac73d3f781707df9caf85816bdd7d7a57bc22096ae116510d654ec3e14f7f1d1faa73cf60d525494e51dfaff3f5912eac1644ab23d98a8f63b60132ed39217c572705bfb7cf0d7faafe8b9e10ddbb7e2eb0d040f489591d1d9ddf462e61f10009556399165598e5519276f6972f6a1fe4eef4f207f443b333da078be222c18dc3275bed021e84157bebaeea21a6ea5db8c59bcf5f2f7670f2c58503408eb317717af3b8595e2097fd78d9c0955f19d6ae8e1c30a029d6e6a098145d7d3052383a826edaadbf393193dc656fe2bde37089e3768a5f145c308999117ea9700fadb65258d42e78d5528a571ecfd0936702448c8e2fcaf3a473ddab7fd410df5a70e5bf6f668c49a80895a434b8337d5649ec2fa25e078db77ac0a3c4c9d715a64a302064fd926981e3171546a779c3f0418246b6341acf8ff0b84af222ab4e5b498afaf948cd208a46ad4b0b325a79ee835012c6d9f8d95bf5bd8aef9f969a703ea00254f93407933b2e0d904a4787e1e16658515a0ce5f6dbed470b686f2b6107888fd43ffae87bbfe48b16b7d9b3c617bfe24a7a222a15dcd1465f4a33b810ba4b243784fb683f1c1cf88fab7bef6f3974fcc55c2d21db971a0c94ffdb801d14f85576d5ea78986ee4e70f9fca797215f458897c6c14fdf281516d1afd838e15589119b327c96f98aef1c304b125a6cf7684802846dde2dd11bd1658a438c5fe2b4685f7001967a014b47d640f7973d6bcea20ef887ccd924e59259fa62f3aef21ce3dc33c06dbeab91551b14f43c3fc48622227acbef729ef8b6b141b8febdede6d0baea41ae130c01ed39e14f0fbab2fc2d1da4e3ec26bf9eb310229cd9e195225ddf52588d8d3044e96a8abc7ce72c27b80cc83be21766a15550dc2a5ee1c70618b8ea90fa7712c80b8db6b3a1e301aaa4900c71ca9417e10c17d5b14f88901a7c576ab7c6e15af8c559084fb1fb74a80a6c631061020d98cc0b0e0596ad7b994dfc59020e9f624674ea09fd0cc9df9140559cb8c46d00ad4b8faf5452a51bcd330f1eac986e612fbe775b8909e9e33ccfb9e9ff530d48de1c58edccb2662e36a0e3a6a3a5d335bf3b72bce20997e27d1adc28c4dc00b76b1880a0138d3489dcf92f4a3049e96f7e0e157676aceac46c3446e740e0cb467c999a0f760adde0af03b1dc06cd7605cc0f7066bae53b7d456b0d37360564ab5866dc2c0e301353410d5b5fe82150384df6f9ce5eeff99da495eb85f9520ebd9d3a1a9c02a74cc245ded76828ca89c2a9a3e0d978bbe4f91c9e7c24395dbd8bfc6d7ec8e0b23412e7ced3f6d9c03d04778853eeacdce6c13c85355a284f3566426f8a7d4cd133435dcdf93cc964a9298ed8bdfef4c8ca800cb9532918c66229bf0cd97ee39e2755457f25dfedcfa492f2dd2d19bd10d39902a4295f2e70e49f97ac6c743e27622e833cee9020e0bf5d712c790ac36ec65426062af7a94bb458767fc6d463e02e8e0df9ac77108ca9182ba8a140ea2294ca7f7f92df6ecf95f1262add3fa9d2939247c0d604d42f6f22eed9e6bdecbc53de240557b591237d045140dbc02b92ea9ad5befa67c9db7b92bdf9c00e8b3eef1024639059358d269f26865bd255e5faf1c7af7f4e567ff6aa185b8845f2ce40e0b1bca3e97a5b298a45481a7a006d3a798060229d024b84b8f0cbdfdbad78098c47378c3b563dd36e9253c6b271600ebddb12e0d61fb812472e5d4a43d27f194a86da91bab9765cd54b0d51e77373f7d89913f4fbbdf907f9b84f1c945f61bc4748b6920d54322ee23b737906414450d328e245683a47b4614f90f1c3a76eda7da80f156b20506a61194bc75bc6ca9d6ca805e65d63a8652d1c9d1285b23578ce016ae40cfa30bf81d5172b8c5c8dc9658aa0b143fab6e0005bf19705c35ff1329b3008d1537003a688373d90f13d6dd839a0eb0cbbed64ee13573815ebafebf6e9efa158a1ae2df743920884c9112a61427c828dcfffcc3b71e294e033692d9df69d3d0e284192db78fc49b00375270f19e4a1969c7b96779c05e08f1f16e2e698b303ba3b72d077f172ac78ef7f6af86df38835125d1a7bc025bf60f93a9e7228bf9922b577d67edd27fe97fcb732382df70a13d536ba2dfe7de8ad71c195ded2534ec19fb2ce824bad2188397eed7930d90606573c2beac5d01544fd9ef4b2b5bc4330e7bba2b89b2db89705fb71247df8752338c8d9f4a0ae11297f3c8f6aa8b691281e3f123ba73a80d619639bc21448359917cd0f4ee01872b7f7bac3516287dcf1c968e48a7e1122a422180190d5c4658198e777c46a9fc6613558526f20fba527f31f2e3c717537de0e0b2f8fa16f7b9bffbce430b1deff3d2f420d8bdfcef76e584bf440bc2a3dc59a4a8eab02144ee078f13239d8848e5629a87804fd54874c80182c99288f31b406b019b9da1f485b247d7dc24e49585605880af5c91e9b7aab15648a724faaad21309971952b289676fd071fcb80635eb383585a457d5bd2b11554ac4e31298ca1d57be024539e6d3f44f3c7bf97ba5fd6e7f0c72b3107bf321c977cbc02aea8ec0299e33c2f9aa970fb57f1d12406b317ef46f3fe01b9dd8b85f541165af25b5ac8d89d45d102b965965f33ee6d70c54fe69b77fec2a5d907ce574aabfeaef8e21092d562efa26b416b9705cc35463b60f9f236d254818523708f48badd38299ac828c9b1e79bc7a08a6aa0b458af4c5414800cfb437796d7b31a60ff81e5c02694b528d221e6f7ba22216e714a7b831499abd06c3400a59120ec4b31f159dead308bdb5d58692d02d2c565fb16b32d66e59907dc74ee569f4e9490761f3ef4e03c1387975a955dfeb2dd98b7c7f606757e562b848f0ad68ab566f6f3b07c3aa0a8a40bebe9c0fbb48e7224785fb660b9adad752a39b1afc28cf3ae515f9464a76a5cf72acdf1d4a7661ab559f618b2da6f20e8aae9f8d3806149e7fe4f805c00bbc84c5279f29a11b2668268dbb8b20c75a2b2dc820d330b4f10e56a23d9ce89f4ed795ed7154ac376a39306b6ed6218055b746e343a16c29b8b99763d6bae555462bc6a09d800a7f2535cc1ab5fe5f38bba7725e04888dddb350aed007dca9d43c42ecad9df1337da6294633039dbc26fa2f4672c2ba2fe64b30433bf4968b7a4d9d88606c4b87f02f3ee380739635f7d2f3442b6b835eca515fa7aeeb0993dc2ceb8c809f776bc3a284516c8a108c4b5dfbef71cd3ed6840de73d3325fb267c6e80638f030b1595d5ab1bafcd3e9c431cd6b9438b426cabf3483d19e54ba6c6d70f58aa0af6ec77bda513af5c8eab23762d01ee1d05f5cec6ef56b0a4636fb8145aed51eee25586588c62c272539682dcecde0d6553b74f0ffe59328a7da37aed9e9801a4267d29900b5200c0e7938306d935de2ae0a3ad0b06ae643f0584a854dda4eecf5b6dde9707114ce374de6f068663eb20122cd1d51d9856255fd5938a9ab9296faa9f7a8ed70e83b7927b833992d062b5a9c99f601a52abf9864cffcac954f97f4a95022de3f4ea4958210266f622c0eb170191099bda266a46127bff4357d100c0bd6383644754e05b90e78ab318101bb16ca1f1adad4a70cc3a7c61ee9f1300608b2ee33889f0259d54a04b2903411361f13f56074e0bc39f069f1d7abfed8b0d028513658850d5a0d5ce6ee47aec88bef916389dc1bcd2c84142bac717691b94bc519d9f4a0f9b91e499f31ba6fd96b964ccdf658ab0104fad73aad0f6658aa069fe98649ce58d3899c15d2c877b73cf1dd5534b9f63626f41624273b5cd1fad1226bb05969a47c60cac88dfb9168b718397f40fd118198989c7543953eae87c3dba8ba8dc2f5f495c0fc1454d9e71516613af76f6afec3f059cb71d7296a90ad7f8cf9fead7353f99fd0e3567dbcf89fa7a74656e191dfe643120be4c8189c17ba8530a2fdb305e5d84f764b4645e532a27b161be8da5367b40ec05744a49b3ed7311e7c4717ae980c29d0b5eacc36bbf43d3d7283dd27cafc1a0fdc3cb85f51a82ffd48dcd01073dafab46ef07d929bfe0e17f5b191198efc3e553c60d56121b52181a33d295c0fda1f0cff058dff6d5b5d58e5ee04955b61ccd375966ae4268ad2b3842b37eb548febf48794afaaf78e08d3237773df6d80bb36c044b5039a5ad062feccb19583b8edb014161140f352a1a07eb094c61c100324fd3b47f193fc5818641f15aaada827d60b51d2124d965f736a6a59b7c26728a1c426808465970faf98dbd32fb7b8c0a8ebd990a8af4a7ddf1eb90b9df249634ba433b609895e395e8e744a2e2411818ef17fc74970268d476e472e16b49625ead166d3d0d9b19d684db695a27f99c32656cddf13c323ed45bf77634b8ce50c1de62e4dc1cc36b61d48e4bc15adb458f9bd47bf9d8edb874b0d7d1b23b682e9354e3177bf4fd671e74cf36ae5dcd4e2ca90b3a0ba0d1f1994fa3c2e8aa1cf7083501fafb0bdaa9da695d0f9ea7b1a23e8499babd7de48f62af387828a5141f7468e969502767c6c3c18da622697d545790001f7a10087e1a263730455cd2140b477e565b1500c752f1a229c3dabb4d0a899b5ae177a013cba4968ea227024751ff17421e53ac565e78a56938391b2a6676eb012cb66232be62e2e07c3201a4b8ac821daf0bc97cc4f4fa4b301a69d65c89a99127d44e500c1f1e0e2f88bc7633b1f372f9e3c88f97442d9d996726d8c1b017418f361b52fcb56f3a75376b1912cd67a1328e7c2e7bea3f8cf98d2abf80dffcd5061e4c255be6a8177db3f98ba93545555c3718950122a04e5da015df57a764ad99add9e7ff8fa3010d297a41bc83994f6c6edf436a4a3e21bad4d2736274461edd3e2e2d30a5c80242979ede751cb4069ba211c07a75d115c6626e8c60f37023f02b3f93572a8d8923a7d4925d55d0623ad4f7537e5794806858748df4a598e12b382c97abb4cbabd5720056ca45d1672460fe42247b4bff62d693a5400692381307c91d26d95e0b58a532574852adb7eff58acfa0adfc011491dfaff6f225f7df3e4ea71b9d6f7bf1e503049fc51407472d78ffdd17a2f1a8c529ee78a7d5b5dfcdeff3613b81ac8ed86c9f337a8c0aee5d420ffccfd0b4ced3cbe2ce5dc9deeb321dfaf273a042b5ac7e60c4e224cc99c46fbb14cfa43fda7241e0ba9a2b2e3755e558fda8b9c85a775bfbabb3803270b289d30c12db7be702551fff9675fb6663cf5fb41af648f2e7beab3f732ae21c41d2b72e1f8e2abd6514728ea5b93ad7d512f8cd3855303ad001371e7db0f72a2ac335431ad9bf1e0de025c47c2ab19aaa3eee471712562dd801e42881a20ad174c4473dc1bbe65ab9ec320a75f4131f2902f19de65f87abd3a61c1cdb3b92910f6c9242a18d1003b01d3be5f4913a6f604535934b5b66abfd63534e92f611a69a6e72e677a1aa35762d54abbd1e617607608c043055cd65b80d41b37f54b562ff4d3b7521d247334435bbfe03aa8df550f8589d2a2034b2a3510c359d7d083807cd4fa666109e22b36d34238ee7c9994b268c56c6bf12e103c47810056b3c5ff876dc19c653560c57b57d84fd186e6c5b0b990d476a9f75b2c9377a10741548713ff4577705d2f8c367bacba4e23bfd743421b35b30fa173d6dd1ec061cd1115a0987412b3b150dc3dc321f63f47bf0668f29096c624b39c0824c59b229484f1ca6bff5dbaf9b543e68d138e3553a9dcf0e5789cebf6da11170e36974f7fc7e85f6df8d1406466b4bf46b84a1a9ef04f47ba69937584243b73bf1832713463ec70ef4a7e63674ccd6b4ab98d1661b92867dd8b309f224c64cd857b0ff8ab33183aef8196b87aff2667573ac63acd5cb9ed00b3760a1323e6a005e2e07629170afec77c810c3c982156393cd7b435af6b5fa50aa4377d6f3625a994b4e2a203e49d66b4239134b082da09ab72816a6e808ab969f64bc922722153c618b14475535fcbb4e57ae1350d76a79c6b1763f51044bc306948e9eb114bcbd69799c56aa6916c1e38c3ff036c5c73944f5e86c088d2adc53b7d62e86607838e2d07e0be3244faeb91d433ed04025686f57dd4ea9436e84b6ff41914f0d13ab066fee32556b8ab568992cffe4ea2f529289b8197ac4fb3050a5fe323a908e7b503eea70691f74505b4c5f15203db37b14d20d12e42468bb49275cf109b537b9d378dc391608016ca8270c436f54d3ca5d4c5ec30c1b4266987a9943c720e26b19d8f0bc3904abe3cfbbdbc591990d6d4afa25bf9b1722fb76590f48f3e46fcec17a84732ac60f5c645e3378f4ef274f0f5064a79ec080338a77ec34bfd5061f985afee14ac853687c2418fc3783f22327122ca3f8e3ada64cb5f5d753ecf2b8b05dbef7720228e5e65c224ade53509df6133e0e168087998362acb9f65d5143da4357be2ac647184b879c4cefe14d233839e7f40162d2d4d4db7339d23ce8617ac4f146c7660d3059a87e7428afe6cdcad6ae5995cba985921198351de20b990236e7b4611806476464f80df502b7b91ee43f61a25e318fa8f4dc3ed606348ae14cf6e0bfc0b13fa76ca07acd626c334f6ee079cc09d593bb691464a863345bc5c7a0949ee74a69f0fbdb252f128ab92a4a87ef94728e1e13e8c5c44831f9294b696956488b291115f0fc44a0ac3cbb3a80ff56e75cc75ed1afc797b21d7fe9ebab52f231461098930aa310dcb4aa96825ed616f578ed60e20fd1cad580c052bcab4ff3a63b8a1938f80bcc5b8ae308263666e8f035ded467ccf115e683bc99942f958235138b253252cc11b4ba30f44be3e8cdd1cff997295a3a51ad69c63734e71bec8a3fb1a8ae0a1fd98b033b6996a9d4e06767259251abf4b11cbeb8bbc421f0541bec674e83cc1b19efeb9ac8d1833fa8b2bf6f6d54478cfe258c81527cc2dd0027c81654ed799cd0a71544a70acc94cf1942389ec39b2aad76fe26abf836996f1cc3eee0c67e6bb267f265ba0f3e70a154e7f9f1baf8859531c2f541c50892e88761ca8d02b09023cb2be1391f27d58dcbab340a088e0c2d6c725672a7842563e8cd54af459c23ca2fcb94c57d8dc0d22bce81753bfb9508b1fbf81ab5bbc4177e65a284dc8bbdc1d167caa101fba5cfa7f660eff0ccf95bb6e382de3c8cebb03cca26dbb3de3fed2b1124318c1bb3a7340e7a075c81ab67c5a90221c3625feb8a87ee6bd4a09d38e0594a9c34f546d0812531bbfe6c8a8c84b52d14dd58637e33067a8cb655d09a48796575bc5675933873f5ba26ca3f7c494b86b000bb430c1b15e4e21602e8751e664b6bcf30e045bee85e0249171471ee3958082babe357ad3100a2c312a7a598c52f22f40b653b8eae562e3096fc7b26ec4ccf9a4e8ed1175c2288a2685cc7358b95f03a4e8e82d5a951a67ab7e57624401234b9d72c82d881e28ac79e9abf4a348487d87a050f15581972e105ac9feb20c0269cc7ad37444b6ff6f559b3c835eb9970a4de5bdb69f45425c68f044de99c604bf8b0053653450ee735775e467f7da017afea3139c35b5fcbd3132e57c3d60a097631da88a29780744dafa132d05d60b621f1bdfbccfb9e7a63b16a6a11b2da40d638e2358d5449a37930005561f3b631d6b51a8b79f03056c1e6c531927fdcf9ce04fa39ec0a20e2e1bc54a6a6fe7b7aab419c7ff20122659cb22c4e012c98b9049f398770cae1ad89054ff81037abe844d7b9ad16db6ca0e512b9b27b6284914a9cf9bd18962614bd0d46f4e515a2d88337f3a50fafe5ff6c000419b99478a2a36171c075ecb987026b581948edcb46c4834f004dede945232ce9abf415c14284c27c0de51a10c50bdb21ff6b6dfbf3494cbf45af399439790a348619ffc8a25a6087fffe7a3f95192d84879157916a42f4ccaccb77a97fa1b8bb3371b8aef4e744ad2cfa1079acbb9f8de886d7aa58785ca42bfe271c5e34d1c364fe6e53de77dc08e8cf8b4661674849cdcb97ecbc5415728436762e82cfa563a717c7a1660f81076c6529069e990149b10798c883fbb7a79edc818b149156b92c865a052b26f823cab6ae696da11a73094c7c43fe8ab7686bd084c71d935293ba4efe39e3c24667c8f1ed4c85991f35d4e7398f14852e5422d23b4d5e2cb57950c4d3a47dc378e67fc5af0459f4b0d7ee4aef773a2f49a7e5f3c7ab23dad0834666735c49eea80c5d99ef44f5a664c37c49610c47b1077ba9109112050c2c7d5cf8c97c061a6faa7b499bfc0564d291a0ec11ed92df670b3a81d5ba15896d57370bffc20ed3fdad960e0d895eb6f8968200594b57d4aca5338b9fbaeb244deb8a853058f39589d15c50efcae0fe90192e6c2fd2127f21a5c3192d1cb14e68872a2922fe286983b7ddd975e2b2b7fe5da4404a6d5cee91966413152584f140b2c884c7770c1aefd71b4a2014d0d311da53d074113ebaf1c71fc031ab23eb1c95987cb137962a502b378415703e9081503508cb9556c16ae8e29a18a09b3da4cc6fc167ef33d3a1158a878b63f4a1a810f572575623e57ccefdff93bb476de832422de5077ffa7f6db7c0db376087ba5abc65447d05b6d3d2bfb5b6d1c4c5462adab5af6b7639396edf3e078895a281f389d0b019bd72403343a561e55270e9d83ccd7a3ab262e791bd1230d7719fdd5fcd2c17fdb795c1827efa57422bb8f002b788bafd1bac469e387640d10d977559d6be8cd23566cc500040f7c09a18dfe57f6deefa52ec05eb9397bbcef535732418390d6550ce46ef2a4f9506c25aa51033fa0b3ed8b95b5c6cd8d2d73078231279732b1e56877d20b37b9b80b3b62e0353fd63559fd8629991095c2b0b438923a4c7447bba5a45c2bd006fa21e8812e906ece193ff3a6e96441213c4ceb89c64ce655beb2993d98d056dabf71dbbb610edc030b0dc9a4a3df030830f2e816e012ccd6e6b5f93a649016b7cdd3bd8d0914b8570be1b4384e0eec3667772394878222bcc8e7823bdbd29ebcf2425798df83b5a44292497e6d9c5738ab5886e8e16a6e7ae9657c1757588393c354d3a00aae1edf366c8a989603e1dec1fb13b7150c91bff81c0de1156424303c4d19dba51cc39f1b3f37373a4f115b61735e816d6159e26d73df46c9e40ae52ea0ae15032f038b5c945ba17748a1fcf91ace577bae24e27db215c5be00294ef8be921243c67143f782c1367aee2e9b276790be4ee25736959b81d6a761d87f5a1f4249ee36785b346f6c76ce156309e064a7dfb7068caa8124732d1b4688973d72de7f7ef599e8aca58b142994149100c2a91283efab5502b3ef7ac388bf6a89f3fbba42eb7d190e73821d48f6c6b6d1cfb714fef0c46af89a8717446bce6a6700b45d4297f543fc1258bdc5f1741533ad8c65d36458158fb0a4163251dd238bcbd107960a243f23164eaefc4fae2f5cf3f65f66e09adca50b726f2f1053e5f4fd8d239259f8c9069bed7fa9b297fedfa4977c6ebea8dfe0e790a308cf0a78ebc6d9c261a374f10efecd2ab9bf049a6f926d2da2cda687b4f804333b71d858edba45e394e9797a90973a702b0dc25f08773b517eb4c9806a9034c6ffa8936b208b8778f910f8193e42ca6f4dc0730dcb4274a862eab48c6ad66db98c6ea0390d7d518942ecaf5c1905c37b8b7bb7165ff8b5484211a51eba5bf9e946fd6180d88cbe4712c352c7fef4f80aba757b14f2dc530eb9984c1ff38db6c333b9180292a5e5268a1c53d090a87b5cb5b5201dad54c5097429abcc44ca6bf6de97da0fa83ba590e73c6df29185f9a096deaf50548962c4c89192247e87c4a481a7aad8c8e743986234b89b4a43132265e249107e78c8476e33a81218266bc77eee1d1c92ab642a491e39dcda24c6ff8412a4817a27e06d5cccb8bd7b6a6761cd415ef3fc3a67a29b72263ea171649ad4a4258f7a7524858af4fbd00d908439b105dea1064eb1e03f267ed95ed675d39f03dd557ae8a9320dfe0d763b3073b5b357e92610c2dd97aa0b2b34be15b174559321eab6b149ef57956b29d289c939117769615646bcb21a07f2aab7162ed6201ebd5490e53a766a64bd89c388ed43fed99b0c01af16cc0dad532368d1ab8d12a3d347f90afb3db8dab5e4e6eeb8988e4df79d122228682a5da219f8522e9ae56fedd972cca953ce7d5f6c040c8a92be919d4c7fbde8eb3bf9a8774cd71baf0ccdd60a6e2d99d58fdba60d5393ad27744d110a778226df2b4a9fdc804f3cd49ad035f133a63d00aecb7f71cc174aa04c34fa52b7b6be979a184f75e0af708058cf9e04635103db3d8faef5d05f301ac62795e76bf21523623fe25cf49de875524e661dee368036eb27d60b5b4a4899d4b204a378227dbe299ee2bfa36392a82408599aa66ad1d5499da2f2443af9184decfcee92a26a3f9e0e5579924260e65c32a5a5e154e1bd6289e63cc95c17c3a2ce093d8664ec1e75b66eb6dcdc7eb1b44a479c01b898621aba8235b30d19c6155ca0474193e01cdcafd7cad2cc0303e2ff253af47580ea925091da2b764717d835d77478fe5a0b4b145b004d6d6a2babdc409c0cfc7244ab870f09e7f6f41bcc56fab49757b108f1e64e6008dec80c273a75e7736ba7a2c034f62ef6b3182e1719e147710fd8d14ac41d35a241904f40d0a4f67fed37bdd0821862e9b535538b36439e023dc52b3f55c7b6fdb9d63ed9cbcf14c8070b1da14720cca99836bb0e283fe963b2609d903182dde877c3c08ba82f829b1fd6f780a8f5c393390ff0fe95528066ccd4583429d4b410a1e0f6b035395d5254a3407885483ca9d269d817b05b2e6d3463a2ec365f985d5839d218c3bdfbf6370dfecf0c03391570656bcf6d03bf8a2ec6dfed02e3016f9c09799a900fa42466b17914b10368c3e2e6b9ec34d150a0cdd127a7b50203e7b6b7fcb08d207c93c0f2d67c18fd50e29520c47dc83b64328f269d6a80efdb31726bc2c70f8af50adc55830c279cb44f309004bce19f9d652b5541637f73ec309ef430e71b8f15687bf333c96a3e147559aced46d4936cc6d41adc213a99e5179f65546544b7d54a190eacf198c3a20e1e7bbce6c8e9e21540b278e08c6809949e6dac5cec2c518b0ebab3ed72c2b2bc9e6a81638fb9399d63432a0abaf0e9a1a5b3639502f1f59fb020d2d7451808fe97c38df01319c9b5febf2e11d384b0ad763fb2d84c48c732424a513c17dade7253e2c00512e3353681de8e151e19e9ca3770307ec76919bca6d13d3d592a976931d1d3fdb86dbfe4cfd1e21c2c581132729b737cfcbee89a5b33b839df1c11fb987124547941fca37567701f8eb8fe8dbf4ecaf7b780872da878e8a333c4e509be529c0ea88bda9eaad5a762dc73078bb9c6729af55d3f96bf278934a82a69a66227dcc93f2a2773594a01e6860513e891f4fdcafdeb4342320b3475583ac39c026d4de7f52641b68099418900e3dd00066f5f72ba76ef9720719b73dac505f536b3bc745bc7f05d6c8eae09b864f3d2e44952b17ae3b06456819071c1813dfe621da23662fc3965a8615a7a5f0e4b65df99f143915d1dfb374f91afd4a440bdcc87c347d6e72ee54734925a8c71f985d2e123a59ec417fda2c6668d5ecbfe266cb3c2112d1a5fd2332620d3c4b772eac5c3949a92fa2a9631b49b8d0cba57ea86108045fdda9f12bf1d7570b40c3af0570559aed87cbfbe710b278549ff0acc4d8806791be262fae50c9f264ddcbc6a7ee49fc2eeeaa1988223511fda4048a6d027d757bfe55539d617f7f94334a51d9e13932a80aab1d0ea3151c452ff705b8b24e204a6d1d4a948d22714108af19bb9618d877ac4da250f812430e42e5395a8eedae4e1c2b61ff35cd1d83255912768a6b2c511306f6f64f392e6bdca45e155a868e1aaa49b32ac1efc309611402fa1740b979e2ec8dfe810625d65369d593a24ba313e857ad9dbb74d72143675436ffcba8c22e4719775064c0e7b11fbb941b26fb3ab041f6b9245aef148256c4b23341e160754c74e61b8584f68e5d7dd8d936ffc2cd5dea504aac3747f496dc25239b3b65a10981d1de926654590e662734b2e7f83140336c0af40db6f2527de057d42c7934b5a470ae86eba528cf0500b5112c8310aa3beb2756a96d0c2d1645db049deb3f35433e48e0a89ec1f788908bab68be1196b83a9044b2b19ab44df128963e89d5aa206d5d87050cd59474e792f123d17a28dac1d9e24aa4ff7c15c407e81495fc86b4ffdfc82c2f1dcb71f9376e4ca1bd29405d8258f92575244ce8160be9954d0ae661fe254736c26307e96d0be3fdc82fb7e319eb7af2764d6c178a42ac61fadc168572ae3cab2dc4d5abd57b825b2e2648b5eff6a87e63f4935c324cea25a7c8b9634d2e39eb8a62bac9bebd29c60c98e23a56553ce48785e238141ccb5cd2ee087365efcf122d926c79f0f77613f1eed2b5b58306049119491338e39b9dcb52f6faead1ec86c3e0f12ec3131ced7f5f091841b587fc8500225ab7a65d9571acf9dd9bb6ef89b4d021e25ad9956469c506b4e63a291cfcefda33ed3575abfea431c4c46257a3e4559abbd1ded7254bf71606027045641104fdd13dc0042773aae02e45e7baa6cd830fc661449ad132dc6762cc84faea3f2c7adf774acbf46827e570d8a11242e7eeec3af339e5507a2dcab5f296deb6224bc6628cd9faf6d5fbfced5e39de6292a816540886efdf41a0a83839464904225d678696b17ae1266072ab849b6b448eeb43696d12d63011a9955df3bf60ca23e7b9e0ddc9cdd0925a680ac08d7dece395865f50760de20caefc2237dae7c27b0c71b3f78961a085d0760f81abdc0ceafccf4b3b90a29b66c893f9abd536b25ece9c21209944c8aab5573a7102db3268205ce3e6b136cf3161c4e4a7dc2f2923fd31a9943a9a77e4b1fc776532e1358bee690518ee206a250349f015aeb83a26cdfe3a753b3a715e54e61e0ffc0a351ca8241c0739cfca65e55d60fe43e2d0d48064089a0b23489a72877bdef4573f377ac81315572d60a317ddc7e8a740de3f0a6dc5b2c95097e77215f91f66ceb7117d816cf731ddf26e553b06b6658963b6b6b4e221d160894be58ccd9df0bfe554d48b6a8d4ecec5d53939662cd56756dc5a9a70547bd6231fb4502c3bc97c9fa56f7d5f8220b0eebc2bf5d95924020bf6ed8550ecd6e342809be98dd0a64fccc1108036d6ac4bc6890a372ace5f5126de0769380dd8945e6d936cecebf0d20be611a18c010fce5dfb99aaf78bdc1bcc9274101104b839c98568662abadbdd81cbd3bf7ef567be5145d4c3305ec5af8d317cbea561f0ad4b8c4c03f0a350f9e8cd4e95977703cdfb2f9ef56e04c34fd7585c6cb7a4b3fa5f22a52fabf08acfcd081f12499fde5c979832c030713d6682b702adbe66b6b444e6ac868530210c5ee6073f82f9e4b1d1b5ee3eabd33314e83c33f5b1843b5f4f0da180e6254b58f8ae77c8c7cb62e0539f98726f69b312222bb0897b8c983555d7a1b7bf2f675f45652d4770da2aa34fcd15e7f979bc8a2be24704e31601828aadeade96efa83a476f57589b30c5efb7fea527a2c0e3dee030536ffecb5355dc7bc3996ff164cf9fb39a370b2ae1ce2a1dddbb95215fc0822b7c5a281d5997588117a0db044ef23a81d4dabe144452e0a2bb963ed251c823d22fc3f76597a00fbff63852b889c534423bccdedc59b6ff40848369f5c674e3978725b290b65eaa6bea099a6c51439830c5cb9124d66c2e595b850c8da3b8bc533651e4972d636177e0b31cead63b2a4db09c099ccc5777261786fedd7fc0ab1e596241d1209e7d239dc3d89e900d610e570e165f6c2c5f591bd1e65fefbfef937c3ca989d05bf494b920bc469b9cd61aea26afe31a8917a4e1a59744130e0ba1be5de307d7e906c2801d2fb37170a204b12ecf1ca44f7aecc5dc9e93874ad03a693e23388723537001bd72dd44e7698d604324b9f854203f946c95b7579e0622536c21cb8fbd610bb8cfb4de3c5c1482c2c248e8de3322bf05d4b3c04b2fd55ff8b19a01b2a680076e438e252d3cd4869273533e3c366f2be73ee951dde26684ca46284afc86cd8be5a0a7f4b924d43415c65a886a20d97d3c6b88f635765e5687669504186717ff5a8a3eafb22bfebb3163a716fe46e1eece8ae4cf87eb9a09f9a5475a35e5808e8bf1396c19b3c83e8e9c0b2ad62132fc89bb19294fc62dda1cbf69d6b35aae4ce25fe2f941054ad6a8a8df7545d7d7c4df46d89e8812048800cbfc599cce9fca5bd16029c1ca54ca315132ec2e5752658f5ffa643148915421b49d756b49198ae6c5fa72cf6a09e5d10fe9306c71427eafcd66d2e74971fee6b075242942545e751eb241c6be3d3be554d2002a19116432e5fa3fb8053c4883342aee755cc16efbac00f8b6e26fb4207f171b912e1b06fba0db86daca6f1aaf6341d120d55734bf344bde69031f6f414e53ade427cfb8fb61062a85aacc5deaa73f27cbb6131c9adc9bedfe4144e837a3c6d999f6a140577e791ad96278dc8000f0476c36715fae78a64f6d829056d8ecb4189b557e1284f1dbaca09b8897aecc3b2bb85ad38fe12088391fa8159b19aa63ba4926da15ce55542c88b6d344efd638566f5f06694ccdf39fceac3601997a3b3541f7afefc1ed50b59a1ae33d7dd288ec83602c0f0bc7f393828e5bcaf0b9e0f9d2c3e84c46d0ac50d5a9b4cf7ca645d46511ded7bca8329df6fe3958177605cd25076fc2cd9d696087f8da06ed26ac13764cfcdd64f2872ea2b8db46303bd6213fa3fd74933c44ed76f175b6c84223ddd588aecfc8e8f85493c2f85689819da608c81378d3d234e850d638e1cf99e90fa2acc50438db8bad97d7f9a360454272c06498f5df6b362f35070288aff310405180d51f3ae48ca788aa24563875f5d0ec1c0d5fbe8fdb17e927054ac330b33f90791c8198575128386381b36d0d60f867429a699edf43e1050efba74b36be3d6eba4e689fbadbf9fc16776af230f79e72457c9533a99292ddd86a481f240c8f2c46649df1d12c03bf04184f9f2992cf2a35f88311b16c9a563e149e762c7d28fe7563da3486cc2490f58c249ba9b4235a6ab1e5f21bea5024288d7dad045c76f5e9023b83f8fe12109c9c2d4b5c38f7578897e31dfacbc8b8e7d935499771741db93500fc36998c66148efff43e4d7af3947f96a7ad1787bc169f155fcd8004b13d5a80c76030f4614a335df99ed60a87154b032b3378711b2850416f2b84911d5427d56a6591abf2937dbd86a266ff166111d46460e893f69be719a8ca06a1296b3024fa5f6aa9a544537b45828e87cd449142d862bbd349557342ccb95052a1d27ae21401b4d530e8ea0263458475ab389e7088a1b277268065c7469d08621b990da75d07a0124454cd99a17ea99617690012473dd0bd5b9356134d743670c4b39e5e147144445a7b18d9622bffe9d3982085c0f00be73377b1816dcfd5623f17a8230b33fb1b264aa7aa464a70672648e2d506b4a9fe3751f87cb58077f9c62ba57c935fe4c0e9f96269d47cb7cf889bfbc2456073153c13c7dd359815892e61931f3da0b1519ca19a373f2f5e227f57de56751ff6eb85e98a99504eafe2d5d7442839464e027739d49ec3c397e2de24b3e9eb1ac401d1ac57a55b808a6aabd46ab29bdedbf5228a248bfe9da91e2d9e427eb7a2378a493f1158c280f6977103aedea98f8007771a6376042eb77548504713cdb3653e959629984c64d6496bc5a716845b402478df7b0fa02775da7cf135195a511a23a4726e8706f7d8e9b206f66207fc05384fa0608b17bac04a7809d108c91014958d1ac6d9c025ed1694113c06a94b4754c9228bc8230e19549515d003c6d008599d2b3e0f3fd9c5555a1a34c9708733ddca8196db9eb4d145d7251e7049d45aed38056ee5174bebef4e936967033d94de5fd10e821b2521359666691be05476e5313a5d9c3fa3c3457754a276aef0ed6cc5c8f035d469cc0057df351c489de4fe245d630b2df170f33f87ef4c0bf16f84462ae6636f0fa549f70eaa11f3e69c40f28a30b06558ba7b40f137784249c48f4ac3827d365f7e5e401ccd7f865893f4b0888805fb639c0299a289b46c929c175e4621130e088e2d1deb6cf4cf79a1ca92c06617f794a6acc75473b3b6d7f370ace7b513724ae72d87976d3643d784b4f50e1f6289ffc722d0612247a6c64a921a62ebd8730052672785b4a6420f9d4fc493648deb4c7703aa88d3e1adef9f27f14a097e3dfedc2ae07fd15835b5c3ece9858bb569c17a36c6aeb5d7404440875cb14091c3caf3b725bf301d5756a1122bfe823f4503757c3c26bcb2314fd853b0a31eae940b9ee2a9fb915e80d1efd47fd1a89b4114769bb5852c039ccf8a761551a406e65f0facceb423a72f4c2896e50b5a86a41b005fcbbecb10d5da831faa90cd4af5cde15f412c4f7561e2341789458984772e863aae3e60edb43281034bc203694a99571d6e89004b3881ca51116b8998b943e2e1d68da9f91427f15e579725e7c5dad5667ac8f638e686c519161ef3e8df5cad93625262dc08dd5e58a4247171c60d6468b42cda6c96e65fb4ee3a58ab0b5013f4461c150807fd8f2e93f5cdcdebec7752313e4389fc40f4f6bbe8c363a569ca1d249fd3c71b1ebd3d72405b8fc4f5b7ed24d342f7ad5a1d83345694ff1f80e848a4faa86c7976fa7b9ee536e88f930ff73a587783f0469ea412bdb179dd7a06e184b8422502172ac3c93be5579490941f9b7b46fb3614921eeca0e3f8f5719ca86fbff93c86e2f76fb8e0d80f346ffe621943866268484f1d4cbe84a9dde0576e61a5c98d2a1b9298f12f32181d778d7e22152b7167259db1bfbe8ac73f25d534c3e880a66bd732c845d63b4dfe1487576cde6597224cc4849e85f4a1f9fb2e4a9d2323b41e98be16d2789c701cfc0558f36a1f6e9fd20db73a617d2c8345766795800bc9a4bc3d95673a4c7c090bc4743b953dae39bbf54a7654f22ff4d5c7eeb0f9bca52b5e1068899ee2442fd7d640ccd282c7fe34838b2b864593885c0746715b1e68073dced5f0a1fdfd68c0ac72808eda3860074fc0d708d4c114b44f067108907c2d66a4bfbd2f700fe04a5da4d5a68ab41cb8cff1bc857b2d81214194f43118ba2912c41823403aa1101970bce4d29a21629d4225fcf0e47dc88fac20c73ebc8c53bc83f8fcf682fe67024c6c1809ef1fc7e891da3ca5f7dd262847ed527ef5af8b6671a3bbc1187e07e59f79046b495a06f545e9d3b699e22a22420c90432d3d04a4bea727e148ddd87aea9cb9b2ccfa0f5923262c7efab4372b29799bd2d9d57f7a5526be03d0c5cb70e116e556c1183975c511d914bd4364edeca84f9f7b51f188eda9aa5aa371d634ab01ba87f56b56f87100af7431435f2d88e27d7fc26ae71276f2e572df818845494ca2d4b800e498e9b6b6c22c572583c7dcff9d3b0fdd1c69b5e04e9f9112f5d2d361ac9a22e266ae6c31431f2e9ddf07f83f12593e2ae914723fb753fceb94801ca47769b5a5434942b5ea1a1da25b0e30472ae114f9ce77b0f9b3bc0e006a0237e8806f88a882d3b7541f982d67b903c9a7dada5dadd4a04d413772ab2276931ca633b964e781beed20153fda2a8d5ea8d6f4b33d546f17e47b7bc14935ea5f1ffab7bb52cb1bf819405c46631e0117edc439284573bf5a9da05ed5557e5025122dde685fcb41e9aa958d4f926d2f574f4c9f8c1239129f6feedae4702f7b658ee2af56e0e54ccec34d7e1b582ad28d58ce42585415d124879846dfd4ba0b6f774dbe3dfded28a01dc365e164cc6820d923c920620656ee8968b47073f455ea6ebf44685a03edc3c1e3fc46163c1147db97d17ff1278067dc9dda47dfe5ba4c4735a4a0cf9996b3123a08af7b6e3be9351206ce2eb712510449c9ce1bffbd770b5b55eab707a3add4828584c3ca99e8ee251110c7e5f0d4f32b5454233cedbd9317ac333fda4e9b3b09f43b978ec431dceb5b11bf524b7a815efa808e4c4c7a6bf84d73cf4689913fd0bc9f395c28b8aa981c9c6039e149d86e096d3f370c1e78e4ca0db77dd5ebb62c81f0d022c720fd9555063d7b6c7fbe4a75074702b2b2646d6c2701e5e2cad726d766594f5e1ccb40abaf10e830f53174a66a3a4467d465c953bf9cb3a70637d2c8c252ae4f89b9c7fd9f0cd04119d805002780f59e4686441c104c2c1bbed2a9045515b66df2d0e608cc38de106c12d495cf4f588908adf559064d2c15f6c38eae0d9d4d56460d997c5ef86ddca34c3d27467f77d10c04b267b0889880177a516877fa9606183ee7e3c6213eb9d5f7e7390ca235a5fde7138fb8a4f4bafe1208f923c31e96f7edc0fb6a351684eb9039580c4d1cf7d7e7d21d5c59a9aed398b00e6c28dace54528f7951989e145ff36440914e6f6f809472a6086fc152eaaa54a8771243765f79cedd53b0e0ea2c535c044fd39ea6932a5a6775a56cacbf326c16d406c3038c888ef5dc1a68f5f20fb1f7d47f68921028f1543a39ff8f43609101bb119475d8cddfa4b403a689471dead38e07ba17545b8f3d100872a2547f25500cb78a072c072ff088737836c383c5a8be79fde47386474d18c9fd0b3765ecd51048cb8366342a1339267a7b8751775adece4a9d30c9c8ae1a86f42a0e30b1eb30c2ef5520c1e38c4a13d504f059acee201712fa8d0e0a71e527ffdfe01dd3bdb401fc08cb871598bc5df3589431861887390fc5bfc079e7b9faffd84c33327fcdad614244d2fc9d7ee2c1795c2819b3646f32d9d657227eb81ad161289154d50f9c5516bc5d912228fe548ef50a4842bce66b75709c3b1614470171be088cca7ae0d5522df0731e71518a59b981dfd8b78bba9a2a8a411b04c5976a676634fce3d2a4c0fef37111cc71464ae40663ae285f29c207dd755aaf85e4e33417671defd6239f5b11f3f3bbea9a396a61eb6bc7be96208f3a02924b06bafa62e7f564b394ed86cd63bda0362f23a359df769305f9a821770d98d5b91f268f04d8510a44dc29f14dbaf06c428fdb85feac3e1afbd1ca9743cc173453e80d2f7bf41ca38865c6933ed23413a41a781ecad537da7270e99ae896d4d645235964cb459dc11abcbeb95703b6d75fa5097631246899b1e80d370b71b97d2a2f18963db6bd8c46993b5df1fff6e46c19b0949be08fe65c89b95ae77bf63dd9072ac53d67d6cfe8f2c6eefb5a2ecb2e35a89b42c512bc653f6e2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Dydは、パスワードを入力するように求められます</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本来不想写的，但有些想总结的</summary>
    
    
    
    <category term="test" scheme="https://dyd-true.github.io/categories/test/"/>
    
    
    <category term="暴力" scheme="https://dyd-true.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="test" scheme="https://dyd-true.github.io/tags/test/"/>
    
    <category term="线段树" scheme="https://dyd-true.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="网络流" scheme="https://dyd-true.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="状态压缩" scheme="https://dyd-true.github.io/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>光速幂</title>
    <link href="https://dyd-true.github.io/2022/01/22/%E5%85%89%E9%80%9F%E5%B9%82/"/>
    <id>https://dyd-true.github.io/2022/01/22/%E5%85%89%E9%80%9F%E5%B9%82/</id>
    <published>2022-01-22T08:37:22.000Z</published>
    <updated>2022-01-22T09:07:45.057Z</updated>
    
    <content type="html"><![CDATA[<p> 一个小知识点</p><span id="more"></span><h1 id="光速幂"><a href="#光速幂" class="headerlink" title="光速幂"></a>光速幂</h1><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>先给个快速幂代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            res = res * x % P;</span><br><span class="line">        x = x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快速幂可以在 $O(\log y)$ 的时间求出 $x^y$ ，且实现简单，是很常用的算法</p><p>但是，在一些黑心出题人看来，还是不够快</p><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>为了有更快的方法，出题人必须给你一些额外的条件：</p><ol><li>模数不变，即多次求 $x^y \pmod p$ 时， $p$ 保证不变，这个一般题目都能满足（其实可以变，但每变一次就要一个 $\sqrt{p}$ ）</li><li>底数不变，即 $x^y \pmod p$ 时， $x$ 不变，这是光速幂最大的限制</li></ol><p>有了如上限制，来看如何把 $O(\log y)$ 的快速幂改为预处理 $O(\sqrt{p})$ ，询问 $O(1)$ 的光速幂，其实很简单</p><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>根据欧拉定理 $x^y \equiv x^{y \mod \varphi(p)} \pmod p$ ，于是可以预处理到 $\varphi(p)$ （为了方便一般处理到 $\sqrt{p}$ ）</p><p>具体地，预处理出 $x^1, x^2, …, x^{\sqrt{p}}$ 和 $x^{2\sqrt{p}}, x^{3\sqrt{x}}, …$ </p><p>然后，对于询问 $x^y$ ，令 $p’ = \sqrt{p}$ ，可以回答 $x^{y \mod p’} * x^{(y / p’) * p’}$ </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BL = (<span class="number">1</span> &lt;&lt; <span class="number">16</span>) + <span class="number">5</span>, B = <span class="built_in">sqrt</span>(P);</span><br><span class="line"><span class="keyword">int</span> qp[BL][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> ph;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phi</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= x; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            x /= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>)</span><br><span class="line">        res = res / x * (x - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ph = <span class="built_in">phi</span>(P);</span><br><span class="line">    qp[<span class="number">0</span>][<span class="number">0</span>] = qp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= B; ++i)</span><br><span class="line">        qp[i][<span class="number">0</span>] = qp[i - <span class="number">1</span>][<span class="number">0</span>] * x % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= B; ++i)</span><br><span class="line">        qp[i][<span class="number">1</span>] = qp[i - <span class="number">1</span>][<span class="number">1</span>] * qp[B][<span class="number">0</span>] % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qqpow</span><span class="params">(<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    y %= ph;</span><br><span class="line">    <span class="keyword">return</span> qp[y % B][<span class="number">0</span>] * qp[y / B][<span class="number">1</span>] % P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 一个小知识点&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>手打int128</title>
    <link href="https://dyd-true.github.io/2022/01/22/%E6%89%8B%E6%89%93int128/"/>
    <id>https://dyd-true.github.io/2022/01/22/%E6%89%8B%E6%89%93int128/</id>
    <published>2022-01-22T08:34:47.000Z</published>
    <updated>2022-01-22T08:36:30.391Z</updated>
    
    <content type="html"><![CDATA[<p> 没准有用？</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">int128</span>;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shift</span><span class="params">(int128 &amp; in,deque&lt;<span class="keyword">bool</span>&gt; &amp; de)</span></span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">size_t</span> N&gt;  </span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(bitset&lt;N&gt; <span class="keyword">const</span>&amp; b1,bitset&lt;N&gt; <span class="keyword">const</span>&amp; b2)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">int</span> i=N;  </span><br><span class="line">    <span class="keyword">while</span>( i-- &amp;&amp; b1[i]==b2[i] ) &#123; &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> ((<span class="number">-1</span> == i) ? <span class="literal">false</span> : (b1[i]&lt;b2[i]));  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">int128</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    bitset&lt;128&gt; number;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">int128</span><span class="params">(string str)</span>:number(str)&#123;</span>&#125;  </span><br><span class="line">    <span class="built_in">int128</span>(bitset&lt;<span class="number">128</span>&gt;<span class="keyword">const</span>&amp; b):<span class="built_in">number</span>(b)&#123;&#125;  </span><br><span class="line">    <span class="built_in">int128</span>(<span class="keyword">int</span> a = <span class="number">0</span> , <span class="keyword">int</span> b = <span class="number">0</span> , <span class="keyword">int</span> c = <span class="number">0</span> , <span class="keyword">int</span> d = <span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function">bitset&lt;32&gt; <span class="title">b1</span><span class="params">(a)</span>,<span class="title">b2</span><span class="params">(b)</span>,<span class="title">b3</span><span class="params">(c)</span>,<span class="title">b4</span><span class="params">(d)</span></span>;  </span><br><span class="line">        <span class="keyword">int</span> i, k = <span class="number">128</span>;  </span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">32</span> ; i ; number[--k] = b1[--i]) &#123; &#125;  </span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">32</span> ; i ; number[--k] = b2[--i]) &#123; &#125;  </span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">32</span> ; i ; number[--k] = b3[--i]) &#123; &#125;  </span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">32</span> ; i ; number[--k] = b4[--i]) &#123; &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>[](<span class="keyword">size_t</span> i)<span class="keyword">const</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> number[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">    bitset&lt;128&gt;::reference <span class="keyword">operator</span>[](<span class="keyword">size_t</span> i)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> number[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(int128 <span class="keyword">const</span>&amp; i1,int128 <span class="keyword">const</span>&amp; i2)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> i1.number &lt; i2.number;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">friend</span> int128 <span class="keyword">operator</span>+(int128 <span class="keyword">const</span>&amp; i1,int128 <span class="keyword">const</span>&amp; i2)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(i1 == <span class="number">0</span>)  </span><br><span class="line">            <span class="keyword">return</span> i2;  </span><br><span class="line">        <span class="keyword">if</span>(i2 == <span class="number">0</span>)  </span><br><span class="line">            <span class="keyword">return</span> i1;  </span><br><span class="line">        int128 result;  </span><br><span class="line">        bitset&lt;2&gt; sum;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">128</span> ; ++i)  </span><br><span class="line">        &#123;  </span><br><span class="line">            sum=i1[i]+i2[i]+sum.<span class="built_in">to_ulong</span>();  </span><br><span class="line">            result[i]=sum[<span class="number">0</span>];  </span><br><span class="line">            sum&gt;&gt;=<span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">friend</span> int128 <span class="keyword">operator</span>-(int128 <span class="keyword">const</span>&amp; i1,int128 <span class="keyword">const</span>&amp; i2)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(i2==<span class="number">0</span>)  </span><br><span class="line">            <span class="keyword">return</span> i1;  </span><br><span class="line">  </span><br><span class="line">        int128 result=i1;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">128</span> ; ++i)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(i2[i] == <span class="number">0</span>)   &#123;&#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span>(result[i] == <span class="number">1</span>)  </span><br><span class="line">                    result[i] = <span class="number">0</span>;  </span><br><span class="line">                <span class="keyword">else</span>  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="keyword">int</span> k = i;  </span><br><span class="line">                    <span class="keyword">while</span>(k &lt; <span class="number">128</span> &amp;&amp; result[k] == <span class="number">0</span>)  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        result[k] = <span class="number">1</span>;  </span><br><span class="line">                        ++k;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">if</span>(k != <span class="number">128</span>)  </span><br><span class="line">                        result[k] = <span class="number">0</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">friend</span> int128 <span class="keyword">operator</span>*(int128 <span class="keyword">const</span>&amp; i1,int128 <span class="keyword">const</span>&amp; i2)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(i1==<span class="number">0</span> || i2==<span class="number">0</span>)  </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int128</span>();  </span><br><span class="line">        <span class="keyword">if</span>(i1==<span class="number">1</span>)  </span><br><span class="line">            <span class="keyword">return</span> i2;  </span><br><span class="line">        <span class="keyword">if</span>(i2==<span class="number">1</span>)  </span><br><span class="line">            <span class="keyword">return</span> i1;  </span><br><span class="line">  </span><br><span class="line">        int128 acc=<span class="built_in">int128</span>();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">128</span>;++i)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(i2[i]==<span class="number">1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                acc=acc+(i1&lt;&lt;i);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> acc;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">friend</span> int128 <span class="keyword">operator</span>/(int128 <span class="keyword">const</span>&amp; i1,int128 <span class="keyword">const</span>&amp; i2)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(i1 &lt; i2)  </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int128</span>();  </span><br><span class="line">        deque&lt;<span class="keyword">bool</span>&gt; de;  </span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">127</span> ; i &gt;= <span class="number">0</span> ; --i)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">0</span> &amp;&amp; i1[i] == <span class="number">0</span>)   &#123;&#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                flag = <span class="number">1</span>;  </span><br><span class="line">                de.<span class="built_in">push_back</span>(i1[i]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        int128 div = <span class="built_in">int128</span>();  </span><br><span class="line">        int128 result = <span class="built_in">int128</span>();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">while</span>(!de.<span class="built_in">empty</span>())  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">shift</span>(div,de);  </span><br><span class="line">            <span class="keyword">if</span>(div &lt; i2)  </span><br><span class="line">            &#123;  </span><br><span class="line">                result = result&lt;&lt;<span class="number">1</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                result = (result&lt;&lt;<span class="number">1</span>) + <span class="built_in">int128</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);  </span><br><span class="line">                div = div - i2;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">friend</span> int128 <span class="keyword">operator</span>%(int128 <span class="keyword">const</span>&amp; i1,int128 <span class="keyword">const</span>&amp; i2)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(i1 &lt; i2)  </span><br><span class="line">            <span class="keyword">return</span> i1;  </span><br><span class="line">        deque&lt;<span class="keyword">bool</span>&gt; de;  </span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">127</span> ; i &gt;= <span class="number">0</span> ; --i)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">0</span> &amp;&amp; i1[i] == <span class="number">0</span>)   &#123;&#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                flag = <span class="number">1</span>;  </span><br><span class="line">                de.<span class="built_in">push_back</span>(i1[i]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        int128 div = <span class="built_in">int128</span>();  </span><br><span class="line">        int128 result = <span class="built_in">int128</span>();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">while</span>(!de.<span class="built_in">empty</span>())  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">shift</span>(div,de);  </span><br><span class="line">            <span class="keyword">if</span>(div &lt; i2)  </span><br><span class="line">            &#123;  </span><br><span class="line">                result = result&lt;&lt;<span class="number">1</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                result = (result&lt;&lt;<span class="number">1</span>) + <span class="built_in">int128</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);  </span><br><span class="line">                div = div - i2;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> div;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(int128 <span class="keyword">const</span>&amp; i,<span class="keyword">int</span> <span class="keyword">const</span> k)  </span><br><span class="line">    &#123;  </span><br><span class="line">        bitset&lt;<span class="number">32</span>&gt; <span class="built_in">bb</span>(k);  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> g = <span class="number">0</span> ; g &lt; <span class="number">32</span> ; ++g)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(i[g] != bb[g])  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>=(bitset&lt;<span class="number">128</span>&gt;<span class="keyword">const</span>&amp; b)  </span><br><span class="line">    &#123;  </span><br><span class="line">        number = b;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; o,int128 <span class="keyword">const</span>&amp; i)  </span><br><span class="line">    &#123;  </span><br><span class="line">        o&lt;&lt;i.number;  </span><br><span class="line">        <span class="keyword">return</span> o;  </span><br><span class="line">    &#125;  </span><br><span class="line">    int128 <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">size_t</span> step)<span class="keyword">const</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int128</span>(number&lt;&lt;step);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">to_ulong</span><span class="params">()</span><span class="keyword">const</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> *((<span class="keyword">unsigned</span> <span class="keyword">long</span>*)&amp;number);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ToDecimalStr</span><span class="params">(std::string &amp;str)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        str.<span class="built_in">clear</span>();  </span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;  </span><br><span class="line">        <span class="function">int128 <span class="title">Radix</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>)</span></span>;  </span><br><span class="line">        <span class="keyword">for</span>(int128 num = number; !(num == <span class="number">0</span>); num = num/Radix)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>( <span class="built_in">sprintf</span>(buf, <span class="string">&quot;%d&quot;</span>, ((<span class="keyword">int</span>)(num%Radix).<span class="built_in">to_ulong</span>())) &lt; <span class="number">0</span> )  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            str = buf + str;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(int128 &amp; data, <span class="keyword">bool</span> bEndl = <span class="literal">true</span>)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        string str;  </span><br><span class="line">        <span class="keyword">if</span>( data.<span class="built_in">ToDecimalStr</span>(str) )  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s%s&quot;</span>, str.<span class="built_in">c_str</span>(), (bEndl?<span class="string">&quot;\n&quot;</span>:<span class="string">&quot;&quot;</span>));  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">static</span> int128 <span class="keyword">const</span> one = <span class="built_in">int128</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">size_t</span> N&gt;  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_one</span><span class="params">(bitset&lt;N&gt;&amp; b)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i &lt; N &amp;&amp; b[i] == <span class="number">1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        b[i] = <span class="number">0</span>;  </span><br><span class="line">        ++i;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(i == N)  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    b[i] = <span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_one</span><span class="params">(int128&amp; k)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="number">128</span> &amp;&amp; k[i] == <span class="number">1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        k[i] = <span class="number">0</span>;  </span><br><span class="line">        ++i;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">128</span>)  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    k[i] = <span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shift</span><span class="params">(int128 &amp; in,deque&lt;<span class="keyword">bool</span>&gt; &amp; de)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(de.<span class="built_in">front</span>()==<span class="number">1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        de.<span class="built_in">pop_front</span>();  </span><br><span class="line">        in=(in&lt;&lt;<span class="number">1</span>)+one;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        de.<span class="built_in">pop_front</span>();  </span><br><span class="line">        in=in&lt;&lt;<span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsPrime</span><span class="params">(int128 <span class="keyword">const</span>&amp; number)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(int128 i = <span class="built_in">int128</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>) ; i &lt; number ; <span class="built_in">add_one</span>(i))  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(number%i == <span class="number">0</span>)  </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 没准有用？&lt;/p&gt;</summary>
    
    
    
    <category term="others" scheme="https://dyd-true.github.io/categories/others/"/>
    
    
    <category term="其它" scheme="https://dyd-true.github.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>李超线段树</title>
    <link href="https://dyd-true.github.io/2022/01/22/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>https://dyd-true.github.io/2022/01/22/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91/</id>
    <published>2022-01-22T06:15:30.000Z</published>
    <updated>2022-01-22T14:04:47.260Z</updated>
    
    <content type="html"><![CDATA[<p> 队爷的智慧</p><span id="more"></span><h1 id="李超线段树"><a href="#李超线段树" class="headerlink" title="李超线段树"></a>李超线段树</h1><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>顾名思义，这是由队爷<strong>lc</strong>提出的一种<strong>线段树</strong>，用于维护一下问题：</p><p>在平面直角坐标系下维护两个操作：</p><ol><li>在平面上加入一条线段</li><li>查询直线 $x = k$ 与已有线段交点的纵坐标最大的线段的编号（也可以得到最大值）</li></ol><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>既然是线段树，自然少不了区间和区间信息</p><p>lc线段树以值域为区间，对于区间 $[l, r]$ lc线段树维护的信息是“与直线 $x = mid$ 的交点纵坐标最大的线段”</p><p>询问很好解决了，只要对所有包含 $k$ 的区间上的线段都计算一下即可</p><p>问题在于跟新，如何在加入一条线段后维护出新的最大线段，考虑向节点信息为 $f_1(x) = k_1x + b$ 的区间 $[l, r]$ 插入一条线段 $f_2(x) = k_2x + b$ （保证线段可以覆盖整个区间），分类讨论（下面红色代表 $f_1$ ，蓝色代表 $f_2$ ，绿色代表 $x = mid$ ）：</p><ol><li><p>两条线段有明确的大小关系，即在区间内一条线段完全大于（小于）另一条，直接跟新即可</p><p><img src="https://s2.loli.net/2022/01/22/LdXUlcTYKFEZWSx.png" alt="4"></p></li><li><p> $k_2 &gt; k_1 \wedge f_1(mid) &lt; f_2(mid)$ </p></li></ol><p>   <img src="https://s2.loli.net/2022/01/22/YelSVQyT9BEFvoa.png" alt="1"></p><p>   此时用 $f_2$ 跟新当前区间，并用 $f_1$ 跟新左子树（这里有一个类似标记永久化的思想，右子树的信息可能并不是该有的 $f_2$ ，但询问时我们会用 $f_2$ 的答案而不会取右子树的答案）</p><ol start="3"><li> $k_2 &lt; k_1 \wedge f_1(mid) &lt; f_2(mid)$ </li></ol><p>   <img src="https://s2.loli.net/2022/01/22/8PcIXBwOa5MEjeU.png" alt="2"></p><p>   此时用 $f_2$ 跟新当前区间，并用 $f_1$ 跟新右子树</p><ol start="4"><li> $k_2 &gt; k_1 \wedge f_1(mid) &gt; f_2(mid)$ </li></ol><p>   <img src="https://s2.loli.net/2022/01/22/kEGYLpPmRhszHSo.png" alt="3"></p><p>   此时用 $f_2$ 跟新右子树，当前区间不变</p><ol start="5"><li> $k_2 &lt; k_1 \wedge f_1(mid) &gt; f_2(mid)$ </li></ol><p>   （懒得放图了）</p><p>   此时用 $f_2$ 跟新左子树，当前区间不变</p><p>lc线段树没有 <code>push_up</code> 和 <code>push_down</code> </p><p>有一个需要注意的点是，为了方便求值和交点，我们用斜截式存线段，但垂直于 $x$ 轴的直线没有斜截式</p><p>我们考虑到对于垂直于 $x$ 轴的线段 $(x_0, y_1) \to (x_0, y_2), (y1 \le y2)$ ，在只关注最值的情况下，它等效于一个点 $(x_0, y_2)$ ，而点就可以写成 $y = 0x + y_2, (x_0 \le x \le x_0)$ (就是平行于 $x$ 轴的，长度只有一个点的直线)</p><p>考虑时间：</p><p>询问操作要遍历每一个包含 $k$ 的区间，是 $O(\log n)$ 的，而插入线段操作首先要把这个线段分给若干区间（保证线段一定覆盖区间），这是一个类似区间查询的操作，要 $O(\log n)$  ，而对于每个区间，我们会递归跟新它的儿子，又要一个 $O(\log n)$ 所以插入操作的总时间是 $O(\log^2 n)$ 的</p><p>注意上面的 $n$ 指的是值域</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.luogu.com.cn/problem/P4097">板子？</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DB double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, P1 = <span class="number">39989</span>, P2 = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> DB eps = <span class="number">1e-8</span>, INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> lastans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(DB x, DB y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DB k, b, l, r;</span><br><span class="line">    <span class="function">DB <span class="title">clac</span><span class="params">(DB x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; r || x &lt; l)</span><br><span class="line">            <span class="keyword">return</span> -INF;</span><br><span class="line">        <span class="keyword">return</span> x * k + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; l[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LineTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> l, r, id;</span><br><span class="line">    &#125; tr[P1 &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) tr[(x)].l</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(x) tr[(x)].r</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> id(x) tr[(x)].id</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Mid (tr[u].l + tr[u].r &gt;&gt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> lc (u &lt;&lt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> rc (u &lt;&lt; 1 | 1)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tr[u] = &#123;l, r, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">int</span> mid = Mid;</span><br><span class="line">        <span class="built_in">build</span>(lc, l, mid), <span class="built_in">build</span>(rc, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        DB fa = l[a].<span class="built_in">clac</span>(x), fb = l[b].<span class="built_in">clac</span>(x);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cmp</span>(fa, fb) ? fa &lt; fb : a &gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = Mid;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= <span class="built_in">l</span>(u) &amp;&amp; r &gt;= <span class="built_in">r</span>(u))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//从l18q抄来的优秀打法</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judge</span>(<span class="built_in">id</span>(u), d, mid))</span><br><span class="line">                <span class="built_in">swap</span>(<span class="built_in">id</span>(u), d);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judge</span>(<span class="built_in">id</span>(u), d, <span class="built_in">l</span>(u)))</span><br><span class="line">                <span class="built_in">update</span>(lc, <span class="built_in">l</span>(u), <span class="built_in">r</span>(u), d);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judge</span>(<span class="built_in">id</span>(u), d, <span class="built_in">r</span>(u)))</span><br><span class="line">                <span class="built_in">update</span>(rc, <span class="built_in">l</span>(u), <span class="built_in">r</span>(u), d);</span><br><span class="line">            <span class="keyword">return</span> ; <span class="comment">//记得！</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">            <span class="built_in">update</span>(lc, l, r, d);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid)</span><br><span class="line">            <span class="built_in">update</span>(rc, l, r, d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">l</span>(u) == <span class="built_in">r</span>(u))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">id</span>(u);</span><br><span class="line">        <span class="keyword">int</span> mid = Mid;</span><br><span class="line">        <span class="keyword">int</span> res = (x &lt;= mid ? <span class="built_in">ask</span>(lc, x) : <span class="built_in">ask</span>(rc, x));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(res, <span class="built_in">id</span>(u), x))</span><br><span class="line">            res = <span class="built_in">id</span>(u);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; lt;</span><br><span class="line"><span class="function">Line <span class="title">get_line</span><span class="params">(DB a, DB b, DB c, DB d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">cmp</span>(a, c))</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">max</span>(b, d), a, a&#125;;</span><br><span class="line">    DB _k = (d - b) / (c - a);</span><br><span class="line">    DB _b = b - (a * _k);</span><br><span class="line">    <span class="keyword">return</span> &#123;_k, _b, a, c&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_real</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = (x + lastans - <span class="number">1</span>) % P + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, op, a, b, c, d, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    lt.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">40000</span>);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span> (!op)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">            <span class="built_in">get_real</span>(a, P1);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, lastans = lt.<span class="built_in">ask</span>(<span class="number">1</span>, a));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">            <span class="built_in">get_real</span>(a, P1), <span class="built_in">get_real</span>(b, P2), <span class="built_in">get_real</span>(c, P1), <span class="built_in">get_real</span>(d, P2);</span><br><span class="line">            <span class="keyword">if</span> (a &gt; c)</span><br><span class="line">                <span class="built_in">swap</span>(a, c), <span class="built_in">swap</span>(b, d);</span><br><span class="line">            l[++cnt] = <span class="built_in">get_line</span>(a, b, c, d);</span><br><span class="line">            lt.<span class="built_in">update</span>(<span class="number">1</span>, a, c, cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 队爷的智慧&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数据结构" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="线段树" scheme="https://dyd-true.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>三角剖分</title>
    <link href="https://dyd-true.github.io/2022/01/21/%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86/"/>
    <id>https://dyd-true.github.io/2022/01/21/%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86/</id>
    <published>2022-01-21T12:59:56.000Z</published>
    <updated>2022-01-21T13:52:41.665Z</updated>
    
    <content type="html"><![CDATA[<p> 恨死几何了</p><span id="more"></span><h1 id="三角剖分"><a href="#三角剖分" class="headerlink" title="三角剖分"></a>三角剖分</h1><h2 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h2><p>先思考一个简单问题：</p><p>如何求一个三角形和一个以三角形一顶点位圆心的圆的有向面积交（求并就是面积和减交）？</p><p><img src="https://s2.loli.net/2022/01/21/svTklGA3KHJRo12.png" alt="三角形"></p><p>明显，对于 $\triangle ABC$ 和 $\odot C$ ，分类讨论：</p><ol><li> $A, B, C$ 都在圆内，面积就是 $\triangle ABC$ 面积</li><li>有一个点在圆外（设为 $A$ ），设 $AB$ 交圆于点 $D$ ， $AC$ 交圆于 $E$ ，面积就是扇形 $CDE$ +三角形 $CBD$ </li><li>两个点在圆外且 $AB$ 于 $\odot C$ 相离，设 $BC$ 交圆于点 $D$ ， $AC$ 交圆于 $E$ ，面积就是扇形 $CDE$ </li><li>两个点在圆外且 $AB$ 于 $\odot C$ 相割，设 $BC$ 交圆于点 $D$ ， $AC$ 交圆于 $E$ ， $AB$ 交圆于 $F, G$ ，面积就是扇形 $CDG$ +扇形 $CEF$ +三角形 $CFG$ </li></ol><p>分类讨论即可</p><h2 id="多边形"><a href="#多边形" class="headerlink" title="多边形"></a>多边形</h2><p>现在，如何求多边形和三角形面积交？</p><p>当然是把多边形剖成一个个三角形分别求交了！</p><p><a href="https://www.acwing.com/problem/content/3037/">望远镜</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DB double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> DB eps = <span class="number">1e-8</span>, PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DB x, y;</span><br><span class="line">    Point <span class="keyword">operator</span> - (Point t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x - t.x, y - t.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (Point t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x + t.x, y + t.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    DB <span class="keyword">operator</span> * (Point t) <span class="comment">//叉积</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x * t.y - y * t.x;</span><br><span class="line">    &#125;</span><br><span class="line">    DB <span class="keyword">operator</span> &amp; (Point t) <span class="comment">//点积</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x * t.x + y * t.y;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> * (DB t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x * t, y * t&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> / (DB t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x / t, y / t&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; r;</span><br><span class="line">DB R;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(DB x, DB y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">mo</span><span class="params">(Point x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x &amp; x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">dist</span><span class="params">(Point x, Point y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">mo</span>(y - x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">norm</span><span class="params">(Point x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / <span class="built_in">mo</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">rot</span><span class="params">(Point x, DB th)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;x.x * <span class="built_in">cos</span>(th) + x.y * <span class="built_in">sin</span>(th), -x.x * <span class="built_in">sin</span>(th) + x.y * <span class="built_in">cos</span>(th)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">jiao</span><span class="params">(Point p, Point u, Point q, Point v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DB t = (v * (p - q)) / (u * v);</span><br><span class="line">    <span class="keyword">return</span> p + u * t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_on</span><span class="params">(Point p, Point x, Point y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">cmp</span>((p - x) * (p - y), <span class="number">0</span>) &amp;&amp; <span class="built_in">cmp</span>((p - x) &amp; (p - y), <span class="number">0</span>) &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">cir_jiao_lin</span><span class="params">(Point x, Point y, Point &amp;px, Point &amp;py)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Point e = <span class="built_in">jiao</span>(x, y - x, r, <span class="built_in">rot</span>(y - x, PI / <span class="number">2</span>));</span><br><span class="line">    DB mind = <span class="built_in">dist</span>(r, e);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">is_on</span>(e, x, y))</span><br><span class="line">        mind = <span class="built_in">min</span>(<span class="built_in">dist</span>(r, x), <span class="built_in">dist</span>(r, y));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(R, mind) &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> mind;</span><br><span class="line">    DB len = <span class="built_in">sqrt</span>(R * R - <span class="built_in">dist</span>(r, e) * <span class="built_in">dist</span>(r, e));</span><br><span class="line">    px = e + <span class="built_in">norm</span>(x - y) * len;</span><br><span class="line">    py = e + <span class="built_in">norm</span>(y - x) * len;</span><br><span class="line">    <span class="keyword">return</span> mind;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">sector</span><span class="params">(Point x, Point y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DB angle = <span class="built_in">acos</span>((x &amp; y) / <span class="built_in">mo</span>(x) / <span class="built_in">mo</span>(y));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(x * y, <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        angle = -angle;</span><br><span class="line">    <span class="keyword">return</span> R * R * angle / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">cir_tri_area</span><span class="params">(Point x, Point y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DB dx = <span class="built_in">dist</span>(r, x), dy = <span class="built_in">dist</span>(r, y);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(R, dx) &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">cmp</span>(R, dy) &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x * y / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">cmp</span>(x * y, <span class="number">0</span>)) <span class="comment">//三点共线</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Point px, py;</span><br><span class="line">    DB mind = <span class="built_in">cir_jiao_lin</span>(x, y, px, py);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(R, mind) &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sector</span>(x, y);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(R, dx) &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x * py / <span class="number">2</span> + <span class="built_in">sector</span>(py, y);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(R, dy) &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> px * y / <span class="number">2</span> + <span class="built_in">sector</span>(x, px);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sector</span>(x, px) + px * py / <span class="number">2</span> + <span class="built_in">sector</span>(py, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">work</span><span class="params">(Point x[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DB res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        res += <span class="built_in">cir_tri_area</span>(x[i], x[(i + <span class="number">1</span>) % len]);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    STC Point q[N];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%lf %d&quot;</span>, &amp;R, &amp;n) != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>, &amp;q[i].x, &amp;q[i].y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, <span class="built_in">work</span>(q, n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 恨死几何了&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算几何" scheme="https://dyd-true.github.io/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
    <category term="三角剖分" scheme="https://dyd-true.github.io/tags/%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>旋转卡壳</title>
    <link href="https://dyd-true.github.io/2022/01/21/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/"/>
    <id>https://dyd-true.github.io/2022/01/21/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/</id>
    <published>2022-01-21T10:33:58.000Z</published>
    <updated>2022-01-21T12:30:54.756Z</updated>
    
    <content type="html"><![CDATA[<p> 四个多音字，怎么读啊~</p><span id="more"></span><h1 id="旋转卡壳"><a href="#旋转卡壳" class="headerlink" title="旋转卡壳"></a>旋转卡壳</h1><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>平面上有 $n$ 个点，求平面<strong>最远点对</strong>（即<strong>凸包直径</strong>）</p><p>由该问题也可以得到一个性质：平面最远的点对一定是凸包上的两点</p><p>简证（口胡）：设最远点对有一点 $A$ 不在凸包上，另一点 $B$ 任意，设射线 $BA$ 交凸包于 $C$ ，设 $C$ 在凸包的边 $DE$ 上，有 $AB &lt; CB &lt; DB$ </p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>有了如上性质，我们就只需要考虑凸包上的点</p><p>先取两条平行于 $x$ 轴的直线，让它们“卡”住这个凸包，然后逆时针旋转，时刻保证两线平行，整个过程中两直线距离的最大值就是凸包直径</p><p><img src="https://s2.loli.net/2022/01/21/KJ71iOymbDFwehP.png" alt="卡"></p><p>正确性显然（然鹅图里那个图形好像不是<strong>凸</strong>包）</p><p>但角度是无穷的，我们不可能真的让两条线旋转一周</p><p>考虑用点的距离替代两线之间的距离，我们称把两线“卡”住的两个点称为<strong>对踵点</strong>（即图中绿色的点），明显，对踵点成对出现，且距离最大的一对对踵点之间的距离就是凸包直径</p><p>思考对踵点的改变条件</p><p><img src="https://s2.loli.net/2022/01/21/YJ2crbSzCFjtL3e.png" alt="对踵点"></p><p>如图，当黑线旋转至红线位置时，绿色对踵点变成橙色</p><p>而红线位置就是<strong>凸包的边</strong>！换句话说，只要对凸包每条边，求出离这条边最远的点即可</p><p>那么如何求呢？我们逆时针扫描每条边，明显要求的最远点也将逆时针旋转，可以用一个双指针，面积法判定两个点到一条边的距离，时间是 $O(n)$ 的</p><p>加上求凸包的时间，共是 $O(n \log n)$ 的</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.luogu.com.cn/record/67434458">板子</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DB double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DB x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point &amp;t) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x == t.x ? y &lt; t.y : x &lt; t.x;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> - (Point t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x - t.x, y - t.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    DB <span class="keyword">operator</span> * (Point t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x * t.y - y * t.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> stk[N];</span><br><span class="line"><span class="function">DB <span class="title">area</span><span class="params">(Point x, Point y, Point z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (y - x) * (z - x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">dist</span><span class="params">(Point x, Point y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Point t = x - y;</span><br><span class="line">    <span class="keyword">return</span> t.x * t.x + t.y * t.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">convex</span><span class="params">(Point x[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(x, x + len);</span><br><span class="line">    STC <span class="keyword">bool</span> used[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (top &gt;= <span class="number">2</span> &amp;&amp; <span class="built_in">area</span>(x[stk[top - <span class="number">2</span>]], x[stk[top - <span class="number">1</span>]], x[i]) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">area</span>(x[stk[top - <span class="number">2</span>]], x[stk[top - <span class="number">1</span>]], x[i]) &lt; <span class="number">0</span>)</span><br><span class="line">                used[stk[--top]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                --top;</span><br><span class="line">        stk[top++] = i;</span><br><span class="line">        used[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    used[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (used[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (top &gt;= <span class="number">2</span> &amp;&amp; <span class="built_in">area</span>(x[stk[top - <span class="number">2</span>]], x[stk[top - <span class="number">1</span>]], x[i]) &lt; <span class="number">0</span>)</span><br><span class="line">            --top;</span><br><span class="line">        stk[top++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    --top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">rot_cal</span><span class="params">(Point x[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">convex</span>(x, len);</span><br><span class="line">    <span class="keyword">if</span> (top &lt;= <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dist</span>(x[<span class="number">0</span>], x[len - <span class="number">1</span>]);</span><br><span class="line">    DB res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">2</span>; i &lt; top; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> d = x[stk[i]], e = x[stk[i + <span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">area</span>(d, e, x[stk[j]]) &lt; <span class="built_in">area</span>(d, e, x[stk[j + <span class="number">1</span>]]))</span><br><span class="line">            j = (j + <span class="number">1</span>) % top;</span><br><span class="line">        res = <span class="built_in">max</span>(res, <span class="built_in">max</span>(<span class="built_in">dist</span>(d, x[stk[j]]), <span class="built_in">dist</span>(e, x[stk[j]])));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    Point q[N];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>, &amp;q[i].x, &amp;q[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.0lf\n&quot;</span>, <span class="built_in">rot_cal</span>(q, n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://www.acwing.com/problem/content/2144/">最小矩阵覆盖</a></p><p>思路：</p><p>凭直觉得最小的矩阵一定有一条边与凸包共线（证明太长了，可以自己百度）</p><p>所以用旋转卡壳，对于每条边，求出最远点，另外两边“卡”一下即可（感觉自己说了个寂寞）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STC static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DB double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> DB eps = <span class="number">1e-12</span>, INF = <span class="number">1e20</span>, PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DB x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point &amp;t) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x == t.x ? y &lt; t.y : x &lt; t.x;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> - (Point t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x - t.x, y - t.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (Point t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x + t.x, y + t.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    DB <span class="keyword">operator</span> * (Point t) <span class="comment">//叉积</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x * t.y - y * t.x;</span><br><span class="line">    &#125;</span><br><span class="line">    DB <span class="keyword">operator</span> &amp; (Point t) <span class="comment">//点积</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x * t.x + y * t.y;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> * (DB t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x * t, y * t&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> / (DB t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x / t, y / t&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ans[N];</span><br><span class="line">DB as = INF;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> stk[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(DB x, DB y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">area</span><span class="params">(Point x, Point y, Point z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (y - x) * (z - x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">mo</span><span class="params">(Point x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x &amp; x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">proj</span><span class="params">(Point x, Point y, Point z)</span> <span class="comment">//求xy在xz的投影</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((y - x) &amp; (z - x)) / <span class="built_in">mo</span>(y - x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">norm</span><span class="params">(Point x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / <span class="built_in">mo</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">rot</span><span class="params">(Point x, DB th)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;x.x * <span class="built_in">cos</span>(th) + x.y * <span class="built_in">sin</span>(th), -x.x * <span class="built_in">sin</span>(th) + x.y * <span class="built_in">cos</span>(th)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">convex</span><span class="params">(Point x[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(x, x + len);</span><br><span class="line">    STC <span class="keyword">bool</span> used[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (top &gt;= <span class="number">2</span> &amp;&amp; <span class="built_in">cmp</span>(<span class="built_in">area</span>(x[stk[top - <span class="number">2</span>]], x[stk[top - <span class="number">1</span>]], x[i]), <span class="number">0</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">cmp</span>(<span class="built_in">area</span>(x[stk[top - <span class="number">2</span>]], x[stk[top - <span class="number">1</span>]], x[i]), <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br><span class="line">                used[stk[--top]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                --top;</span><br><span class="line">        stk[top++] = i;</span><br><span class="line">        used[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    used[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (used[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (top &gt;= <span class="number">2</span> &amp;&amp; <span class="built_in">cmp</span>(<span class="built_in">area</span>(x[stk[top - <span class="number">2</span>]], x[stk[top - <span class="number">1</span>]], x[i]), <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br><span class="line">            --top;</span><br><span class="line">        stk[top++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(stk, stk + top);</span><br><span class="line">    --top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rot_cal</span><span class="params">(Point x[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">convex</span>(x, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, a = <span class="number">2</span>, b = <span class="number">1</span>, c = <span class="number">2</span>; i &lt; top; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> d = x[stk[i]], e = x[stk[i + <span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cmp</span>(<span class="built_in">area</span>(d, e, x[stk[a]]), <span class="built_in">area</span>(d, e, x[stk[a + <span class="number">1</span>]])) &lt; <span class="number">0</span>)</span><br><span class="line">            a = (a + <span class="number">1</span>) % top;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cmp</span>(<span class="built_in">proj</span>(d, e, x[stk[b]]), <span class="built_in">proj</span>(d, e, x[stk[b + <span class="number">1</span>]])) &lt; <span class="number">0</span>)</span><br><span class="line">            b = (b + <span class="number">1</span>) % top;</span><br><span class="line">        <span class="keyword">if</span> (!i)</span><br><span class="line">            c = a;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cmp</span>(<span class="built_in">proj</span>(d, e, x[stk[c]]), <span class="built_in">proj</span>(d, e, x[stk[c + <span class="number">1</span>]])) &gt; <span class="number">0</span>)</span><br><span class="line">            c = (c + <span class="number">1</span>) % top;</span><br><span class="line">        <span class="keyword">auto</span> ta = x[stk[a]], tb = x[stk[b]], tc = x[stk[c]];</span><br><span class="line">        DB h = <span class="built_in">area</span>(d, e, ta) / <span class="built_in">mo</span>(e - d);</span><br><span class="line">        DB w = ((tb - tc) &amp; (e - d)) / <span class="built_in">mo</span>(e - d);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cmp</span>(h * w, as) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            as = w * h;</span><br><span class="line">            ans[<span class="number">0</span>] = d + <span class="built_in">norm</span>(e - d) * <span class="built_in">proj</span>(d, e, tb);</span><br><span class="line">            ans[<span class="number">3</span>] = d + <span class="built_in">norm</span>(e - d) * <span class="built_in">proj</span>(d, e, tc);</span><br><span class="line">            <span class="keyword">auto</span> u = <span class="built_in">norm</span>(<span class="built_in">rot</span>(e - d, -PI / <span class="number">2</span>));</span><br><span class="line">            ans[<span class="number">1</span>] = ans[<span class="number">0</span>] + u * h;</span><br><span class="line">            ans[<span class="number">2</span>] = ans[<span class="number">3</span>] + u * h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    Point q[N];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>, &amp;q[i].x, &amp;q[i].y);</span><br><span class="line">    <span class="built_in">rot_cal</span>(q, n);</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cmp</span>(ans[i].y, ans[k].y) &lt; <span class="number">0</span> || !<span class="built_in">cmp</span>(ans[i].y, ans[k].y) &amp;&amp; <span class="built_in">cmp</span>(ans[i].x, ans[k].x) &lt; <span class="number">0</span>)</span><br><span class="line">            k = i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.5lf\n&quot;</span>, as);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i, ++k)</span><br><span class="line">    &#123;</span><br><span class="line">        DB x = ans[k % <span class="number">4</span>].x, y = ans[k % <span class="number">4</span>].y;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cmp</span>(x, <span class="number">0</span>)) <span class="comment">//c++的四舍五入会把-0.000001改成-0.00000</span></span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cmp</span>(y, <span class="number">0</span>))</span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.5lf %.5lf\n&quot;</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 四个多音字，怎么读啊~&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://dyd-true.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数论,数学" scheme="https://dyd-true.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="笔记" scheme="https://dyd-true.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算几何" scheme="https://dyd-true.github.io/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
</feed>
